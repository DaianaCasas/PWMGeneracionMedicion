
pwmgm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d884  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000334  0800d994  0800d994  0001d994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dcc8  0800dcc8  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  0800dcc8  0800dcc8  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dcc8  0800dcc8  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dcc8  0800dcc8  0001dcc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dccc  0800dccc  0001dccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0800dcd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000db8  200000a0  0800dd70  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e58  0800dd70  00020e58  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002175b  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004360  00000000  00000000  00041824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ae0  00000000  00000000  00045b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001950  00000000  00000000  00047668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c88a  00000000  00000000  00048fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f544  00000000  00000000  00065842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a281  00000000  00000000  00084d86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011f007  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077cc  00000000  00000000  0011f05c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000a0 	.word	0x200000a0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d97c 	.word	0x0800d97c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000a4 	.word	0x200000a4
 800014c:	0800d97c 	.word	0x0800d97c

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2uiz>:
 800071c:	004a      	lsls	r2, r1, #1
 800071e:	d211      	bcs.n	8000744 <__aeabi_d2uiz+0x28>
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000724:	d211      	bcs.n	800074a <__aeabi_d2uiz+0x2e>
 8000726:	d50d      	bpl.n	8000744 <__aeabi_d2uiz+0x28>
 8000728:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d40e      	bmi.n	8000750 <__aeabi_d2uiz+0x34>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074e:	d102      	bne.n	8000756 <__aeabi_d2uiz+0x3a>
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr

0800075c <__aeabi_frsub>:
 800075c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000760:	e002      	b.n	8000768 <__addsf3>
 8000762:	bf00      	nop

08000764 <__aeabi_fsub>:
 8000764:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000768 <__addsf3>:
 8000768:	0042      	lsls	r2, r0, #1
 800076a:	bf1f      	itttt	ne
 800076c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000770:	ea92 0f03 	teqne	r2, r3
 8000774:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000778:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800077c:	d06a      	beq.n	8000854 <__addsf3+0xec>
 800077e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000782:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000786:	bfc1      	itttt	gt
 8000788:	18d2      	addgt	r2, r2, r3
 800078a:	4041      	eorgt	r1, r0
 800078c:	4048      	eorgt	r0, r1
 800078e:	4041      	eorgt	r1, r0
 8000790:	bfb8      	it	lt
 8000792:	425b      	neglt	r3, r3
 8000794:	2b19      	cmp	r3, #25
 8000796:	bf88      	it	hi
 8000798:	4770      	bxhi	lr
 800079a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800079e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80007a6:	bf18      	it	ne
 80007a8:	4240      	negne	r0, r0
 80007aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80007b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80007b6:	bf18      	it	ne
 80007b8:	4249      	negne	r1, r1
 80007ba:	ea92 0f03 	teq	r2, r3
 80007be:	d03f      	beq.n	8000840 <__addsf3+0xd8>
 80007c0:	f1a2 0201 	sub.w	r2, r2, #1
 80007c4:	fa41 fc03 	asr.w	ip, r1, r3
 80007c8:	eb10 000c 	adds.w	r0, r0, ip
 80007cc:	f1c3 0320 	rsb	r3, r3, #32
 80007d0:	fa01 f103 	lsl.w	r1, r1, r3
 80007d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	d502      	bpl.n	80007e0 <__addsf3+0x78>
 80007da:	4249      	negs	r1, r1
 80007dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80007e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80007e4:	d313      	bcc.n	800080e <__addsf3+0xa6>
 80007e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80007ea:	d306      	bcc.n	80007fa <__addsf3+0x92>
 80007ec:	0840      	lsrs	r0, r0, #1
 80007ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80007f2:	f102 0201 	add.w	r2, r2, #1
 80007f6:	2afe      	cmp	r2, #254	; 0xfe
 80007f8:	d251      	bcs.n	800089e <__addsf3+0x136>
 80007fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80007fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000802:	bf08      	it	eq
 8000804:	f020 0001 	biceq.w	r0, r0, #1
 8000808:	ea40 0003 	orr.w	r0, r0, r3
 800080c:	4770      	bx	lr
 800080e:	0049      	lsls	r1, r1, #1
 8000810:	eb40 0000 	adc.w	r0, r0, r0
 8000814:	3a01      	subs	r2, #1
 8000816:	bf28      	it	cs
 8000818:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800081c:	d2ed      	bcs.n	80007fa <__addsf3+0x92>
 800081e:	fab0 fc80 	clz	ip, r0
 8000822:	f1ac 0c08 	sub.w	ip, ip, #8
 8000826:	ebb2 020c 	subs.w	r2, r2, ip
 800082a:	fa00 f00c 	lsl.w	r0, r0, ip
 800082e:	bfaa      	itet	ge
 8000830:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000834:	4252      	neglt	r2, r2
 8000836:	4318      	orrge	r0, r3
 8000838:	bfbc      	itt	lt
 800083a:	40d0      	lsrlt	r0, r2
 800083c:	4318      	orrlt	r0, r3
 800083e:	4770      	bx	lr
 8000840:	f092 0f00 	teq	r2, #0
 8000844:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000848:	bf06      	itte	eq
 800084a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800084e:	3201      	addeq	r2, #1
 8000850:	3b01      	subne	r3, #1
 8000852:	e7b5      	b.n	80007c0 <__addsf3+0x58>
 8000854:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000858:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800085c:	bf18      	it	ne
 800085e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000862:	d021      	beq.n	80008a8 <__addsf3+0x140>
 8000864:	ea92 0f03 	teq	r2, r3
 8000868:	d004      	beq.n	8000874 <__addsf3+0x10c>
 800086a:	f092 0f00 	teq	r2, #0
 800086e:	bf08      	it	eq
 8000870:	4608      	moveq	r0, r1
 8000872:	4770      	bx	lr
 8000874:	ea90 0f01 	teq	r0, r1
 8000878:	bf1c      	itt	ne
 800087a:	2000      	movne	r0, #0
 800087c:	4770      	bxne	lr
 800087e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000882:	d104      	bne.n	800088e <__addsf3+0x126>
 8000884:	0040      	lsls	r0, r0, #1
 8000886:	bf28      	it	cs
 8000888:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800088c:	4770      	bx	lr
 800088e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000892:	bf3c      	itt	cc
 8000894:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000898:	4770      	bxcc	lr
 800089a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800089e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80008a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008a6:	4770      	bx	lr
 80008a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80008ac:	bf16      	itet	ne
 80008ae:	4608      	movne	r0, r1
 80008b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80008b4:	4601      	movne	r1, r0
 80008b6:	0242      	lsls	r2, r0, #9
 80008b8:	bf06      	itte	eq
 80008ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80008be:	ea90 0f01 	teqeq	r0, r1
 80008c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80008c6:	4770      	bx	lr

080008c8 <__aeabi_ui2f>:
 80008c8:	f04f 0300 	mov.w	r3, #0
 80008cc:	e004      	b.n	80008d8 <__aeabi_i2f+0x8>
 80008ce:	bf00      	nop

080008d0 <__aeabi_i2f>:
 80008d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80008d4:	bf48      	it	mi
 80008d6:	4240      	negmi	r0, r0
 80008d8:	ea5f 0c00 	movs.w	ip, r0
 80008dc:	bf08      	it	eq
 80008de:	4770      	bxeq	lr
 80008e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80008e4:	4601      	mov	r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	e01c      	b.n	8000926 <__aeabi_l2f+0x2a>

080008ec <__aeabi_ul2f>:
 80008ec:	ea50 0201 	orrs.w	r2, r0, r1
 80008f0:	bf08      	it	eq
 80008f2:	4770      	bxeq	lr
 80008f4:	f04f 0300 	mov.w	r3, #0
 80008f8:	e00a      	b.n	8000910 <__aeabi_l2f+0x14>
 80008fa:	bf00      	nop

080008fc <__aeabi_l2f>:
 80008fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000900:	bf08      	it	eq
 8000902:	4770      	bxeq	lr
 8000904:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000908:	d502      	bpl.n	8000910 <__aeabi_l2f+0x14>
 800090a:	4240      	negs	r0, r0
 800090c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000910:	ea5f 0c01 	movs.w	ip, r1
 8000914:	bf02      	ittt	eq
 8000916:	4684      	moveq	ip, r0
 8000918:	4601      	moveq	r1, r0
 800091a:	2000      	moveq	r0, #0
 800091c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000920:	bf08      	it	eq
 8000922:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000926:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800092a:	fabc f28c 	clz	r2, ip
 800092e:	3a08      	subs	r2, #8
 8000930:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000934:	db10      	blt.n	8000958 <__aeabi_l2f+0x5c>
 8000936:	fa01 fc02 	lsl.w	ip, r1, r2
 800093a:	4463      	add	r3, ip
 800093c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000940:	f1c2 0220 	rsb	r2, r2, #32
 8000944:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000948:	fa20 f202 	lsr.w	r2, r0, r2
 800094c:	eb43 0002 	adc.w	r0, r3, r2
 8000950:	bf08      	it	eq
 8000952:	f020 0001 	biceq.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	f102 0220 	add.w	r2, r2, #32
 800095c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000960:	f1c2 0220 	rsb	r2, r2, #32
 8000964:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000968:	fa21 f202 	lsr.w	r2, r1, r2
 800096c:	eb43 0002 	adc.w	r0, r3, r2
 8000970:	bf08      	it	eq
 8000972:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000976:	4770      	bx	lr

08000978 <__aeabi_fmul>:
 8000978:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800097c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000980:	bf1e      	ittt	ne
 8000982:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000986:	ea92 0f0c 	teqne	r2, ip
 800098a:	ea93 0f0c 	teqne	r3, ip
 800098e:	d06f      	beq.n	8000a70 <__aeabi_fmul+0xf8>
 8000990:	441a      	add	r2, r3
 8000992:	ea80 0c01 	eor.w	ip, r0, r1
 8000996:	0240      	lsls	r0, r0, #9
 8000998:	bf18      	it	ne
 800099a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800099e:	d01e      	beq.n	80009de <__aeabi_fmul+0x66>
 80009a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80009a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80009a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80009ac:	fba0 3101 	umull	r3, r1, r0, r1
 80009b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80009b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80009b8:	bf3e      	ittt	cc
 80009ba:	0049      	lslcc	r1, r1, #1
 80009bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80009c0:	005b      	lslcc	r3, r3, #1
 80009c2:	ea40 0001 	orr.w	r0, r0, r1
 80009c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80009ca:	2afd      	cmp	r2, #253	; 0xfd
 80009cc:	d81d      	bhi.n	8000a0a <__aeabi_fmul+0x92>
 80009ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80009d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009d6:	bf08      	it	eq
 80009d8:	f020 0001 	biceq.w	r0, r0, #1
 80009dc:	4770      	bx	lr
 80009de:	f090 0f00 	teq	r0, #0
 80009e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80009e6:	bf08      	it	eq
 80009e8:	0249      	lsleq	r1, r1, #9
 80009ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80009f2:	3a7f      	subs	r2, #127	; 0x7f
 80009f4:	bfc2      	ittt	gt
 80009f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80009fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80009fe:	4770      	bxgt	lr
 8000a00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a04:	f04f 0300 	mov.w	r3, #0
 8000a08:	3a01      	subs	r2, #1
 8000a0a:	dc5d      	bgt.n	8000ac8 <__aeabi_fmul+0x150>
 8000a0c:	f112 0f19 	cmn.w	r2, #25
 8000a10:	bfdc      	itt	le
 8000a12:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000a16:	4770      	bxle	lr
 8000a18:	f1c2 0200 	rsb	r2, r2, #0
 8000a1c:	0041      	lsls	r1, r0, #1
 8000a1e:	fa21 f102 	lsr.w	r1, r1, r2
 8000a22:	f1c2 0220 	rsb	r2, r2, #32
 8000a26:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a2a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a2e:	f140 0000 	adc.w	r0, r0, #0
 8000a32:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a36:	bf08      	it	eq
 8000a38:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a3c:	4770      	bx	lr
 8000a3e:	f092 0f00 	teq	r2, #0
 8000a42:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a46:	bf02      	ittt	eq
 8000a48:	0040      	lsleq	r0, r0, #1
 8000a4a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a4e:	3a01      	subeq	r2, #1
 8000a50:	d0f9      	beq.n	8000a46 <__aeabi_fmul+0xce>
 8000a52:	ea40 000c 	orr.w	r0, r0, ip
 8000a56:	f093 0f00 	teq	r3, #0
 8000a5a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a5e:	bf02      	ittt	eq
 8000a60:	0049      	lsleq	r1, r1, #1
 8000a62:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a66:	3b01      	subeq	r3, #1
 8000a68:	d0f9      	beq.n	8000a5e <__aeabi_fmul+0xe6>
 8000a6a:	ea41 010c 	orr.w	r1, r1, ip
 8000a6e:	e78f      	b.n	8000990 <__aeabi_fmul+0x18>
 8000a70:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a74:	ea92 0f0c 	teq	r2, ip
 8000a78:	bf18      	it	ne
 8000a7a:	ea93 0f0c 	teqne	r3, ip
 8000a7e:	d00a      	beq.n	8000a96 <__aeabi_fmul+0x11e>
 8000a80:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a84:	bf18      	it	ne
 8000a86:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a8a:	d1d8      	bne.n	8000a3e <__aeabi_fmul+0xc6>
 8000a8c:	ea80 0001 	eor.w	r0, r0, r1
 8000a90:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000a94:	4770      	bx	lr
 8000a96:	f090 0f00 	teq	r0, #0
 8000a9a:	bf17      	itett	ne
 8000a9c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	f091 0f00 	teqne	r1, #0
 8000aa6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000aaa:	d014      	beq.n	8000ad6 <__aeabi_fmul+0x15e>
 8000aac:	ea92 0f0c 	teq	r2, ip
 8000ab0:	d101      	bne.n	8000ab6 <__aeabi_fmul+0x13e>
 8000ab2:	0242      	lsls	r2, r0, #9
 8000ab4:	d10f      	bne.n	8000ad6 <__aeabi_fmul+0x15e>
 8000ab6:	ea93 0f0c 	teq	r3, ip
 8000aba:	d103      	bne.n	8000ac4 <__aeabi_fmul+0x14c>
 8000abc:	024b      	lsls	r3, r1, #9
 8000abe:	bf18      	it	ne
 8000ac0:	4608      	movne	r0, r1
 8000ac2:	d108      	bne.n	8000ad6 <__aeabi_fmul+0x15e>
 8000ac4:	ea80 0001 	eor.w	r0, r0, r1
 8000ac8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad4:	4770      	bx	lr
 8000ad6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ada:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_fdiv>:
 8000ae0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ae4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ae8:	bf1e      	ittt	ne
 8000aea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000aee:	ea92 0f0c 	teqne	r2, ip
 8000af2:	ea93 0f0c 	teqne	r3, ip
 8000af6:	d069      	beq.n	8000bcc <__aeabi_fdiv+0xec>
 8000af8:	eba2 0203 	sub.w	r2, r2, r3
 8000afc:	ea80 0c01 	eor.w	ip, r0, r1
 8000b00:	0249      	lsls	r1, r1, #9
 8000b02:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b06:	d037      	beq.n	8000b78 <__aeabi_fdiv+0x98>
 8000b08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b0c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b10:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b14:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b18:	428b      	cmp	r3, r1
 8000b1a:	bf38      	it	cc
 8000b1c:	005b      	lslcc	r3, r3, #1
 8000b1e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000b22:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000b26:	428b      	cmp	r3, r1
 8000b28:	bf24      	itt	cs
 8000b2a:	1a5b      	subcs	r3, r3, r1
 8000b2c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b30:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b34:	bf24      	itt	cs
 8000b36:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b3a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b3e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000b42:	bf24      	itt	cs
 8000b44:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000b48:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b4c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000b50:	bf24      	itt	cs
 8000b52:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000b56:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b5a:	011b      	lsls	r3, r3, #4
 8000b5c:	bf18      	it	ne
 8000b5e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b62:	d1e0      	bne.n	8000b26 <__aeabi_fdiv+0x46>
 8000b64:	2afd      	cmp	r2, #253	; 0xfd
 8000b66:	f63f af50 	bhi.w	8000a0a <__aeabi_fmul+0x92>
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b7c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b80:	327f      	adds	r2, #127	; 0x7f
 8000b82:	bfc2      	ittt	gt
 8000b84:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000b88:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b8c:	4770      	bxgt	lr
 8000b8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b92:	f04f 0300 	mov.w	r3, #0
 8000b96:	3a01      	subs	r2, #1
 8000b98:	e737      	b.n	8000a0a <__aeabi_fmul+0x92>
 8000b9a:	f092 0f00 	teq	r2, #0
 8000b9e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ba2:	bf02      	ittt	eq
 8000ba4:	0040      	lsleq	r0, r0, #1
 8000ba6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000baa:	3a01      	subeq	r2, #1
 8000bac:	d0f9      	beq.n	8000ba2 <__aeabi_fdiv+0xc2>
 8000bae:	ea40 000c 	orr.w	r0, r0, ip
 8000bb2:	f093 0f00 	teq	r3, #0
 8000bb6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bba:	bf02      	ittt	eq
 8000bbc:	0049      	lsleq	r1, r1, #1
 8000bbe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000bc2:	3b01      	subeq	r3, #1
 8000bc4:	d0f9      	beq.n	8000bba <__aeabi_fdiv+0xda>
 8000bc6:	ea41 010c 	orr.w	r1, r1, ip
 8000bca:	e795      	b.n	8000af8 <__aeabi_fdiv+0x18>
 8000bcc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000bd0:	ea92 0f0c 	teq	r2, ip
 8000bd4:	d108      	bne.n	8000be8 <__aeabi_fdiv+0x108>
 8000bd6:	0242      	lsls	r2, r0, #9
 8000bd8:	f47f af7d 	bne.w	8000ad6 <__aeabi_fmul+0x15e>
 8000bdc:	ea93 0f0c 	teq	r3, ip
 8000be0:	f47f af70 	bne.w	8000ac4 <__aeabi_fmul+0x14c>
 8000be4:	4608      	mov	r0, r1
 8000be6:	e776      	b.n	8000ad6 <__aeabi_fmul+0x15e>
 8000be8:	ea93 0f0c 	teq	r3, ip
 8000bec:	d104      	bne.n	8000bf8 <__aeabi_fdiv+0x118>
 8000bee:	024b      	lsls	r3, r1, #9
 8000bf0:	f43f af4c 	beq.w	8000a8c <__aeabi_fmul+0x114>
 8000bf4:	4608      	mov	r0, r1
 8000bf6:	e76e      	b.n	8000ad6 <__aeabi_fmul+0x15e>
 8000bf8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000bfc:	bf18      	it	ne
 8000bfe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c02:	d1ca      	bne.n	8000b9a <__aeabi_fdiv+0xba>
 8000c04:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000c08:	f47f af5c 	bne.w	8000ac4 <__aeabi_fmul+0x14c>
 8000c0c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000c10:	f47f af3c 	bne.w	8000a8c <__aeabi_fmul+0x114>
 8000c14:	e75f      	b.n	8000ad6 <__aeabi_fmul+0x15e>
 8000c16:	bf00      	nop

08000c18 <__aeabi_f2iz>:
 8000c18:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c1c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c20:	d30f      	bcc.n	8000c42 <__aeabi_f2iz+0x2a>
 8000c22:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000c26:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_f2iz+0x30>
 8000c2c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c34:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c38:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3c:	bf18      	it	ne
 8000c3e:	4240      	negne	r0, r0
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr
 8000c48:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c4c:	d101      	bne.n	8000c52 <__aeabi_f2iz+0x3a>
 8000c4e:	0242      	lsls	r2, r0, #9
 8000c50:	d105      	bne.n	8000c5e <__aeabi_f2iz+0x46>
 8000c52:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000c56:	bf08      	it	eq
 8000c58:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c5c:	4770      	bx	lr
 8000c5e:	f04f 0000 	mov.w	r0, #0
 8000c62:	4770      	bx	lr

08000c64 <SELECT>:
#define SD_CS_GPIO_Port GPIOA
#define SD_CS_Pin GPIO_PIN_4

/* SPI Chip Select */
static void SELECT(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2110      	movs	r1, #16
 8000c6c:	4802      	ldr	r0, [pc, #8]	; (8000c78 <SELECT+0x14>)
 8000c6e:	f002 fbd1 	bl	8003414 <HAL_GPIO_WritePin>
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40010800 	.word	0x40010800

08000c7c <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000c80:	2201      	movs	r2, #1
 8000c82:	2110      	movs	r1, #16
 8000c84:	4802      	ldr	r0, [pc, #8]	; (8000c90 <DESELECT+0x14>)
 8000c86:	f002 fbc5 	bl	8003414 <HAL_GPIO_WritePin>
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40010800 	.word	0x40010800

08000c94 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000c9e:	bf00      	nop
 8000ca0:	4808      	ldr	r0, [pc, #32]	; (8000cc4 <SPI_TxByte+0x30>)
 8000ca2:	f004 f83a 	bl	8004d1a <HAL_SPI_GetState>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d1f9      	bne.n	8000ca0 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8000cac:	1df9      	adds	r1, r7, #7
 8000cae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	4803      	ldr	r0, [pc, #12]	; (8000cc4 <SPI_TxByte+0x30>)
 8000cb6:	f003 fd3d 	bl	8004734 <HAL_SPI_Transmit>
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	2000066c 	.word	0x2000066c

08000cc8 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000cce:	23ff      	movs	r3, #255	; 0xff
 8000cd0:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8000cd6:	bf00      	nop
 8000cd8:	4809      	ldr	r0, [pc, #36]	; (8000d00 <SPI_RxByte+0x38>)
 8000cda:	f004 f81e 	bl	8004d1a <HAL_SPI_GetState>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d1f9      	bne.n	8000cd8 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8000ce4:	1dba      	adds	r2, r7, #6
 8000ce6:	1df9      	adds	r1, r7, #7
 8000ce8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cec:	9300      	str	r3, [sp, #0]
 8000cee:	2301      	movs	r3, #1
 8000cf0:	4803      	ldr	r0, [pc, #12]	; (8000d00 <SPI_RxByte+0x38>)
 8000cf2:	f003 fe62 	bl	80049ba <HAL_SPI_TransmitReceive>

  return data;
 8000cf6:	79bb      	ldrb	r3, [r7, #6]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	2000066c 	.word	0x2000066c

08000d04 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000d0c:	f7ff ffdc 	bl	8000cc8 <SPI_RxByte>
 8000d10:	4603      	mov	r3, r0
 8000d12:	461a      	mov	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	701a      	strb	r2, [r3, #0]
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <SD_ReadyWait+0x34>)
 8000d28:	2232      	movs	r2, #50	; 0x32
 8000d2a:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000d2c:	f7ff ffcc 	bl	8000cc8 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000d30:	f7ff ffca 	bl	8000cc8 <SPI_RxByte>
 8000d34:	4603      	mov	r3, r0
 8000d36:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	2bff      	cmp	r3, #255	; 0xff
 8000d3c:	d004      	beq.n	8000d48 <SD_ReadyWait+0x28>
 8000d3e:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <SD_ReadyWait+0x34>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d1f3      	bne.n	8000d30 <SD_ReadyWait+0x10>

  return res;
 8000d48:	79fb      	ldrb	r3, [r7, #7]
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	2000099c 	.word	0x2000099c

08000d58 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000d5e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000d62:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8000d64:	f7ff ff8a 	bl	8000c7c <DESELECT>

  for(int i = 0; i < 10; i++)
 8000d68:	2300      	movs	r3, #0
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	e005      	b.n	8000d7a <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000d6e:	20ff      	movs	r0, #255	; 0xff
 8000d70:	f7ff ff90 	bl	8000c94 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	3301      	adds	r3, #1
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	2b09      	cmp	r3, #9
 8000d7e:	ddf6      	ble.n	8000d6e <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8000d80:	f7ff ff70 	bl	8000c64 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8000d84:	2340      	movs	r3, #64	; 0x40
 8000d86:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000d98:	2395      	movs	r3, #149	; 0x95
 8000d9a:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	e009      	b.n	8000db6 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000da2:	1d3a      	adds	r2, r7, #4
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	4413      	add	r3, r2
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff ff72 	bl	8000c94 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	3301      	adds	r3, #1
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	2b05      	cmp	r3, #5
 8000dba:	ddf2      	ble.n	8000da2 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8000dbc:	e002      	b.n	8000dc4 <SD_PowerOn+0x6c>
  {
    Count--;
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000dc4:	f7ff ff80 	bl	8000cc8 <SPI_RxByte>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d002      	beq.n	8000dd4 <SD_PowerOn+0x7c>
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d1f4      	bne.n	8000dbe <SD_PowerOn+0x66>
  }

  DESELECT();
 8000dd4:	f7ff ff52 	bl	8000c7c <DESELECT>
  SPI_TxByte(0XFF);
 8000dd8:	20ff      	movs	r0, #255	; 0xff
 8000dda:	f7ff ff5b 	bl	8000c94 <SPI_TxByte>

  PowerFlag = 1;
 8000dde:	4b03      	ldr	r3, [pc, #12]	; (8000dec <SD_PowerOn+0x94>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	701a      	strb	r2, [r3, #0]
}
 8000de4:	bf00      	nop
 8000de6:	3718      	adds	r7, #24
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	200000bd 	.word	0x200000bd

08000df0 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000df4:	4b03      	ldr	r3, [pc, #12]	; (8000e04 <SD_PowerOff+0x14>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	701a      	strb	r2, [r3, #0]
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	200000bd 	.word	0x200000bd

08000e08 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000e0c:	4b02      	ldr	r3, [pc, #8]	; (8000e18 <SD_CheckPower+0x10>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr
 8000e18:	200000bd 	.word	0x200000bd

08000e1c <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8000e26:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <SD_RxDataBlock+0x68>)
 8000e28:	220a      	movs	r2, #10
 8000e2a:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8000e2c:	f7ff ff4c 	bl	8000cc8 <SPI_RxByte>
 8000e30:	4603      	mov	r3, r0
 8000e32:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
 8000e36:	2bff      	cmp	r3, #255	; 0xff
 8000e38:	d104      	bne.n	8000e44 <SD_RxDataBlock+0x28>
 8000e3a:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <SD_RxDataBlock+0x68>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d1f3      	bne.n	8000e2c <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
 8000e46:	2bfe      	cmp	r3, #254	; 0xfe
 8000e48:	d001      	beq.n	8000e4e <SD_RxDataBlock+0x32>
    return FALSE;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	e016      	b.n	8000e7c <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	1c5a      	adds	r2, r3, #1
 8000e52:	607a      	str	r2, [r7, #4]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff55 	bl	8000d04 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	1c5a      	adds	r2, r3, #1
 8000e5e:	607a      	str	r2, [r7, #4]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff4f 	bl	8000d04 <SPI_RxBytePtr>
  } while(btr -= 2);
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	3b02      	subs	r3, #2
 8000e6a:	603b      	str	r3, [r7, #0]
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d1ed      	bne.n	8000e4e <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8000e72:	f7ff ff29 	bl	8000cc8 <SPI_RxByte>
  SPI_RxByte();
 8000e76:	f7ff ff27 	bl	8000cc8 <SPI_RxByte>

  return TRUE;
 8000e7a:	2301      	movs	r3, #1
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	2000099d 	.word	0x2000099d

08000e88 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	460b      	mov	r3, r1
 8000e92:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000e98:	f7ff ff42 	bl	8000d20 <SD_ReadyWait>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2bff      	cmp	r3, #255	; 0xff
 8000ea0:	d001      	beq.n	8000ea6 <SD_TxDataBlock+0x1e>
    return FALSE;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	e040      	b.n	8000f28 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8000ea6:	78fb      	ldrb	r3, [r7, #3]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fef3 	bl	8000c94 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8000eae:	78fb      	ldrb	r3, [r7, #3]
 8000eb0:	2bfd      	cmp	r3, #253	; 0xfd
 8000eb2:	d031      	beq.n	8000f18 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	1c5a      	adds	r2, r3, #1
 8000ebc:	607a      	str	r2, [r7, #4]
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fee7 	bl	8000c94 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	1c5a      	adds	r2, r3, #1
 8000eca:	607a      	str	r2, [r7, #4]
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fee0 	bl	8000c94 <SPI_TxByte>
    } while (--wc);
 8000ed4:	7bbb      	ldrb	r3, [r7, #14]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	73bb      	strb	r3, [r7, #14]
 8000eda:	7bbb      	ldrb	r3, [r7, #14]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d1eb      	bne.n	8000eb8 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8000ee0:	f7ff fef2 	bl	8000cc8 <SPI_RxByte>
    SPI_RxByte();
 8000ee4:	f7ff fef0 	bl	8000cc8 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8000ee8:	e00b      	b.n	8000f02 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8000eea:	f7ff feed 	bl	8000cc8 <SPI_RxByte>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	f003 031f 	and.w	r3, r3, #31
 8000ef8:	2b05      	cmp	r3, #5
 8000efa:	d006      	beq.n	8000f0a <SD_TxDataBlock+0x82>
        break;

      i++;
 8000efc:	7b7b      	ldrb	r3, [r7, #13]
 8000efe:	3301      	adds	r3, #1
 8000f00:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8000f02:	7b7b      	ldrb	r3, [r7, #13]
 8000f04:	2b40      	cmp	r3, #64	; 0x40
 8000f06:	d9f0      	bls.n	8000eea <SD_TxDataBlock+0x62>
 8000f08:	e000      	b.n	8000f0c <SD_TxDataBlock+0x84>
        break;
 8000f0a:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000f0c:	bf00      	nop
 8000f0e:	f7ff fedb 	bl	8000cc8 <SPI_RxByte>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d0fa      	beq.n	8000f0e <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
 8000f1a:	f003 031f 	and.w	r3, r3, #31
 8000f1e:	2b05      	cmp	r3, #5
 8000f20:	d101      	bne.n	8000f26 <SD_TxDataBlock+0x9e>
    return TRUE;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e000      	b.n	8000f28 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000f26:	2300      	movs	r3, #0
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	6039      	str	r1, [r7, #0]
 8000f3a:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000f3c:	f7ff fef0 	bl	8000d20 <SD_ReadyWait>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2bff      	cmp	r3, #255	; 0xff
 8000f44:	d001      	beq.n	8000f4a <SD_SendCmd+0x1a>
    return 0xFF;
 8000f46:	23ff      	movs	r3, #255	; 0xff
 8000f48:	e040      	b.n	8000fcc <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fea1 	bl	8000c94 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	0e1b      	lsrs	r3, r3, #24
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fe9b 	bl	8000c94 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	0c1b      	lsrs	r3, r3, #16
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fe95 	bl	8000c94 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	0a1b      	lsrs	r3, r3, #8
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fe8f 	bl	8000c94 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff fe8a 	bl	8000c94 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	2b40      	cmp	r3, #64	; 0x40
 8000f88:	d101      	bne.n	8000f8e <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000f8a:	2395      	movs	r3, #149	; 0x95
 8000f8c:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	2b48      	cmp	r3, #72	; 0x48
 8000f92:	d101      	bne.n	8000f98 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8000f94:	2387      	movs	r3, #135	; 0x87
 8000f96:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fe7a 	bl	8000c94 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	2b4c      	cmp	r3, #76	; 0x4c
 8000fa4:	d101      	bne.n	8000faa <SD_SendCmd+0x7a>
    SPI_RxByte();
 8000fa6:	f7ff fe8f 	bl	8000cc8 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8000faa:	230a      	movs	r3, #10
 8000fac:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8000fae:	f7ff fe8b 	bl	8000cc8 <SPI_RxByte>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000fb6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	da05      	bge.n	8000fca <SD_SendCmd+0x9a>
 8000fbe:	7bbb      	ldrb	r3, [r7, #14]
 8000fc0:	3b01      	subs	r3, #1
 8000fc2:	73bb      	strb	r3, [r7, #14]
 8000fc4:	7bbb      	ldrb	r3, [r7, #14]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1f1      	bne.n	8000fae <SD_SendCmd+0x7e>

  return res;
 8000fca:	7b7b      	ldrb	r3, [r7, #13]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000fd4:	b590      	push	{r4, r7, lr}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e0d5      	b.n	8001194 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000fe8:	4b6c      	ldr	r3, [pc, #432]	; (800119c <SD_disk_initialize+0x1c8>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <SD_disk_initialize+0x2a>
    return Stat;
 8000ff6:	4b69      	ldr	r3, [pc, #420]	; (800119c <SD_disk_initialize+0x1c8>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	e0ca      	b.n	8001194 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8000ffe:	f7ff feab 	bl	8000d58 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8001002:	f7ff fe2f 	bl	8000c64 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 800100a:	2100      	movs	r1, #0
 800100c:	2040      	movs	r0, #64	; 0x40
 800100e:	f7ff ff8f 	bl	8000f30 <SD_SendCmd>
 8001012:	4603      	mov	r3, r0
 8001014:	2b01      	cmp	r3, #1
 8001016:	f040 80a5 	bne.w	8001164 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 800101a:	4b61      	ldr	r3, [pc, #388]	; (80011a0 <SD_disk_initialize+0x1cc>)
 800101c:	2264      	movs	r2, #100	; 0x64
 800101e:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001020:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001024:	2048      	movs	r0, #72	; 0x48
 8001026:	f7ff ff83 	bl	8000f30 <SD_SendCmd>
 800102a:	4603      	mov	r3, r0
 800102c:	2b01      	cmp	r3, #1
 800102e:	d158      	bne.n	80010e2 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001030:	2300      	movs	r3, #0
 8001032:	73fb      	strb	r3, [r7, #15]
 8001034:	e00c      	b.n	8001050 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001036:	7bfc      	ldrb	r4, [r7, #15]
 8001038:	f7ff fe46 	bl	8000cc8 <SPI_RxByte>
 800103c:	4603      	mov	r3, r0
 800103e:	461a      	mov	r2, r3
 8001040:	f107 0310 	add.w	r3, r7, #16
 8001044:	4423      	add	r3, r4
 8001046:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	3301      	adds	r3, #1
 800104e:	73fb      	strb	r3, [r7, #15]
 8001050:	7bfb      	ldrb	r3, [r7, #15]
 8001052:	2b03      	cmp	r3, #3
 8001054:	d9ef      	bls.n	8001036 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001056:	7abb      	ldrb	r3, [r7, #10]
 8001058:	2b01      	cmp	r3, #1
 800105a:	f040 8083 	bne.w	8001164 <SD_disk_initialize+0x190>
 800105e:	7afb      	ldrb	r3, [r7, #11]
 8001060:	2baa      	cmp	r3, #170	; 0xaa
 8001062:	d17f      	bne.n	8001164 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001064:	2100      	movs	r1, #0
 8001066:	2077      	movs	r0, #119	; 0x77
 8001068:	f7ff ff62 	bl	8000f30 <SD_SendCmd>
 800106c:	4603      	mov	r3, r0
 800106e:	2b01      	cmp	r3, #1
 8001070:	d807      	bhi.n	8001082 <SD_disk_initialize+0xae>
 8001072:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001076:	2069      	movs	r0, #105	; 0x69
 8001078:	f7ff ff5a 	bl	8000f30 <SD_SendCmd>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d005      	beq.n	800108e <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001082:	4b47      	ldr	r3, [pc, #284]	; (80011a0 <SD_disk_initialize+0x1cc>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	b2db      	uxtb	r3, r3
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1eb      	bne.n	8001064 <SD_disk_initialize+0x90>
 800108c:	e000      	b.n	8001090 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 800108e:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001090:	4b43      	ldr	r3, [pc, #268]	; (80011a0 <SD_disk_initialize+0x1cc>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b00      	cmp	r3, #0
 8001098:	d064      	beq.n	8001164 <SD_disk_initialize+0x190>
 800109a:	2100      	movs	r1, #0
 800109c:	207a      	movs	r0, #122	; 0x7a
 800109e:	f7ff ff47 	bl	8000f30 <SD_SendCmd>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d15d      	bne.n	8001164 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80010a8:	2300      	movs	r3, #0
 80010aa:	73fb      	strb	r3, [r7, #15]
 80010ac:	e00c      	b.n	80010c8 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80010ae:	7bfc      	ldrb	r4, [r7, #15]
 80010b0:	f7ff fe0a 	bl	8000cc8 <SPI_RxByte>
 80010b4:	4603      	mov	r3, r0
 80010b6:	461a      	mov	r2, r3
 80010b8:	f107 0310 	add.w	r3, r7, #16
 80010bc:	4423      	add	r3, r4
 80010be:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	3301      	adds	r3, #1
 80010c6:	73fb      	strb	r3, [r7, #15]
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
 80010ca:	2b03      	cmp	r3, #3
 80010cc:	d9ef      	bls.n	80010ae <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 80010ce:	7a3b      	ldrb	r3, [r7, #8]
 80010d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <SD_disk_initialize+0x108>
 80010d8:	2306      	movs	r3, #6
 80010da:	e000      	b.n	80010de <SD_disk_initialize+0x10a>
 80010dc:	2302      	movs	r3, #2
 80010de:	73bb      	strb	r3, [r7, #14]
 80010e0:	e040      	b.n	8001164 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80010e2:	2100      	movs	r1, #0
 80010e4:	2077      	movs	r0, #119	; 0x77
 80010e6:	f7ff ff23 	bl	8000f30 <SD_SendCmd>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d808      	bhi.n	8001102 <SD_disk_initialize+0x12e>
 80010f0:	2100      	movs	r1, #0
 80010f2:	2069      	movs	r0, #105	; 0x69
 80010f4:	f7ff ff1c 	bl	8000f30 <SD_SendCmd>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d801      	bhi.n	8001102 <SD_disk_initialize+0x12e>
 80010fe:	2302      	movs	r3, #2
 8001100:	e000      	b.n	8001104 <SD_disk_initialize+0x130>
 8001102:	2301      	movs	r3, #1
 8001104:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8001106:	7bbb      	ldrb	r3, [r7, #14]
 8001108:	2b02      	cmp	r3, #2
 800110a:	d10e      	bne.n	800112a <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 800110c:	2100      	movs	r1, #0
 800110e:	2077      	movs	r0, #119	; 0x77
 8001110:	f7ff ff0e 	bl	8000f30 <SD_SendCmd>
 8001114:	4603      	mov	r3, r0
 8001116:	2b01      	cmp	r3, #1
 8001118:	d80e      	bhi.n	8001138 <SD_disk_initialize+0x164>
 800111a:	2100      	movs	r1, #0
 800111c:	2069      	movs	r0, #105	; 0x69
 800111e:	f7ff ff07 	bl	8000f30 <SD_SendCmd>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d107      	bne.n	8001138 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001128:	e00d      	b.n	8001146 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 800112a:	2100      	movs	r1, #0
 800112c:	2041      	movs	r0, #65	; 0x41
 800112e:	f7ff feff 	bl	8000f30 <SD_SendCmd>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d005      	beq.n	8001144 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001138:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <SD_disk_initialize+0x1cc>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1e1      	bne.n	8001106 <SD_disk_initialize+0x132>
 8001142:	e000      	b.n	8001146 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001144:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8001146:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <SD_disk_initialize+0x1cc>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	d007      	beq.n	8001160 <SD_disk_initialize+0x18c>
 8001150:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001154:	2050      	movs	r0, #80	; 0x50
 8001156:	f7ff feeb 	bl	8000f30 <SD_SendCmd>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8001164:	4a0f      	ldr	r2, [pc, #60]	; (80011a4 <SD_disk_initialize+0x1d0>)
 8001166:	7bbb      	ldrb	r3, [r7, #14]
 8001168:	7013      	strb	r3, [r2, #0]

  DESELECT();
 800116a:	f7ff fd87 	bl	8000c7c <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 800116e:	f7ff fdab 	bl	8000cc8 <SPI_RxByte>

  if (type)
 8001172:	7bbb      	ldrb	r3, [r7, #14]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d008      	beq.n	800118a <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <SD_disk_initialize+0x1c8>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	b2db      	uxtb	r3, r3
 800117e:	f023 0301 	bic.w	r3, r3, #1
 8001182:	b2da      	uxtb	r2, r3
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <SD_disk_initialize+0x1c8>)
 8001186:	701a      	strb	r2, [r3, #0]
 8001188:	e001      	b.n	800118e <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800118a:	f7ff fe31 	bl	8000df0 <SD_PowerOff>
  }

  return Stat;
 800118e:	4b03      	ldr	r3, [pc, #12]	; (800119c <SD_disk_initialize+0x1c8>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	b2db      	uxtb	r3, r3
}
 8001194:	4618      	mov	r0, r3
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	bd90      	pop	{r4, r7, pc}
 800119c:	20000000 	.word	0x20000000
 80011a0:	2000099d 	.word	0x2000099d
 80011a4:	200000bc 	.word	0x200000bc

080011a8 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <SD_disk_status+0x14>
    return STA_NOINIT;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e002      	b.n	80011c2 <SD_disk_status+0x1a>

  return Stat;
 80011bc:	4b03      	ldr	r3, [pc, #12]	; (80011cc <SD_disk_status+0x24>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	b2db      	uxtb	r3, r3
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr
 80011cc:	20000000 	.word	0x20000000

080011d0 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
 80011da:	603b      	str	r3, [r7, #0]
 80011dc:	4603      	mov	r3, r0
 80011de:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d102      	bne.n	80011ec <SD_disk_read+0x1c>
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d101      	bne.n	80011f0 <SD_disk_read+0x20>
    return RES_PARERR;
 80011ec:	2304      	movs	r3, #4
 80011ee:	e051      	b.n	8001294 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 80011f0:	4b2a      	ldr	r3, [pc, #168]	; (800129c <SD_disk_read+0xcc>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <SD_disk_read+0x32>
    return RES_NOTRDY;
 80011fe:	2303      	movs	r3, #3
 8001200:	e048      	b.n	8001294 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8001202:	4b27      	ldr	r3, [pc, #156]	; (80012a0 <SD_disk_read+0xd0>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	f003 0304 	and.w	r3, r3, #4
 800120a:	2b00      	cmp	r3, #0
 800120c:	d102      	bne.n	8001214 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	025b      	lsls	r3, r3, #9
 8001212:	607b      	str	r3, [r7, #4]

  SELECT();
 8001214:	f7ff fd26 	bl	8000c64 <SELECT>

  if (count == 1)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d111      	bne.n	8001242 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	2051      	movs	r0, #81	; 0x51
 8001222:	f7ff fe85 	bl	8000f30 <SD_SendCmd>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d129      	bne.n	8001280 <SD_disk_read+0xb0>
 800122c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001230:	68b8      	ldr	r0, [r7, #8]
 8001232:	f7ff fdf3 	bl	8000e1c <SD_RxDataBlock>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d021      	beq.n	8001280 <SD_disk_read+0xb0>
      count = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	603b      	str	r3, [r7, #0]
 8001240:	e01e      	b.n	8001280 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8001242:	6879      	ldr	r1, [r7, #4]
 8001244:	2052      	movs	r0, #82	; 0x52
 8001246:	f7ff fe73 	bl	8000f30 <SD_SendCmd>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d117      	bne.n	8001280 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001250:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001254:	68b8      	ldr	r0, [r7, #8]
 8001256:	f7ff fde1 	bl	8000e1c <SD_RxDataBlock>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d00a      	beq.n	8001276 <SD_disk_read+0xa6>
          break;

        buff += 512;
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001266:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	3b01      	subs	r3, #1
 800126c:	603b      	str	r3, [r7, #0]
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1ed      	bne.n	8001250 <SD_disk_read+0x80>
 8001274:	e000      	b.n	8001278 <SD_disk_read+0xa8>
          break;
 8001276:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8001278:	2100      	movs	r1, #0
 800127a:	204c      	movs	r0, #76	; 0x4c
 800127c:	f7ff fe58 	bl	8000f30 <SD_SendCmd>
    }
  }

  DESELECT();
 8001280:	f7ff fcfc 	bl	8000c7c <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001284:	f7ff fd20 	bl	8000cc8 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	bf14      	ite	ne
 800128e:	2301      	movne	r3, #1
 8001290:	2300      	moveq	r3, #0
 8001292:	b2db      	uxtb	r3, r3
}
 8001294:	4618      	mov	r0, r3
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000000 	.word	0x20000000
 80012a0:	200000bc 	.word	0x200000bc

080012a4 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60b9      	str	r1, [r7, #8]
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	4603      	mov	r3, r0
 80012b2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d102      	bne.n	80012c0 <SD_disk_write+0x1c>
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d101      	bne.n	80012c4 <SD_disk_write+0x20>
    return RES_PARERR;
 80012c0:	2304      	movs	r3, #4
 80012c2:	e06b      	b.n	800139c <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 80012c4:	4b37      	ldr	r3, [pc, #220]	; (80013a4 <SD_disk_write+0x100>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <SD_disk_write+0x32>
    return RES_NOTRDY;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e062      	b.n	800139c <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 80012d6:	4b33      	ldr	r3, [pc, #204]	; (80013a4 <SD_disk_write+0x100>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <SD_disk_write+0x44>
    return RES_WRPRT;
 80012e4:	2302      	movs	r3, #2
 80012e6:	e059      	b.n	800139c <SD_disk_write+0xf8>

  if (!(CardType & 4))
 80012e8:	4b2f      	ldr	r3, [pc, #188]	; (80013a8 <SD_disk_write+0x104>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d102      	bne.n	80012fa <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	025b      	lsls	r3, r3, #9
 80012f8:	607b      	str	r3, [r7, #4]

  SELECT();
 80012fa:	f7ff fcb3 	bl	8000c64 <SELECT>

  if (count == 1)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d110      	bne.n	8001326 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001304:	6879      	ldr	r1, [r7, #4]
 8001306:	2058      	movs	r0, #88	; 0x58
 8001308:	f7ff fe12 	bl	8000f30 <SD_SendCmd>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d13a      	bne.n	8001388 <SD_disk_write+0xe4>
 8001312:	21fe      	movs	r1, #254	; 0xfe
 8001314:	68b8      	ldr	r0, [r7, #8]
 8001316:	f7ff fdb7 	bl	8000e88 <SD_TxDataBlock>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d033      	beq.n	8001388 <SD_disk_write+0xe4>
      count = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	e030      	b.n	8001388 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8001326:	4b20      	ldr	r3, [pc, #128]	; (80013a8 <SD_disk_write+0x104>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d007      	beq.n	8001342 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001332:	2100      	movs	r1, #0
 8001334:	2077      	movs	r0, #119	; 0x77
 8001336:	f7ff fdfb 	bl	8000f30 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800133a:	6839      	ldr	r1, [r7, #0]
 800133c:	2057      	movs	r0, #87	; 0x57
 800133e:	f7ff fdf7 	bl	8000f30 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	2059      	movs	r0, #89	; 0x59
 8001346:	f7ff fdf3 	bl	8000f30 <SD_SendCmd>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d11b      	bne.n	8001388 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001350:	21fc      	movs	r1, #252	; 0xfc
 8001352:	68b8      	ldr	r0, [r7, #8]
 8001354:	f7ff fd98 	bl	8000e88 <SD_TxDataBlock>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d00a      	beq.n	8001374 <SD_disk_write+0xd0>
          break;

        buff += 512;
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001364:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	3b01      	subs	r3, #1
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1ee      	bne.n	8001350 <SD_disk_write+0xac>
 8001372:	e000      	b.n	8001376 <SD_disk_write+0xd2>
          break;
 8001374:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8001376:	21fd      	movs	r1, #253	; 0xfd
 8001378:	2000      	movs	r0, #0
 800137a:	f7ff fd85 	bl	8000e88 <SD_TxDataBlock>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d101      	bne.n	8001388 <SD_disk_write+0xe4>
      {
        count = 1;
 8001384:	2301      	movs	r3, #1
 8001386:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8001388:	f7ff fc78 	bl	8000c7c <DESELECT>
  SPI_RxByte();
 800138c:	f7ff fc9c 	bl	8000cc8 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	bf14      	ite	ne
 8001396:	2301      	movne	r3, #1
 8001398:	2300      	moveq	r3, #0
 800139a:	b2db      	uxtb	r3, r3
}
 800139c:	4618      	mov	r0, r3
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000000 	.word	0x20000000
 80013a8:	200000bc 	.word	0x200000bc

080013ac <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80013ac:	b590      	push	{r4, r7, lr}
 80013ae:	b08b      	sub	sp, #44	; 0x2c
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	603a      	str	r2, [r7, #0]
 80013b6:	71fb      	strb	r3, [r7, #7]
 80013b8:	460b      	mov	r3, r1
 80013ba:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80013c6:	2304      	movs	r3, #4
 80013c8:	e11b      	b.n	8001602 <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 80013d0:	79bb      	ldrb	r3, [r7, #6]
 80013d2:	2b05      	cmp	r3, #5
 80013d4:	d129      	bne.n	800142a <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 80013d6:	6a3b      	ldr	r3, [r7, #32]
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d017      	beq.n	800140e <SD_disk_ioctl+0x62>
 80013de:	2b02      	cmp	r3, #2
 80013e0:	dc1f      	bgt.n	8001422 <SD_disk_ioctl+0x76>
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d002      	beq.n	80013ec <SD_disk_ioctl+0x40>
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d00b      	beq.n	8001402 <SD_disk_ioctl+0x56>
 80013ea:	e01a      	b.n	8001422 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 80013ec:	f7ff fd0c 	bl	8000e08 <SD_CheckPower>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 80013f6:	f7ff fcfb 	bl	8000df0 <SD_PowerOff>
      res = RES_OK;
 80013fa:	2300      	movs	r3, #0
 80013fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001400:	e0fd      	b.n	80015fe <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8001402:	f7ff fca9 	bl	8000d58 <SD_PowerOn>
      res = RES_OK;
 8001406:	2300      	movs	r3, #0
 8001408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800140c:	e0f7      	b.n	80015fe <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 800140e:	6a3b      	ldr	r3, [r7, #32]
 8001410:	1c5c      	adds	r4, r3, #1
 8001412:	f7ff fcf9 	bl	8000e08 <SD_CheckPower>
 8001416:	4603      	mov	r3, r0
 8001418:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800141a:	2300      	movs	r3, #0
 800141c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001420:	e0ed      	b.n	80015fe <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8001422:	2304      	movs	r3, #4
 8001424:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001428:	e0e9      	b.n	80015fe <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 800142a:	4b78      	ldr	r3, [pc, #480]	; (800160c <SD_disk_ioctl+0x260>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	b2db      	uxtb	r3, r3
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001438:	2303      	movs	r3, #3
 800143a:	e0e2      	b.n	8001602 <SD_disk_ioctl+0x256>

    SELECT();
 800143c:	f7ff fc12 	bl	8000c64 <SELECT>

    switch (ctrl)
 8001440:	79bb      	ldrb	r3, [r7, #6]
 8001442:	2b0d      	cmp	r3, #13
 8001444:	f200 80cc 	bhi.w	80015e0 <SD_disk_ioctl+0x234>
 8001448:	a201      	add	r2, pc, #4	; (adr r2, 8001450 <SD_disk_ioctl+0xa4>)
 800144a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800144e:	bf00      	nop
 8001450:	0800154b 	.word	0x0800154b
 8001454:	08001489 	.word	0x08001489
 8001458:	0800153b 	.word	0x0800153b
 800145c:	080015e1 	.word	0x080015e1
 8001460:	080015e1 	.word	0x080015e1
 8001464:	080015e1 	.word	0x080015e1
 8001468:	080015e1 	.word	0x080015e1
 800146c:	080015e1 	.word	0x080015e1
 8001470:	080015e1 	.word	0x080015e1
 8001474:	080015e1 	.word	0x080015e1
 8001478:	080015e1 	.word	0x080015e1
 800147c:	0800155d 	.word	0x0800155d
 8001480:	08001581 	.word	0x08001581
 8001484:	080015a5 	.word	0x080015a5
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001488:	2100      	movs	r1, #0
 800148a:	2049      	movs	r0, #73	; 0x49
 800148c:	f7ff fd50 	bl	8000f30 <SD_SendCmd>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	f040 80a8 	bne.w	80015e8 <SD_disk_ioctl+0x23c>
 8001498:	f107 030c 	add.w	r3, r7, #12
 800149c:	2110      	movs	r1, #16
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fcbc 	bl	8000e1c <SD_RxDataBlock>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f000 809e 	beq.w	80015e8 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 80014ac:	7b3b      	ldrb	r3, [r7, #12]
 80014ae:	099b      	lsrs	r3, r3, #6
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d10e      	bne.n	80014d4 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80014b6:	7d7b      	ldrb	r3, [r7, #21]
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	7d3b      	ldrb	r3, [r7, #20]
 80014bc:	b29b      	uxth	r3, r3
 80014be:	021b      	lsls	r3, r3, #8
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	4413      	add	r3, r2
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	3301      	adds	r3, #1
 80014c8:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80014ca:	8bfb      	ldrh	r3, [r7, #30]
 80014cc:	029a      	lsls	r2, r3, #10
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	e02e      	b.n	8001532 <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80014d4:	7c7b      	ldrb	r3, [r7, #17]
 80014d6:	f003 030f 	and.w	r3, r3, #15
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	7dbb      	ldrb	r3, [r7, #22]
 80014de:	09db      	lsrs	r3, r3, #7
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	4413      	add	r3, r2
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	7d7b      	ldrb	r3, [r7, #21]
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	f003 0306 	and.w	r3, r3, #6
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	4413      	add	r3, r2
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	3302      	adds	r3, #2
 80014f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80014fc:	7d3b      	ldrb	r3, [r7, #20]
 80014fe:	099b      	lsrs	r3, r3, #6
 8001500:	b2db      	uxtb	r3, r3
 8001502:	b29a      	uxth	r2, r3
 8001504:	7cfb      	ldrb	r3, [r7, #19]
 8001506:	b29b      	uxth	r3, r3
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	b29b      	uxth	r3, r3
 800150c:	4413      	add	r3, r2
 800150e:	b29a      	uxth	r2, r3
 8001510:	7cbb      	ldrb	r3, [r7, #18]
 8001512:	029b      	lsls	r3, r3, #10
 8001514:	b29b      	uxth	r3, r3
 8001516:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800151a:	b29b      	uxth	r3, r3
 800151c:	4413      	add	r3, r2
 800151e:	b29b      	uxth	r3, r3
 8001520:	3301      	adds	r3, #1
 8001522:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001524:	8bfa      	ldrh	r2, [r7, #30]
 8001526:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800152a:	3b09      	subs	r3, #9
 800152c:	409a      	lsls	r2, r3
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8001532:	2300      	movs	r3, #0
 8001534:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001538:	e056      	b.n	80015e8 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001540:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001542:	2300      	movs	r3, #0
 8001544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001548:	e055      	b.n	80015f6 <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 800154a:	f7ff fbe9 	bl	8000d20 <SD_ReadyWait>
 800154e:	4603      	mov	r3, r0
 8001550:	2bff      	cmp	r3, #255	; 0xff
 8001552:	d14b      	bne.n	80015ec <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001554:	2300      	movs	r3, #0
 8001556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800155a:	e047      	b.n	80015ec <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800155c:	2100      	movs	r1, #0
 800155e:	2049      	movs	r0, #73	; 0x49
 8001560:	f7ff fce6 	bl	8000f30 <SD_SendCmd>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d142      	bne.n	80015f0 <SD_disk_ioctl+0x244>
 800156a:	2110      	movs	r1, #16
 800156c:	6a38      	ldr	r0, [r7, #32]
 800156e:	f7ff fc55 	bl	8000e1c <SD_RxDataBlock>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d03b      	beq.n	80015f0 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001578:	2300      	movs	r3, #0
 800157a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800157e:	e037      	b.n	80015f0 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001580:	2100      	movs	r1, #0
 8001582:	204a      	movs	r0, #74	; 0x4a
 8001584:	f7ff fcd4 	bl	8000f30 <SD_SendCmd>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d132      	bne.n	80015f4 <SD_disk_ioctl+0x248>
 800158e:	2110      	movs	r1, #16
 8001590:	6a38      	ldr	r0, [r7, #32]
 8001592:	f7ff fc43 	bl	8000e1c <SD_RxDataBlock>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d02b      	beq.n	80015f4 <SD_disk_ioctl+0x248>
        res = RES_OK;
 800159c:	2300      	movs	r3, #0
 800159e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80015a2:	e027      	b.n	80015f4 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 80015a4:	2100      	movs	r1, #0
 80015a6:	207a      	movs	r0, #122	; 0x7a
 80015a8:	f7ff fcc2 	bl	8000f30 <SD_SendCmd>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d116      	bne.n	80015e0 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 80015b2:	2300      	movs	r3, #0
 80015b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80015b8:	e00b      	b.n	80015d2 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 80015ba:	6a3c      	ldr	r4, [r7, #32]
 80015bc:	1c63      	adds	r3, r4, #1
 80015be:	623b      	str	r3, [r7, #32]
 80015c0:	f7ff fb82 	bl	8000cc8 <SPI_RxByte>
 80015c4:	4603      	mov	r3, r0
 80015c6:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80015c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015cc:	3301      	adds	r3, #1
 80015ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80015d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015d6:	2b03      	cmp	r3, #3
 80015d8:	d9ef      	bls.n	80015ba <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 80015da:	2300      	movs	r3, #0
 80015dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 80015e0:	2304      	movs	r3, #4
 80015e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80015e6:	e006      	b.n	80015f6 <SD_disk_ioctl+0x24a>
      break;
 80015e8:	bf00      	nop
 80015ea:	e004      	b.n	80015f6 <SD_disk_ioctl+0x24a>
      break;
 80015ec:	bf00      	nop
 80015ee:	e002      	b.n	80015f6 <SD_disk_ioctl+0x24a>
      break;
 80015f0:	bf00      	nop
 80015f2:	e000      	b.n	80015f6 <SD_disk_ioctl+0x24a>
      break;
 80015f4:	bf00      	nop
    }

    DESELECT();
 80015f6:	f7ff fb41 	bl	8000c7c <DESELECT>
    SPI_RxByte();
 80015fa:	f7ff fb65 	bl	8000cc8 <SPI_RxByte>
  }

  return res;
 80015fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001602:	4618      	mov	r0, r3
 8001604:	372c      	adds	r7, #44	; 0x2c
 8001606:	46bd      	mov	sp, r7
 8001608:	bd90      	pop	{r4, r7, pc}
 800160a:	bf00      	nop
 800160c:	20000000 	.word	0x20000000

08001610 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800161a:	4a38      	ldr	r2, [pc, #224]	; (80016fc <HD44780_Init+0xec>)
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8001620:	4b37      	ldr	r3, [pc, #220]	; (8001700 <HD44780_Init+0xf0>)
 8001622:	2208      	movs	r2, #8
 8001624:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8001626:	4b37      	ldr	r3, [pc, #220]	; (8001704 <HD44780_Init+0xf4>)
 8001628:	2200      	movs	r2, #0
 800162a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800162c:	4b33      	ldr	r3, [pc, #204]	; (80016fc <HD44780_Init+0xec>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d907      	bls.n	8001644 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8001634:	4b33      	ldr	r3, [pc, #204]	; (8001704 <HD44780_Init+0xf4>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	f043 0308 	orr.w	r3, r3, #8
 800163c:	b2da      	uxtb	r2, r3
 800163e:	4b31      	ldr	r3, [pc, #196]	; (8001704 <HD44780_Init+0xf4>)
 8001640:	701a      	strb	r2, [r3, #0]
 8001642:	e006      	b.n	8001652 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8001644:	4b2f      	ldr	r3, [pc, #188]	; (8001704 <HD44780_Init+0xf4>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	f043 0304 	orr.w	r3, r3, #4
 800164c:	b2da      	uxtb	r2, r3
 800164e:	4b2d      	ldr	r3, [pc, #180]	; (8001704 <HD44780_Init+0xf4>)
 8001650:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8001652:	f000 f985 	bl	8001960 <DelayInit>
  HAL_Delay(50);
 8001656:	2032      	movs	r0, #50	; 0x32
 8001658:	f001 fba2 	bl	8002da0 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 800165c:	4b28      	ldr	r3, [pc, #160]	; (8001700 <HD44780_Init+0xf0>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f000 f943 	bl	80018ec <ExpanderWrite>
  HAL_Delay(1000);
 8001666:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800166a:	f001 fb99 	bl	8002da0 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 800166e:	2030      	movs	r0, #48	; 0x30
 8001670:	f000 f92b 	bl	80018ca <Write4Bits>
  DelayUS(4500);
 8001674:	f241 1094 	movw	r0, #4500	; 0x1194
 8001678:	f000 f99a 	bl	80019b0 <DelayUS>

  Write4Bits(0x03 << 4);
 800167c:	2030      	movs	r0, #48	; 0x30
 800167e:	f000 f924 	bl	80018ca <Write4Bits>
  DelayUS(4500);
 8001682:	f241 1094 	movw	r0, #4500	; 0x1194
 8001686:	f000 f993 	bl	80019b0 <DelayUS>

  Write4Bits(0x03 << 4);
 800168a:	2030      	movs	r0, #48	; 0x30
 800168c:	f000 f91d 	bl	80018ca <Write4Bits>
  DelayUS(4500);
 8001690:	f241 1094 	movw	r0, #4500	; 0x1194
 8001694:	f000 f98c 	bl	80019b0 <DelayUS>

  Write4Bits(0x02 << 4);
 8001698:	2020      	movs	r0, #32
 800169a:	f000 f916 	bl	80018ca <Write4Bits>
  DelayUS(100);
 800169e:	2064      	movs	r0, #100	; 0x64
 80016a0:	f000 f986 	bl	80019b0 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80016a4:	4b17      	ldr	r3, [pc, #92]	; (8001704 <HD44780_Init+0xf4>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	f043 0320 	orr.w	r3, r3, #32
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 f8ce 	bl	8001850 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80016b4:	4b14      	ldr	r3, [pc, #80]	; (8001708 <HD44780_Init+0xf8>)
 80016b6:	2204      	movs	r2, #4
 80016b8:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80016ba:	f000 f875 	bl	80017a8 <HD44780_Display>
  HD44780_Clear();
 80016be:	f000 f82b 	bl	8001718 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80016c2:	4b12      	ldr	r3, [pc, #72]	; (800170c <HD44780_Init+0xfc>)
 80016c4:	2202      	movs	r2, #2
 80016c6:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80016c8:	4b10      	ldr	r3, [pc, #64]	; (800170c <HD44780_Init+0xfc>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	f043 0304 	orr.w	r3, r3, #4
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	4618      	mov	r0, r3
 80016d4:	f000 f8bc 	bl	8001850 <SendCommand>
  DelayUS(4500);
 80016d8:	f241 1094 	movw	r0, #4500	; 0x1194
 80016dc:	f000 f968 	bl	80019b0 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80016e0:	490b      	ldr	r1, [pc, #44]	; (8001710 <HD44780_Init+0x100>)
 80016e2:	2000      	movs	r0, #0
 80016e4:	f000 f876 	bl	80017d4 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80016e8:	490a      	ldr	r1, [pc, #40]	; (8001714 <HD44780_Init+0x104>)
 80016ea:	2001      	movs	r0, #1
 80016ec:	f000 f872 	bl	80017d4 <HD44780_CreateSpecialChar>

  HD44780_Home();
 80016f0:	f000 f81d 	bl	800172e <HD44780_Home>
}
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000252 	.word	0x20000252
 8001700:	20000254 	.word	0x20000254
 8001704:	20000250 	.word	0x20000250
 8001708:	20000253 	.word	0x20000253
 800170c:	20000251 	.word	0x20000251
 8001710:	20000004 	.word	0x20000004
 8001714:	2000000c 	.word	0x2000000c

08001718 <HD44780_Clear>:

void HD44780_Clear()
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 800171c:	2001      	movs	r0, #1
 800171e:	f000 f897 	bl	8001850 <SendCommand>
  DelayUS(2000);
 8001722:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001726:	f000 f943 	bl	80019b0 <DelayUS>
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}

0800172e <HD44780_Home>:

void HD44780_Home()
{
 800172e:	b580      	push	{r7, lr}
 8001730:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8001732:	2002      	movs	r0, #2
 8001734:	f000 f88c 	bl	8001850 <SendCommand>
  DelayUS(2000);
 8001738:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800173c:	f000 f938 	bl	80019b0 <DelayUS>
}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}

08001744 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8001744:	b590      	push	{r4, r7, lr}
 8001746:	b087      	sub	sp, #28
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	460a      	mov	r2, r1
 800174e:	71fb      	strb	r3, [r7, #7]
 8001750:	4613      	mov	r3, r2
 8001752:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001754:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <HD44780_SetCursor+0x5c>)
 8001756:	f107 0408 	add.w	r4, r7, #8
 800175a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800175c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8001760:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <HD44780_SetCursor+0x60>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	79ba      	ldrb	r2, [r7, #6]
 8001766:	429a      	cmp	r2, r3
 8001768:	d303      	bcc.n	8001772 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 800176a:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <HD44780_SetCursor+0x60>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	3b01      	subs	r3, #1
 8001770:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8001772:	79bb      	ldrb	r3, [r7, #6]
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	f107 0218 	add.w	r2, r7, #24
 800177a:	4413      	add	r3, r2
 800177c:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001780:	b2da      	uxtb	r2, r3
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	4413      	add	r3, r2
 8001786:	b2db      	uxtb	r3, r3
 8001788:	b25b      	sxtb	r3, r3
 800178a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800178e:	b25b      	sxtb	r3, r3
 8001790:	b2db      	uxtb	r3, r3
 8001792:	4618      	mov	r0, r3
 8001794:	f000 f85c 	bl	8001850 <SendCommand>
}
 8001798:	bf00      	nop
 800179a:	371c      	adds	r7, #28
 800179c:	46bd      	mov	sp, r7
 800179e:	bd90      	pop	{r4, r7, pc}
 80017a0:	0800d994 	.word	0x0800d994
 80017a4:	20000252 	.word	0x20000252

080017a8 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80017ac:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <HD44780_Display+0x28>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	f043 0304 	orr.w	r3, r3, #4
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HD44780_Display+0x28>)
 80017b8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80017ba:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <HD44780_Display+0x28>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	f043 0308 	orr.w	r3, r3, #8
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	4618      	mov	r0, r3
 80017c6:	f000 f843 	bl	8001850 <SendCommand>
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000253 	.word	0x20000253

080017d4 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	6039      	str	r1, [r7, #0]
 80017de:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	b25b      	sxtb	r3, r3
 80017ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017f2:	b25b      	sxtb	r3, r3
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	4618      	mov	r0, r3
 80017f8:	f000 f82a 	bl	8001850 <SendCommand>
  for (int i=0; i<8; i++)
 80017fc:	2300      	movs	r3, #0
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	e009      	b.n	8001816 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	4413      	add	r3, r2
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f000 f82e 	bl	800186c <SendChar>
  for (int i=0; i<8; i++)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	3301      	adds	r3, #1
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2b07      	cmp	r3, #7
 800181a:	ddf2      	ble.n	8001802 <HD44780_CreateSpecialChar+0x2e>
  }
}
 800181c:	bf00      	nop
 800181e:	bf00      	nop
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800182e:	e006      	b.n	800183e <HD44780_PrintStr+0x18>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	1c5a      	adds	r2, r3, #1
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f000 f817 	bl	800186c <SendChar>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1f4      	bne.n	8001830 <HD44780_PrintStr+0xa>
}
 8001846:	bf00      	nop
 8001848:	bf00      	nop
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	2100      	movs	r1, #0
 800185e:	4618      	mov	r0, r3
 8001860:	f000 f812 	bl	8001888 <Send>
}
 8001864:	bf00      	nop
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <SendChar>:

static void SendChar(uint8_t ch)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	2101      	movs	r1, #1
 800187a:	4618      	mov	r0, r3
 800187c:	f000 f804 	bl	8001888 <Send>
}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	460a      	mov	r2, r1
 8001892:	71fb      	strb	r3, [r7, #7]
 8001894:	4613      	mov	r3, r2
 8001896:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	f023 030f 	bic.w	r3, r3, #15
 800189e:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	011b      	lsls	r3, r3, #4
 80018a4:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80018a6:	7bfa      	ldrb	r2, [r7, #15]
 80018a8:	79bb      	ldrb	r3, [r7, #6]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 f80b 	bl	80018ca <Write4Bits>
  Write4Bits((lownib)|mode);
 80018b4:	7bba      	ldrb	r2, [r7, #14]
 80018b6:	79bb      	ldrb	r3, [r7, #6]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	4618      	mov	r0, r3
 80018be:	f000 f804 	bl	80018ca <Write4Bits>
}
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	4603      	mov	r3, r0
 80018d2:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f000 f808 	bl	80018ec <ExpanderWrite>
  PulseEnable(value);
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	4618      	mov	r0, r3
 80018e0:	f000 f820 	bl	8001924 <PulseEnable>
}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af02      	add	r7, sp, #8
 80018f2:	4603      	mov	r3, r0
 80018f4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80018f6:	4b09      	ldr	r3, [pc, #36]	; (800191c <ExpanderWrite+0x30>)
 80018f8:	781a      	ldrb	r2, [r3, #0]
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8001902:	f107 020f 	add.w	r2, r7, #15
 8001906:	230a      	movs	r3, #10
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	2301      	movs	r3, #1
 800190c:	217e      	movs	r1, #126	; 0x7e
 800190e:	4804      	ldr	r0, [pc, #16]	; (8001920 <ExpanderWrite+0x34>)
 8001910:	f001 fef6 	bl	8003700 <HAL_I2C_Master_Transmit>
}
 8001914:	bf00      	nop
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000254 	.word	0x20000254
 8001920:	200004a8 	.word	0x200004a8

08001924 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	f043 0304 	orr.w	r3, r3, #4
 8001934:	b2db      	uxtb	r3, r3
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff ffd8 	bl	80018ec <ExpanderWrite>
  DelayUS(20);
 800193c:	2014      	movs	r0, #20
 800193e:	f000 f837 	bl	80019b0 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	f023 0304 	bic.w	r3, r3, #4
 8001948:	b2db      	uxtb	r3, r3
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff ffce 	bl	80018ec <ExpanderWrite>
  DelayUS(20);
 8001950:	2014      	movs	r0, #20
 8001952:	f000 f82d 	bl	80019b0 <DelayUS>
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <DelayInit>:

static void DelayInit(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001964:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <DelayInit+0x48>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	4a0f      	ldr	r2, [pc, #60]	; (80019a8 <DelayInit+0x48>)
 800196a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800196e:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8001970:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <DelayInit+0x48>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	4a0c      	ldr	r2, [pc, #48]	; (80019a8 <DelayInit+0x48>)
 8001976:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800197a:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800197c:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <DelayInit+0x4c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a0a      	ldr	r2, [pc, #40]	; (80019ac <DelayInit+0x4c>)
 8001982:	f023 0301 	bic.w	r3, r3, #1
 8001986:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <DelayInit+0x4c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a07      	ldr	r2, [pc, #28]	; (80019ac <DelayInit+0x4c>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001994:	4b05      	ldr	r3, [pc, #20]	; (80019ac <DelayInit+0x4c>)
 8001996:	2200      	movs	r2, #0
 8001998:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800199a:	bf00      	nop
  __ASM volatile ("NOP");
 800199c:	bf00      	nop
  __ASM volatile ("NOP");
 800199e:	bf00      	nop
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr
 80019a8:	e000edf0 	.word	0xe000edf0
 80019ac:	e0001000 	.word	0xe0001000

080019b0 <DelayUS>:

static void DelayUS(uint32_t us) {
 80019b0:	b480      	push	{r7}
 80019b2:	b087      	sub	sp, #28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80019b8:	4b0d      	ldr	r3, [pc, #52]	; (80019f0 <DelayUS+0x40>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a0d      	ldr	r2, [pc, #52]	; (80019f4 <DelayUS+0x44>)
 80019be:	fba2 2303 	umull	r2, r3, r2, r3
 80019c2:	0c9a      	lsrs	r2, r3, #18
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	fb02 f303 	mul.w	r3, r2, r3
 80019ca:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80019cc:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <DelayUS+0x48>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80019d2:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <DelayUS+0x48>)
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d8f6      	bhi.n	80019d2 <DelayUS+0x22>
}
 80019e4:	bf00      	nop
 80019e6:	bf00      	nop
 80019e8:	371c      	adds	r7, #28
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr
 80019f0:	20000014 	.word	0x20000014
 80019f4:	431bde83 	.word	0x431bde83
 80019f8:	e0001000 	.word	0xe0001000

080019fc <HAL_TIM_IC_CaptureCallback>:
FATFS *pfs;
DWORD fre_clust;
uint32_t total, free_space;
////////////////////////////////////////////////////////////////////////////////
//// interrupcion TIMER 2 medicion de freq & duty
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80019fc:	b590      	push	{r4, r7, lr}
 80019fe:	b089      	sub	sp, #36	; 0x24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]

	float freq = 0;
 8001a04:	f04f 0300 	mov.w	r3, #0
 8001a08:	61fb      	str	r3, [r7, #28]
	float duty = 0;
 8001a0a:	f04f 0300 	mov.w	r3, #0
 8001a0e:	61bb      	str	r3, [r7, #24]
	queueMFD_t buffer = { 0 };
 8001a10:	f107 0308 	add.w	r3, r7, #8
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]

	if (htim->Instance == TIM2) {
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a22:	d13e      	bne.n	8001aa2 <HAL_TIM_IC_CaptureCallback+0xa6>

		uint32_t cl = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001a24:	2100      	movs	r1, #0
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f004 fa62 	bl	8005ef0 <HAL_TIM_ReadCapturedValue>
 8001a2c:	6178      	str	r0, [r7, #20]
		uint32_t ch = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001a2e:	2104      	movs	r1, #4
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f004 fa5d 	bl	8005ef0 <HAL_TIM_ReadCapturedValue>
 8001a36:	6138      	str	r0, [r7, #16]

		freq = (float) TIMER_CLOCK_FREQ / (cl + 1);
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7fe ff43 	bl	80008c8 <__aeabi_ui2f>
 8001a42:	4603      	mov	r3, r0
 8001a44:	4619      	mov	r1, r3
 8001a46:	4819      	ldr	r0, [pc, #100]	; (8001aac <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001a48:	f7ff f84a 	bl	8000ae0 <__aeabi_fdiv>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	61fb      	str	r3, [r7, #28]
		duty = (float) 100 * ch / cl;
 8001a50:	6938      	ldr	r0, [r7, #16]
 8001a52:	f7fe ff39 	bl	80008c8 <__aeabi_ui2f>
 8001a56:	4603      	mov	r3, r0
 8001a58:	4915      	ldr	r1, [pc, #84]	; (8001ab0 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7fe ff8c 	bl	8000978 <__aeabi_fmul>
 8001a60:	4603      	mov	r3, r0
 8001a62:	461c      	mov	r4, r3
 8001a64:	6978      	ldr	r0, [r7, #20]
 8001a66:	f7fe ff2f 	bl	80008c8 <__aeabi_ui2f>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4620      	mov	r0, r4
 8001a70:	f7ff f836 	bl	8000ae0 <__aeabi_fdiv>
 8001a74:	4603      	mov	r3, r0
 8001a76:	61bb      	str	r3, [r7, #24]

		buffer.frequency = freq;
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	60bb      	str	r3, [r7, #8]

		buffer.dutyCycle = duty;
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	60fb      	str	r3, [r7, #12]

		xQueueSendToBackFromISR(queueMFD, &buffer, portMAX_DELAY);
 8001a80:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001a82:	6818      	ldr	r0, [r3, #0]
 8001a84:	f107 0108 	add.w	r1, r7, #8
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a8e:	f008 fcd1 	bl	800a434 <xQueueGenericSendFromISR>

		HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1); // Primary channel - rising edge
 8001a92:	2100      	movs	r1, #0
 8001a94:	4808      	ldr	r0, [pc, #32]	; (8001ab8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001a96:	f003 fe0d 	bl	80056b4 <HAL_TIM_IC_Stop_IT>
		HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_2);
 8001a9a:	2104      	movs	r1, #4
 8001a9c:	4806      	ldr	r0, [pc, #24]	; (8001ab8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001a9e:	f003 fc9b 	bl	80053d8 <HAL_TIM_IC_Stop>

	}
}
 8001aa2:	bf00      	nop
 8001aa4:	3724      	adds	r7, #36	; 0x24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd90      	pop	{r4, r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	4c895440 	.word	0x4c895440
 8001ab0:	42c80000 	.word	0x42c80000
 8001ab4:	2000094c 	.word	0x2000094c
 8001ab8:	200006c4 	.word	0x200006c4

08001abc <HAL_UART_RxCpltCallback>:

////////////////////////////////////////////////////////////////////////////////
//// interrupcion de uart
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08a      	sub	sp, #40	; 0x28
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
	int indice;
	char buffer[23];
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8001ac4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ac8:	4820      	ldr	r0, [pc, #128]	; (8001b4c <HAL_UART_RxCpltCallback+0x90>)
 8001aca:	f001 fcbb 	bl	8003444 <HAL_GPIO_TogglePin>
	if (huart->Instance == USART1) {
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a1f      	ldr	r2, [pc, #124]	; (8001b50 <HAL_UART_RxCpltCallback+0x94>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d12f      	bne.n	8001b38 <HAL_UART_RxCpltCallback+0x7c>

		buffer[indice++] = cadena;
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ada:	1c5a      	adds	r2, r3, #1
 8001adc:	627a      	str	r2, [r7, #36]	; 0x24
 8001ade:	4a1d      	ldr	r2, [pc, #116]	; (8001b54 <HAL_UART_RxCpltCallback+0x98>)
 8001ae0:	7812      	ldrb	r2, [r2, #0]
 8001ae2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001ae6:	440b      	add	r3, r1
 8001ae8:	f803 2c1c 	strb.w	r2, [r3, #-28]

		if (cadena == '&')
 8001aec:	4b19      	ldr	r3, [pc, #100]	; (8001b54 <HAL_UART_RxCpltCallback+0x98>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b26      	cmp	r3, #38	; 0x26
 8001af2:	d101      	bne.n	8001af8 <HAL_UART_RxCpltCallback+0x3c>
			indice = 0;
 8001af4:	2300      	movs	r3, #0
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24

		if (indice >= 23)
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afa:	2b16      	cmp	r3, #22
 8001afc:	dd1c      	ble.n	8001b38 <HAL_UART_RxCpltCallback+0x7c>

		{

			indice = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24
			xQueueSendToBackFromISR(queueUART1, &buffer, portMAX_DELAY);
 8001b02:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <HAL_UART_RxCpltCallback+0x9c>)
 8001b04:	6818      	ldr	r0, [r3, #0]
 8001b06:	f107 010c 	add.w	r1, r7, #12
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b10:	f008 fc90 	bl	800a434 <xQueueGenericSendFromISR>

			static BaseType_t xHigherPriorityTaskWoken = pdFALSE;
			xSemaphoreGiveFromISR(sem_UART1, &xHigherPriorityTaskWoken);
 8001b14:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <HAL_UART_RxCpltCallback+0xa0>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4911      	ldr	r1, [pc, #68]	; (8001b60 <HAL_UART_RxCpltCallback+0xa4>)
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f008 fd3c 	bl	800a598 <xQueueGiveFromISR>
			if (xHigherPriorityTaskWoken) {
 8001b20:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <HAL_UART_RxCpltCallback+0xa4>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d007      	beq.n	8001b38 <HAL_UART_RxCpltCallback+0x7c>
				taskYIELD();
 8001b28:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <HAL_UART_RxCpltCallback+0xa8>)
 8001b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	f3bf 8f4f 	dsb	sy
 8001b34:	f3bf 8f6f 	isb	sy
			}
		}
	}
	HAL_UART_Receive_IT(&huart1, (uint8_t*) &cadena, 1);
 8001b38:	2201      	movs	r2, #1
 8001b3a:	4906      	ldr	r1, [pc, #24]	; (8001b54 <HAL_UART_RxCpltCallback+0x98>)
 8001b3c:	480a      	ldr	r0, [pc, #40]	; (8001b68 <HAL_UART_RxCpltCallback+0xac>)
 8001b3e:	f004 ff8c 	bl	8006a5a <HAL_UART_Receive_IT>

}
 8001b42:	bf00      	nop
 8001b44:	3728      	adds	r7, #40	; 0x28
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40010c00 	.word	0x40010c00
 8001b50:	40013800 	.word	0x40013800
 8001b54:	20000950 	.word	0x20000950
 8001b58:	20000714 	.word	0x20000714
 8001b5c:	200004a4 	.word	0x200004a4
 8001b60:	200000c0 	.word	0x200000c0
 8001b64:	e000ed04 	.word	0xe000ed04
 8001b68:	20000520 	.word	0x20000520

08001b6c <LCDTask>:

////////////////////////////////////////////////////////////////////////////////////
/// tarea presentacion

static void LCDTask(void *parameters) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b092      	sub	sp, #72	; 0x48
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]

	queueLCD_t buffer_lcd = { 0 };
 8001b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b78:	2222      	movs	r2, #34	; 0x22
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f00b f9e9 	bl	800cf54 <memset>
	char frequency[5];
	char dutyCycle[2];

	while (1) {

		xQueueReceive(queueLCD, &buffer_lcd, portMAX_DELAY);
 8001b82:	4b48      	ldr	r3, [pc, #288]	; (8001ca4 <LCDTask+0x138>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f008 fda6 	bl	800a6e0 <xQueueReceive>

		if (buffer_lcd.code == 2) {
 8001b94:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d121      	bne.n	8001be0 <LCDTask+0x74>

			HD44780_SetCursor(8, 0);
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	2008      	movs	r0, #8
 8001ba0:	f7ff fdd0 	bl	8001744 <HD44780_SetCursor>
			HD44780_PrintStr((char*) buffer_lcd.lfrequency);
 8001ba4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba8:	3301      	adds	r3, #1
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff fe3b 	bl	8001826 <HD44780_PrintStr>
			HD44780_SetCursor(13, 0);
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	200d      	movs	r0, #13
 8001bb4:	f7ff fdc6 	bl	8001744 <HD44780_SetCursor>
			HD44780_PrintStr(" Hz ");
 8001bb8:	483b      	ldr	r0, [pc, #236]	; (8001ca8 <LCDTask+0x13c>)
 8001bba:	f7ff fe34 	bl	8001826 <HD44780_PrintStr>
			HD44780_SetCursor(8, 1);
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	2008      	movs	r0, #8
 8001bc2:	f7ff fdbf 	bl	8001744 <HD44780_SetCursor>
			HD44780_PrintStr((char*) buffer_lcd.ldutyCycle);
 8001bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bca:	3306      	adds	r3, #6
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff fe2a 	bl	8001826 <HD44780_PrintStr>
			HD44780_SetCursor(13, 1);
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	200d      	movs	r0, #13
 8001bd6:	f7ff fdb5 	bl	8001744 <HD44780_SetCursor>
			HD44780_PrintStr(" % ");
 8001bda:	4834      	ldr	r0, [pc, #208]	; (8001cac <LCDTask+0x140>)
 8001bdc:	f7ff fe23 	bl	8001826 <HD44780_PrintStr>

		}

		if (buffer_lcd.code == 1) {
 8001be0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d157      	bne.n	8001c98 <LCDTask+0x12c>

			strncpy(fecha, (char*) buffer_lcd.fecha + 9, 23);
 8001be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bec:	330b      	adds	r3, #11
 8001bee:	3309      	adds	r3, #9
 8001bf0:	f107 0014 	add.w	r0, r7, #20
 8001bf4:	2217      	movs	r2, #23
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	f00b fac6 	bl	800d188 <strncpy>
			HD44780_Clear();
 8001bfc:	f7ff fd8c 	bl	8001718 <HD44780_Clear>
			HD44780_SetCursor(1, 0);
 8001c00:	2100      	movs	r1, #0
 8001c02:	2001      	movs	r0, #1
 8001c04:	f7ff fd9e 	bl	8001744 <HD44780_SetCursor>
			HD44780_PrintStr(fecha);
 8001c08:	f107 0314 	add.w	r3, r7, #20
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff fe0a 	bl	8001826 <HD44780_PrintStr>
			HD44780_SetCursor(15, 0);
 8001c12:	2100      	movs	r1, #0
 8001c14:	200f      	movs	r0, #15
 8001c16:	f7ff fd95 	bl	8001744 <HD44780_SetCursor>
			HD44780_PrintStr(" ");
 8001c1a:	4825      	ldr	r0, [pc, #148]	; (8001cb0 <LCDTask+0x144>)
 8001c1c:	f7ff fe03 	bl	8001826 <HD44780_PrintStr>
			HAL_Delay(3000);
 8001c20:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001c24:	f001 f8bc 	bl	8002da0 <HAL_Delay>
			HD44780_Clear();
 8001c28:	f7ff fd76 	bl	8001718 <HD44780_Clear>
			strncpy(dutyCycle, (char*) buffer_lcd.fecha + 6, 8);
 8001c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c30:	330b      	adds	r3, #11
 8001c32:	3306      	adds	r3, #6
 8001c34:	f107 0008 	add.w	r0, r7, #8
 8001c38:	2208      	movs	r2, #8
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	f00b faa4 	bl	800d188 <strncpy>
			dutyCycle[2] = '\0';
 8001c40:	2300      	movs	r3, #0
 8001c42:	72bb      	strb	r3, [r7, #10]
			strncpy(frequency, (char*) buffer_lcd.fecha, 5);
 8001c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c48:	f103 010b 	add.w	r1, r3, #11
 8001c4c:	f107 030c 	add.w	r3, r7, #12
 8001c50:	2205      	movs	r2, #5
 8001c52:	4618      	mov	r0, r3
 8001c54:	f00b fa98 	bl	800d188 <strncpy>
			frequency[5] = '\0';
 8001c58:	2300      	movs	r3, #0
 8001c5a:	747b      	strb	r3, [r7, #17]
			HD44780_SetCursor(0, 0);
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	2000      	movs	r0, #0
 8001c60:	f7ff fd70 	bl	8001744 <HD44780_SetCursor>
			HD44780_PrintStr("(");
 8001c64:	4813      	ldr	r0, [pc, #76]	; (8001cb4 <LCDTask+0x148>)
 8001c66:	f7ff fdde 	bl	8001826 <HD44780_PrintStr>
			HD44780_PrintStr(frequency);
 8001c6a:	f107 030c 	add.w	r3, r7, #12
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fdd9 	bl	8001826 <HD44780_PrintStr>
			HD44780_PrintStr(")");
 8001c74:	4810      	ldr	r0, [pc, #64]	; (8001cb8 <LCDTask+0x14c>)
 8001c76:	f7ff fdd6 	bl	8001826 <HD44780_PrintStr>
			HD44780_SetCursor(0, 1);
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	f7ff fd61 	bl	8001744 <HD44780_SetCursor>
			HD44780_PrintStr("( ");
 8001c82:	480e      	ldr	r0, [pc, #56]	; (8001cbc <LCDTask+0x150>)
 8001c84:	f7ff fdcf 	bl	8001826 <HD44780_PrintStr>
			HD44780_PrintStr(dutyCycle);
 8001c88:	f107 0308 	add.w	r3, r7, #8
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff fdca 	bl	8001826 <HD44780_PrintStr>
			HD44780_PrintStr(" %)");
 8001c92:	480b      	ldr	r0, [pc, #44]	; (8001cc0 <LCDTask+0x154>)
 8001c94:	f7ff fdc7 	bl	8001826 <HD44780_PrintStr>
		}

		vTaskDelay(500 / portTICK_PERIOD_MS);
 8001c98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c9c:	f009 fa14 	bl	800b0c8 <vTaskDelay>
		xQueueReceive(queueLCD, &buffer_lcd, portMAX_DELAY);
 8001ca0:	e76f      	b.n	8001b82 <LCDTask+0x16>
 8001ca2:	bf00      	nop
 8001ca4:	20000514 	.word	0x20000514
 8001ca8:	0800d9a4 	.word	0x0800d9a4
 8001cac:	0800d9ac 	.word	0x0800d9ac
 8001cb0:	0800d9b0 	.word	0x0800d9b0
 8001cb4:	0800d9b4 	.word	0x0800d9b4
 8001cb8:	0800d9b8 	.word	0x0800d9b8
 8001cbc:	0800d9bc 	.word	0x0800d9bc
 8001cc0:	0800d9c0 	.word	0x0800d9c0

08001cc4 <MFDTask>:
}

////////////////////////////////////////////////////////////////////////////////////
/// tarea Medicion

static void MFDTask(void *parameters) {
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b094      	sub	sp, #80	; 0x50
 8001cc8:	af02      	add	r7, sp, #8
 8001cca:	6078      	str	r0, [r7, #4]
	float freq = 0;
 8001ccc:	f04f 0300 	mov.w	r3, #0
 8001cd0:	647b      	str	r3, [r7, #68]	; 0x44
	float duty = 0;
 8001cd2:	f04f 0300 	mov.w	r3, #0
 8001cd6:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t iduty = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t dduty = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t ifreq = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	637b      	str	r3, [r7, #52]	; 0x34

	queueMFD_t buffer = { 0 };
 8001ce4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
	queueLCD_t buffer_lcd;

	while (1) {

		xQueueReceive(queueMFD, &buffer, portMAX_DELAY);
 8001cee:	4b24      	ldr	r3, [pc, #144]	; (8001d80 <MFDTask+0xbc>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f008 fcf0 	bl	800a6e0 <xQueueReceive>

		freq = buffer.frequency;
 8001d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d02:	647b      	str	r3, [r7, #68]	; 0x44
		duty = buffer.dutyCycle;
 8001d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d06:	643b      	str	r3, [r7, #64]	; 0x40
		ifreq = (int) freq;
 8001d08:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001d0a:	f7fe ff85 	bl	8000c18 <__aeabi_f2iz>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	637b      	str	r3, [r7, #52]	; 0x34
		iduty = (int) duty;
 8001d12:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001d14:	f7fe ff80 	bl	8000c18 <__aeabi_f2iz>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
		dduty = (int) ((duty - iduty) * 1000);
 8001d1c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001d1e:	f7fe fdd3 	bl	80008c8 <__aeabi_ui2f>
 8001d22:	4603      	mov	r3, r0
 8001d24:	4619      	mov	r1, r3
 8001d26:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001d28:	f7fe fd1c 	bl	8000764 <__aeabi_fsub>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	4915      	ldr	r1, [pc, #84]	; (8001d84 <MFDTask+0xc0>)
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe fe21 	bl	8000978 <__aeabi_fmul>
 8001d36:	4603      	mov	r3, r0
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7fe ff6d 	bl	8000c18 <__aeabi_f2iz>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	63bb      	str	r3, [r7, #56]	; 0x38
		sprintf((char*) buffer_lcd.lfrequency, "%lu    ", ifreq);
 8001d42:	f107 0308 	add.w	r3, r7, #8
 8001d46:	3301      	adds	r3, #1
 8001d48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d4a:	490f      	ldr	r1, [pc, #60]	; (8001d88 <MFDTask+0xc4>)
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f00b f9f3 	bl	800d138 <siprintf>
		snprintf((char*) buffer_lcd.ldutyCycle, 19, "%2d.%2d ", iduty, dduty);
 8001d52:	f107 0308 	add.w	r3, r7, #8
 8001d56:	1d98      	adds	r0, r3, #6
 8001d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d5e:	4a0b      	ldr	r2, [pc, #44]	; (8001d8c <MFDTask+0xc8>)
 8001d60:	2113      	movs	r1, #19
 8001d62:	f00b f9b5 	bl	800d0d0 <sniprintf>
		buffer_lcd.code = 2;
 8001d66:	2302      	movs	r3, #2
 8001d68:	723b      	strb	r3, [r7, #8]

		xQueueSendToBack(queueLCD, &buffer_lcd, portMAX_DELAY);
 8001d6a:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <MFDTask+0xcc>)
 8001d6c:	6818      	ldr	r0, [r3, #0]
 8001d6e:	f107 0108 	add.w	r1, r7, #8
 8001d72:	2300      	movs	r3, #0
 8001d74:	f04f 32ff 	mov.w	r2, #4294967295
 8001d78:	f008 fa5e 	bl	800a238 <xQueueGenericSend>
		xQueueReceive(queueMFD, &buffer, portMAX_DELAY);
 8001d7c:	e7b7      	b.n	8001cee <MFDTask+0x2a>
 8001d7e:	bf00      	nop
 8001d80:	2000094c 	.word	0x2000094c
 8001d84:	447a0000 	.word	0x447a0000
 8001d88:	0800d9c4 	.word	0x0800d9c4
 8001d8c:	0800d9cc 	.word	0x0800d9cc
 8001d90:	20000514 	.word	0x20000514

08001d94 <PWMTask>:
////////////////////////////////////////////////////////////////////////////////////
/// tarea PWM

static void PWMTask(void *pvparameters)

{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08e      	sub	sp, #56	; 0x38
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
	char frequencia[4];
	char dutycycle[2];

	while (1) {

		xQueueReceive(queuePWM, &datocolap, portMAX_DELAY);
 8001d9c:	4b33      	ldr	r3, [pc, #204]	; (8001e6c <PWMTask+0xd8>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f107 0114 	add.w	r1, r7, #20
 8001da4:	f04f 32ff 	mov.w	r2, #4294967295
 8001da8:	4618      	mov	r0, r3
 8001daa:	f008 fc99 	bl	800a6e0 <xQueueReceive>

//		HAL_UART_Transmit(&huart1, datocolap, sizeof(datocolap),100);

		strncpy(dutycycle, datocolap + 6, 8);
 8001dae:	f107 0314 	add.w	r3, r7, #20
 8001db2:	3306      	adds	r3, #6
 8001db4:	f107 000c 	add.w	r0, r7, #12
 8001db8:	2208      	movs	r2, #8
 8001dba:	4619      	mov	r1, r3
 8001dbc:	f00b f9e4 	bl	800d188 <strncpy>
		dutycycle[2] = '\0';
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	73bb      	strb	r3, [r7, #14]
		strncpy(frequencia, datocolap, 4);
 8001dc4:	f107 0114 	add.w	r1, r7, #20
 8001dc8:	f107 0310 	add.w	r3, r7, #16
 8001dcc:	2204      	movs	r2, #4
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f00b f9da 	bl	800d188 <strncpy>
		frequencia[5] = '\0';
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	757b      	strb	r3, [r7, #21]

		uint32_t freq = (uint32_t) strtol(frequencia, NULL, 10);
 8001dd8:	f107 0310 	add.w	r3, r7, #16
 8001ddc:	220a      	movs	r2, #10
 8001dde:	2100      	movs	r1, #0
 8001de0:	4618      	mov	r0, r3
 8001de2:	f00b fa6b 	bl	800d2bc <strtol>
 8001de6:	4603      	mov	r3, r0
 8001de8:	637b      	str	r3, [r7, #52]	; 0x34
		uint32_t duty = (uint32_t) strtol(dutycycle, NULL, 10);
 8001dea:	f107 030c 	add.w	r3, r7, #12
 8001dee:	220a      	movs	r2, #10
 8001df0:	2100      	movs	r1, #0
 8001df2:	4618      	mov	r0, r3
 8001df4:	f00b fa62 	bl	800d2bc <strtol>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	633b      	str	r3, [r7, #48]	; 0x30

		// ajuste de pwm duty & freq

		uint32_t psc = 0, auxfreq = 0, uCclk = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e00:	2300      	movs	r3, #0
 8001e02:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e04:	2300      	movs	r3, #0
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24
		psc = htim1.Init.Prescaler;
 8001e08:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <PWMTask+0xdc>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
		uCclk = 72000000; // 72MHz
 8001e0e:	4b19      	ldr	r3, [pc, #100]	; (8001e74 <PWMTask+0xe0>)
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
		auxfreq = uCclk / ((psc + 1) * freq);
 8001e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e14:	3301      	adds	r3, #1
 8001e16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e18:	fb02 f303 	mul.w	r3, r2, r3
 8001e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e22:	62bb      	str	r3, [r7, #40]	; 0x28
		TIM1->ARR = auxfreq - 1;
 8001e24:	4a14      	ldr	r2, [pc, #80]	; (8001e78 <PWMTask+0xe4>)
 8001e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	62d3      	str	r3, [r2, #44]	; 0x2c

		uint32_t dutyReg = 0, arr = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	623b      	str	r3, [r7, #32]
 8001e30:	2300      	movs	r3, #0
 8001e32:	61fb      	str	r3, [r7, #28]
		arr = TIM1->ARR;
 8001e34:	4b10      	ldr	r3, [pc, #64]	; (8001e78 <PWMTask+0xe4>)
 8001e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e38:	61fb      	str	r3, [r7, #28]
		dutyReg = (arr * duty) / 100;
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e3e:	fb02 f303 	mul.w	r3, r2, r3
 8001e42:	4a0e      	ldr	r2, [pc, #56]	; (8001e7c <PWMTask+0xe8>)
 8001e44:	fba2 2303 	umull	r2, r3, r2, r3
 8001e48:	095b      	lsrs	r3, r3, #5
 8001e4a:	623b      	str	r3, [r7, #32]
		TIM1->CCR1 = dutyReg;
 8001e4c:	4a0a      	ldr	r2, [pc, #40]	; (8001e78 <PWMTask+0xe4>)
 8001e4e:	6a3b      	ldr	r3, [r7, #32]
 8001e50:	6353      	str	r3, [r2, #52]	; 0x34
		///////////////////////////////////////////

		vTaskDelay(1500 / portTICK_PERIOD_MS);
 8001e52:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001e56:	f009 f937 	bl	800b0c8 <vTaskDelay>

		HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // Primary channel - rising edge
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	4808      	ldr	r0, [pc, #32]	; (8001e80 <PWMTask+0xec>)
 8001e5e:	f003 fb1d 	bl	800549c <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2); // Secondary channel - falling edge
 8001e62:	2104      	movs	r1, #4
 8001e64:	4806      	ldr	r0, [pc, #24]	; (8001e80 <PWMTask+0xec>)
 8001e66:	f003 f9f7 	bl	8005258 <HAL_TIM_IC_Start>
	while (1) {
 8001e6a:	e797      	b.n	8001d9c <PWMTask+0x8>
 8001e6c:	20000518 	.word	0x20000518
 8001e70:	200005f4 	.word	0x200005f4
 8001e74:	044aa200 	.word	0x044aa200
 8001e78:	40012c00 	.word	0x40012c00
 8001e7c:	51eb851f 	.word	0x51eb851f
 8001e80:	200006c4 	.word	0x200006c4

08001e84 <DMFDTask>:
}

////////////////////////////////////////////////////////////////////////////////////
/// tarea disparo de medicion

static void DMFDTask(void *parameters) {
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]

	while (1) {
 8001e8c:	e7fe      	b.n	8001e8c <DMFDTask+0x8>
	...

08001e90 <ReadUART1Task>:
}

////////////////////////////////////////////////////////////////////////////////////
///   datos de interrupcion UART

static void ReadUART1Task(void *pvParameters) {
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b09a      	sub	sp, #104	; 0x68
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]

	uint8_t state[23];
	char stateSD[23];
	char datocolap[8];
	queueLCD_t buffer_lcd = { 0 };
 8001e98:	f107 030c 	add.w	r3, r7, #12
 8001e9c:	2222      	movs	r2, #34	; 0x22
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f00b f857 	bl	800cf54 <memset>

	while (1) {
		xSemaphoreTake(sem_UART1, portMAX_DELAY);
 8001ea6:	4b27      	ldr	r3, [pc, #156]	; (8001f44 <ReadUART1Task+0xb4>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f04f 31ff 	mov.w	r1, #4294967295
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f008 fcf6 	bl	800a8a0 <xQueueSemaphoreTake>
		//HAL_UART_Transmit(&huart1, state, sizeof(state),100);
		xQueueReceive(queueUART1, &state, portMAX_DELAY);
 8001eb4:	4b24      	ldr	r3, [pc, #144]	; (8001f48 <ReadUART1Task+0xb8>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f008 fc0d 	bl	800a6e0 <xQueueReceive>

//		HAL_UART_Transmit(&huart1, state, sizeof(state),100);

		strcpy((char*) buffer_lcd.fecha, (char*) state);
 8001ec6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001eca:	f107 030c 	add.w	r3, r7, #12
 8001ece:	330b      	adds	r3, #11
 8001ed0:	4611      	mov	r1, r2
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f00b f950 	bl	800d178 <strcpy>
		buffer_lcd.code = 1;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	733b      	strb	r3, [r7, #12]

		xQueueSendToBack(queueLCD, &buffer_lcd, portMAX_DELAY);
 8001edc:	4b1b      	ldr	r3, [pc, #108]	; (8001f4c <ReadUART1Task+0xbc>)
 8001ede:	6818      	ldr	r0, [r3, #0]
 8001ee0:	f107 010c 	add.w	r1, r7, #12
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8001eea:	f008 f9a5 	bl	800a238 <xQueueGenericSend>

		strncpy(datocolap, (char*) state, 8);
 8001eee:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001ef2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ef6:	2208      	movs	r2, #8
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f00b f945 	bl	800d188 <strncpy>
		datocolap[8] = '\0';
 8001efe:	2300      	movs	r3, #0
 8001f00:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
//		HAL_UART_Transmit(&huart1, state, sizeof(state),100);

		xQueueSendToBack(queuePWM, &datocolap, portMAX_DELAY);
 8001f04:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <ReadUART1Task+0xc0>)
 8001f06:	6818      	ldr	r0, [r3, #0]
 8001f08:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8001f12:	f008 f991 	bl	800a238 <xQueueGenericSend>
		vTaskDelay(1200 / portTICK_PERIOD_MS);
 8001f16:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8001f1a:	f009 f8d5 	bl	800b0c8 <vTaskDelay>

		//HAL_UART_Transmit(&huart1, state, sizeof(state),100);

		strncpy(stateSD, (char*) state, 23);
 8001f1e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001f22:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f26:	2217      	movs	r2, #23
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f00b f92d 	bl	800d188 <strncpy>

		xQueueSendToBack(queueDSD, &state, portMAX_DELAY); //Enviar entero
 8001f2e:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <ReadUART1Task+0xc4>)
 8001f30:	6818      	ldr	r0, [r3, #0]
 8001f32:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001f36:	2300      	movs	r3, #0
 8001f38:	f04f 32ff 	mov.w	r2, #4294967295
 8001f3c:	f008 f97c 	bl	800a238 <xQueueGenericSend>
		xSemaphoreTake(sem_UART1, portMAX_DELAY);
 8001f40:	e7b1      	b.n	8001ea6 <ReadUART1Task+0x16>
 8001f42:	bf00      	nop
 8001f44:	200004a4 	.word	0x200004a4
 8001f48:	20000714 	.word	0x20000714
 8001f4c:	20000514 	.word	0x20000514
 8001f50:	20000518 	.word	0x20000518
 8001f54:	20000640 	.word	0x20000640

08001f58 <SDTask>:
	}
}
/////////////////////////////////////////////////////////////////////////////
///Tarea SD

static void SDTask(void *pvParameters) {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b0a2      	sub	sp, #136	; 0x88
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
	char data[120];

	portBASE_TYPE result = pdFALSE;
 8001f60:	2300      	movs	r3, #0
 8001f62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	while (1) {
		result = xQueueReceive(queueSD, &data, portMAX_DELAY);
 8001f66:	4b35      	ldr	r3, [pc, #212]	; (800203c <SDTask+0xe4>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f107 010c 	add.w	r1, r7, #12
 8001f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8001f72:	4618      	mov	r0, r3
 8001f74:	f008 fbb4 	bl	800a6e0 <xQueueReceive>
 8001f78:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

//		taskENTER_CRITICAL();
		//HAL_UART_Transmit(&huart1, "SD", sizeof(char[2]),100);
		if (result) {
 8001f7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0f0      	beq.n	8001f66 <SDTask+0xe>

			//	strncpy(cadenaSD + indx, data, 23);
			//	cadenaSD[23] = '\n';

			//HAL_UART_Transmit(&huart1, data, sizeof(data),100);
			fresult = f_mount(&fs, "/", 1);
 8001f84:	2201      	movs	r2, #1
 8001f86:	492e      	ldr	r1, [pc, #184]	; (8002040 <SDTask+0xe8>)
 8001f88:	482e      	ldr	r0, [pc, #184]	; (8002044 <SDTask+0xec>)
 8001f8a:	f007 f9a1 	bl	80092d0 <f_mount>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	461a      	mov	r2, r3
 8001f92:	4b2d      	ldr	r3, [pc, #180]	; (8002048 <SDTask+0xf0>)
 8001f94:	701a      	strb	r2, [r3, #0]
			/* Check free space */
			f_getfree("", &fre_clust, &pfs);
 8001f96:	4a2d      	ldr	r2, [pc, #180]	; (800204c <SDTask+0xf4>)
 8001f98:	492d      	ldr	r1, [pc, #180]	; (8002050 <SDTask+0xf8>)
 8001f9a:	482e      	ldr	r0, [pc, #184]	; (8002054 <SDTask+0xfc>)
 8001f9c:	f007 fe7a 	bl	8009c94 <f_getfree>
			total = (uint32_t) ((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001fa0:	4b2a      	ldr	r3, [pc, #168]	; (800204c <SDTask+0xf4>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001fa8:	3b02      	subs	r3, #2
 8001faa:	4a28      	ldr	r2, [pc, #160]	; (800204c <SDTask+0xf4>)
 8001fac:	6812      	ldr	r2, [r2, #0]
 8001fae:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8001fb2:	fb02 f303 	mul.w	r3, r2, r3
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7fe fb36 	bl	8000628 <__aeabi_ui2d>
 8001fbc:	f04f 0200 	mov.w	r2, #0
 8001fc0:	4b25      	ldr	r3, [pc, #148]	; (8002058 <SDTask+0x100>)
 8001fc2:	f7fe f8c5 	bl	8000150 <__aeabi_dmul>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	4610      	mov	r0, r2
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f7fe fba5 	bl	800071c <__aeabi_d2uiz>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	4a21      	ldr	r2, [pc, #132]	; (800205c <SDTask+0x104>)
 8001fd6:	6013      	str	r3, [r2, #0]
			free_space = (uint32_t) (fre_clust * pfs->csize * 0.5);
 8001fd8:	4b1c      	ldr	r3, [pc, #112]	; (800204c <SDTask+0xf4>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4b1b      	ldr	r3, [pc, #108]	; (8002050 <SDTask+0xf8>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	fb03 f302 	mul.w	r3, r3, r2
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7fe fb1c 	bl	8000628 <__aeabi_ui2d>
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	4b18      	ldr	r3, [pc, #96]	; (8002058 <SDTask+0x100>)
 8001ff6:	f7fe f8ab 	bl	8000150 <__aeabi_dmul>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	4610      	mov	r0, r2
 8002000:	4619      	mov	r1, r3
 8002002:	f7fe fb8b 	bl	800071c <__aeabi_d2uiz>
 8002006:	4603      	mov	r3, r0
 8002008:	4a15      	ldr	r2, [pc, #84]	; (8002060 <SDTask+0x108>)
 800200a:	6013      	str	r3, [r2, #0]
			/* Open file to write/ create a file if it doesn't exist */
			fresult = f_open(&fil, "pruebaD.txt",
 800200c:	2213      	movs	r2, #19
 800200e:	4915      	ldr	r1, [pc, #84]	; (8002064 <SDTask+0x10c>)
 8002010:	4815      	ldr	r0, [pc, #84]	; (8002068 <SDTask+0x110>)
 8002012:	f007 f9a5 	bl	8009360 <f_open>
 8002016:	4603      	mov	r3, r0
 8002018:	461a      	mov	r2, r3
 800201a:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <SDTask+0xf0>)
 800201c:	701a      	strb	r2, [r3, #0]
					FA_OPEN_ALWAYS | FA_READ | FA_WRITE);

			//HAL_UART_Transmit(&huart1, cadena, sizeof(data),100);
			/* Writing text */
			///f_puts(cadenaSD,&fil);
			f_puts(data, &fil);
 800201e:	f107 030c 	add.w	r3, r7, #12
 8002022:	4911      	ldr	r1, [pc, #68]	; (8002068 <SDTask+0x110>)
 8002024:	4618      	mov	r0, r3
 8002026:	f007 ff3f 	bl	8009ea8 <f_puts>

			//f_write(&fil, cadenaSD, sizeof(cadenaSD), 200);
			/* Close file */
			fresult = f_close(&fil);
 800202a:	480f      	ldr	r0, [pc, #60]	; (8002068 <SDTask+0x110>)
 800202c:	f007 fe0a 	bl	8009c44 <f_close>
 8002030:	4603      	mov	r3, r0
 8002032:	461a      	mov	r2, r3
 8002034:	4b04      	ldr	r3, [pc, #16]	; (8002048 <SDTask+0xf0>)
 8002036:	701a      	strb	r2, [r3, #0]
		result = xQueueReceive(queueSD, &data, portMAX_DELAY);
 8002038:	e795      	b.n	8001f66 <SDTask+0xe>
 800203a:	bf00      	nop
 800203c:	20000510 	.word	0x20000510
 8002040:	0800d9d8 	.word	0x0800d9d8
 8002044:	20000274 	.word	0x20000274
 8002048:	20000668 	.word	0x20000668
 800204c:	20000664 	.word	0x20000664
 8002050:	20000258 	.word	0x20000258
 8002054:	0800d9dc 	.word	0x0800d9dc
 8002058:	3fe00000 	.word	0x3fe00000
 800205c:	2000070c 	.word	0x2000070c
 8002060:	2000051c 	.word	0x2000051c
 8002064:	0800d9e0 	.word	0x0800d9e0
 8002068:	2000071c 	.word	0x2000071c

0800206c <DSDTask>:
	}
}

///////////////////////////////////////////////////////////////////////////////////
///Data SD
static void DSDTask(void *parameters) {
 800206c:	b580      	push	{r7, lr}
 800206e:	b0c4      	sub	sp, #272	; 0x110
 8002070:	af00      	add	r7, sp, #0
 8002072:	1d3b      	adds	r3, r7, #4
 8002074:	6018      	str	r0, [r3, #0]
	char ty[120];
	char data[24];
	char cadenaSD[120] =
 8002076:	f107 0308 	add.w	r3, r7, #8
 800207a:	4a1a      	ldr	r2, [pc, #104]	; (80020e4 <DSDTask+0x78>)
 800207c:	4618      	mov	r0, r3
 800207e:	4611      	mov	r1, r2
 8002080:	2378      	movs	r3, #120	; 0x78
 8002082:	461a      	mov	r2, r3
 8002084:	f00a ff58 	bl	800cf38 <memcpy>
			"00000 00 00/00/00 00:00\n00000 00 00/00/00 00:00\n00000 00 00/00/00 00:00\n00000 00 00/00/00 00:00\n00000 00 00/00/00 00:00\0";

	while (1) {

		xQueueReceive(queueDSD, &data, portMAX_DELAY);
 8002088:	4b17      	ldr	r3, [pc, #92]	; (80020e8 <DSDTask+0x7c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002090:	f04f 32ff 	mov.w	r2, #4294967295
 8002094:	4618      	mov	r0, r3
 8002096:	f008 fb23 	bl	800a6e0 <xQueueReceive>

		memcpy(ty, cadenaSD, 125);
 800209a:	f107 0108 	add.w	r1, r7, #8
 800209e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80020a2:	227d      	movs	r2, #125	; 0x7d
 80020a4:	4618      	mov	r0, r3
 80020a6:	f00a ff47 	bl	800cf38 <memcpy>
		memcpy(cadenaSD, ty + 24, 95);
 80020aa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80020ae:	3318      	adds	r3, #24
 80020b0:	f107 0008 	add.w	r0, r7, #8
 80020b4:	225f      	movs	r2, #95	; 0x5f
 80020b6:	4619      	mov	r1, r3
 80020b8:	f00a ff3e 	bl	800cf38 <memcpy>
		memcpy(cadenaSD + 96, data, 23);
 80020bc:	f107 0308 	add.w	r3, r7, #8
 80020c0:	3360      	adds	r3, #96	; 0x60
 80020c2:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80020c6:	2217      	movs	r2, #23
 80020c8:	4618      	mov	r0, r3
 80020ca:	f00a ff35 	bl	800cf38 <memcpy>

//	  HAL_UART_Transmit(&huart1, cadenaSD , sizeof( cadenaSD  ),1000);

		xQueueSendToBack(queueSD, &cadenaSD, portMAX_DELAY);
 80020ce:	4b07      	ldr	r3, [pc, #28]	; (80020ec <DSDTask+0x80>)
 80020d0:	6818      	ldr	r0, [r3, #0]
 80020d2:	f107 0108 	add.w	r1, r7, #8
 80020d6:	2300      	movs	r3, #0
 80020d8:	f04f 32ff 	mov.w	r2, #4294967295
 80020dc:	f008 f8ac 	bl	800a238 <xQueueGenericSend>
		xQueueReceive(queueDSD, &data, portMAX_DELAY);
 80020e0:	e7d2      	b.n	8002088 <DSDTask+0x1c>
 80020e2:	bf00      	nop
 80020e4:	0800d9ec 	.word	0x0800d9ec
 80020e8:	20000640 	.word	0x20000640
 80020ec:	20000510 	.word	0x20000510

080020f0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80020f6:	f000 fe21 	bl	8002d3c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80020fa:	f000 f921 	bl	8002340 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80020fe:	f000 fb13 	bl	8002728 <MX_GPIO_Init>
	MX_I2C1_Init();
 8002102:	f000 f963 	bl	80023cc <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8002106:	f000 fae5 	bl	80026d4 <MX_USART1_UART_Init>
	MX_TIM1_Init();
 800210a:	f000 f9c3 	bl	8002494 <MX_TIM1_Init>
	MX_SPI1_Init();
 800210e:	f000 f98b 	bl	8002428 <MX_SPI1_Init>
	MX_FATFS_Init();
 8002112:	f005 f9d9 	bl	80074c8 <MX_FATFS_Init>
	MX_TIM2_Init();
 8002116:	f000 fa5d 	bl	80025d4 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	MX_GPIO_Init();
 800211a:	f000 fb05 	bl	8002728 <MX_GPIO_Init>
	//MX_USART2_UART_Init();
	MX_I2C1_Init();
 800211e:	f000 f955 	bl	80023cc <MX_I2C1_Init>
	HD44780_Init(2);
 8002122:	2002      	movs	r0, #2
 8002124:	f7ff fa74 	bl	8001610 <HD44780_Init>
	HD44780_Clear();
 8002128:	f7ff faf6 	bl	8001718 <HD44780_Clear>
	HD44780_SetCursor(0, 0);
 800212c:	2100      	movs	r1, #0
 800212e:	2000      	movs	r0, #0
 8002130:	f7ff fb08 	bl	8001744 <HD44780_SetCursor>
	HD44780_PrintStr("      TD_3      ");
 8002134:	4863      	ldr	r0, [pc, #396]	; (80022c4 <main+0x1d4>)
 8002136:	f7ff fb76 	bl	8001826 <HD44780_PrintStr>
	HD44780_SetCursor(0, 1);
 800213a:	2101      	movs	r1, #1
 800213c:	2000      	movs	r0, #0
 800213e:	f7ff fb01 	bl	8001744 <HD44780_SetCursor>
	HD44780_PrintStr("    PARCIAL1    ");
 8002142:	4861      	ldr	r0, [pc, #388]	; (80022c8 <main+0x1d8>)
 8002144:	f7ff fb6f 	bl	8001826 <HD44780_PrintStr>
	TIM1->ARR = 0x708;    //
 8002148:	4b60      	ldr	r3, [pc, #384]	; (80022cc <main+0x1dc>)
 800214a:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800214e:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->CCR1 = 0xB4;    //
 8002150:	4b5e      	ldr	r3, [pc, #376]	; (80022cc <main+0x1dc>)
 8002152:	22b4      	movs	r2, #180	; 0xb4
 8002154:	635a      	str	r2, [r3, #52]	; 0x34

	// Creo el semaforo de la tarea handler por interrupcion
	vSemaphoreCreateBinary(sem_UART1);
 8002156:	2203      	movs	r2, #3
 8002158:	2100      	movs	r1, #0
 800215a:	2001      	movs	r0, #1
 800215c:	f007 ffc8 	bl	800a0f0 <xQueueGenericCreate>
 8002160:	4603      	mov	r3, r0
 8002162:	4a5b      	ldr	r2, [pc, #364]	; (80022d0 <main+0x1e0>)
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	4b5a      	ldr	r3, [pc, #360]	; (80022d0 <main+0x1e0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d006      	beq.n	800217c <main+0x8c>
 800216e:	4b58      	ldr	r3, [pc, #352]	; (80022d0 <main+0x1e0>)
 8002170:	6818      	ldr	r0, [r3, #0]
 8002172:	2300      	movs	r3, #0
 8002174:	2200      	movs	r2, #0
 8002176:	2100      	movs	r1, #0
 8002178:	f008 f85e 	bl	800a238 <xQueueGenericSend>
	//vSemaphoreCreateBinary(sem_Dmfd);

	Mutex = xSemaphoreCreateMutex();
 800217c:	2001      	movs	r0, #1
 800217e:	f008 f842 	bl	800a206 <xQueueCreateMutex>
 8002182:	4603      	mov	r3, r0
 8002184:	4a53      	ldr	r2, [pc, #332]	; (80022d4 <main+0x1e4>)
 8002186:	6013      	str	r3, [r2, #0]

	xSemaphoreTake(sem_UART1, 0);
 8002188:	4b51      	ldr	r3, [pc, #324]	; (80022d0 <main+0x1e0>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2100      	movs	r1, #0
 800218e:	4618      	mov	r0, r3
 8002190:	f008 fb86 	bl	800a8a0 <xQueueSemaphoreTake>

	// Creo la cola del adc, size 1 item
	//queueUART2 = xQueueCreate(1,sizeof(dataUART));
	queueUART1 = xQueueCreate(1, sizeof(dataUART));
 8002194:	2200      	movs	r2, #0
 8002196:	2117      	movs	r1, #23
 8002198:	2001      	movs	r0, #1
 800219a:	f007 ffa9 	bl	800a0f0 <xQueueGenericCreate>
 800219e:	4603      	mov	r3, r0
 80021a0:	4a4d      	ldr	r2, [pc, #308]	; (80022d8 <main+0x1e8>)
 80021a2:	6013      	str	r3, [r2, #0]
	queuePWM = xQueueCreate(1, sizeof(dataPWM));
 80021a4:	2200      	movs	r2, #0
 80021a6:	2108      	movs	r1, #8
 80021a8:	2001      	movs	r0, #1
 80021aa:	f007 ffa1 	bl	800a0f0 <xQueueGenericCreate>
 80021ae:	4603      	mov	r3, r0
 80021b0:	4a4a      	ldr	r2, [pc, #296]	; (80022dc <main+0x1ec>)
 80021b2:	6013      	str	r3, [r2, #0]
	queueMFD = xQueueCreate(1, sizeof(queueMFD_t));
 80021b4:	2200      	movs	r2, #0
 80021b6:	2108      	movs	r1, #8
 80021b8:	2001      	movs	r0, #1
 80021ba:	f007 ff99 	bl	800a0f0 <xQueueGenericCreate>
 80021be:	4603      	mov	r3, r0
 80021c0:	4a47      	ldr	r2, [pc, #284]	; (80022e0 <main+0x1f0>)
 80021c2:	6013      	str	r3, [r2, #0]
	queueLCD = xQueueCreate(1, sizeof(queueLCD_t));
 80021c4:	2200      	movs	r2, #0
 80021c6:	2122      	movs	r1, #34	; 0x22
 80021c8:	2001      	movs	r0, #1
 80021ca:	f007 ff91 	bl	800a0f0 <xQueueGenericCreate>
 80021ce:	4603      	mov	r3, r0
 80021d0:	4a44      	ldr	r2, [pc, #272]	; (80022e4 <main+0x1f4>)
 80021d2:	6013      	str	r3, [r2, #0]
	queueDmfd = xQueueCreate(1, sizeof(queueS_1));
 80021d4:	2200      	movs	r2, #0
 80021d6:	2101      	movs	r1, #1
 80021d8:	2001      	movs	r0, #1
 80021da:	f007 ff89 	bl	800a0f0 <xQueueGenericCreate>
 80021de:	4603      	mov	r3, r0
 80021e0:	4a41      	ldr	r2, [pc, #260]	; (80022e8 <main+0x1f8>)
 80021e2:	6013      	str	r3, [r2, #0]
	queueSD = xQueueCreate(1, sizeof(cadenaSD_F));
 80021e4:	2200      	movs	r2, #0
 80021e6:	217d      	movs	r1, #125	; 0x7d
 80021e8:	2001      	movs	r0, #1
 80021ea:	f007 ff81 	bl	800a0f0 <xQueueGenericCreate>
 80021ee:	4603      	mov	r3, r0
 80021f0:	4a3e      	ldr	r2, [pc, #248]	; (80022ec <main+0x1fc>)
 80021f2:	6013      	str	r3, [r2, #0]
	queueDSD = xQueueCreate(1, sizeof(dataUART));
 80021f4:	2200      	movs	r2, #0
 80021f6:	2117      	movs	r1, #23
 80021f8:	2001      	movs	r0, #1
 80021fa:	f007 ff79 	bl	800a0f0 <xQueueGenericCreate>
 80021fe:	4603      	mov	r3, r0
 8002200:	4a3b      	ldr	r2, [pc, #236]	; (80022f0 <main+0x200>)
 8002202:	6013      	str	r3, [r2, #0]

	// Creo las tareas
	xTaskCreate(ReadUART1Task, "", configMINIMAL_STACK_SIZE + 300, NULL, 1,
 8002204:	4b3b      	ldr	r3, [pc, #236]	; (80022f4 <main+0x204>)
 8002206:	9301      	str	r3, [sp, #4]
 8002208:	2301      	movs	r3, #1
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	2300      	movs	r3, #0
 800220e:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8002212:	4939      	ldr	r1, [pc, #228]	; (80022f8 <main+0x208>)
 8002214:	4839      	ldr	r0, [pc, #228]	; (80022fc <main+0x20c>)
 8002216:	f008 fdeb 	bl	800adf0 <xTaskCreate>
			&h_UART1);
	xTaskCreate(PWMTask, "", configMINIMAL_STACK_SIZE, NULL, 1, &h_pwm);
 800221a:	4b39      	ldr	r3, [pc, #228]	; (8002300 <main+0x210>)
 800221c:	9301      	str	r3, [sp, #4]
 800221e:	2301      	movs	r3, #1
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	2300      	movs	r3, #0
 8002224:	2280      	movs	r2, #128	; 0x80
 8002226:	4934      	ldr	r1, [pc, #208]	; (80022f8 <main+0x208>)
 8002228:	4836      	ldr	r0, [pc, #216]	; (8002304 <main+0x214>)
 800222a:	f008 fde1 	bl	800adf0 <xTaskCreate>
	xTaskCreate(MFDTask, "", configMINIMAL_STACK_SIZE, NULL, 1, &h_mfd);
 800222e:	4b36      	ldr	r3, [pc, #216]	; (8002308 <main+0x218>)
 8002230:	9301      	str	r3, [sp, #4]
 8002232:	2301      	movs	r3, #1
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	2300      	movs	r3, #0
 8002238:	2280      	movs	r2, #128	; 0x80
 800223a:	492f      	ldr	r1, [pc, #188]	; (80022f8 <main+0x208>)
 800223c:	4833      	ldr	r0, [pc, #204]	; (800230c <main+0x21c>)
 800223e:	f008 fdd7 	bl	800adf0 <xTaskCreate>
	xTaskCreate(LCDTask, "", configMINIMAL_STACK_SIZE, NULL, 1, &h_lcd);
 8002242:	4b33      	ldr	r3, [pc, #204]	; (8002310 <main+0x220>)
 8002244:	9301      	str	r3, [sp, #4]
 8002246:	2301      	movs	r3, #1
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	2300      	movs	r3, #0
 800224c:	2280      	movs	r2, #128	; 0x80
 800224e:	492a      	ldr	r1, [pc, #168]	; (80022f8 <main+0x208>)
 8002250:	4830      	ldr	r0, [pc, #192]	; (8002314 <main+0x224>)
 8002252:	f008 fdcd 	bl	800adf0 <xTaskCreate>
	xTaskCreate(DMFDTask, "", configMINIMAL_STACK_SIZE, NULL, 1, &h_Dmfd);
 8002256:	4b30      	ldr	r3, [pc, #192]	; (8002318 <main+0x228>)
 8002258:	9301      	str	r3, [sp, #4]
 800225a:	2301      	movs	r3, #1
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	2300      	movs	r3, #0
 8002260:	2280      	movs	r2, #128	; 0x80
 8002262:	4925      	ldr	r1, [pc, #148]	; (80022f8 <main+0x208>)
 8002264:	482d      	ldr	r0, [pc, #180]	; (800231c <main+0x22c>)
 8002266:	f008 fdc3 	bl	800adf0 <xTaskCreate>
	xTaskCreate(SDTask, "", configMINIMAL_STACK_SIZE + 1500, NULL, 2, &h_SD);
 800226a:	4b2d      	ldr	r3, [pc, #180]	; (8002320 <main+0x230>)
 800226c:	9301      	str	r3, [sp, #4]
 800226e:	2302      	movs	r3, #2
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	2300      	movs	r3, #0
 8002274:	f240 625c 	movw	r2, #1628	; 0x65c
 8002278:	491f      	ldr	r1, [pc, #124]	; (80022f8 <main+0x208>)
 800227a:	482a      	ldr	r0, [pc, #168]	; (8002324 <main+0x234>)
 800227c:	f008 fdb8 	bl	800adf0 <xTaskCreate>
	xTaskCreate(DSDTask, "", configMINIMAL_STACK_SIZE, NULL + 1500, 1, &h_dsd);
 8002280:	4b29      	ldr	r3, [pc, #164]	; (8002328 <main+0x238>)
 8002282:	9301      	str	r3, [sp, #4]
 8002284:	2301      	movs	r3, #1
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800228c:	2280      	movs	r2, #128	; 0x80
 800228e:	491a      	ldr	r1, [pc, #104]	; (80022f8 <main+0x208>)
 8002290:	4826      	ldr	r0, [pc, #152]	; (800232c <main+0x23c>)
 8002292:	f008 fdad 	bl	800adf0 <xTaskCreate>

	//xTaskCreate(presento1Task, "",configMINIMAL_STACK_SIZE,NULL, 1,(TaskHandle_t *) NULL);

	HAL_GPIO_WritePin(led_yy_GPIO_Port, led_yy_Pin, 1);
 8002296:	2201      	movs	r2, #1
 8002298:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800229c:	4824      	ldr	r0, [pc, #144]	; (8002330 <main+0x240>)
 800229e:	f001 f8b9 	bl	8003414 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 80022a2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80022a6:	f000 fd7b 	bl	8002da0 <HAL_Delay>

	HAL_UART_Receive_IT(&huart1, (uint8_t*) &cadena, 1);
 80022aa:	2201      	movs	r2, #1
 80022ac:	4921      	ldr	r1, [pc, #132]	; (8002334 <main+0x244>)
 80022ae:	4822      	ldr	r0, [pc, #136]	; (8002338 <main+0x248>)
 80022b0:	f004 fbd3 	bl	8006a5a <HAL_UART_Receive_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80022b4:	2100      	movs	r1, #0
 80022b6:	4821      	ldr	r0, [pc, #132]	; (800233c <main+0x24c>)
 80022b8:	f002 fedc 	bl	8005074 <HAL_TIM_PWM_Start>

	vTaskStartScheduler();
 80022bc:	f008 ff38 	bl	800b130 <vTaskStartScheduler>
	while (1) {
 80022c0:	e7fe      	b.n	80022c0 <main+0x1d0>
 80022c2:	bf00      	nop
 80022c4:	0800da64 	.word	0x0800da64
 80022c8:	0800da78 	.word	0x0800da78
 80022cc:	40012c00 	.word	0x40012c00
 80022d0:	200004a4 	.word	0x200004a4
 80022d4:	200004fc 	.word	0x200004fc
 80022d8:	20000714 	.word	0x20000714
 80022dc:	20000518 	.word	0x20000518
 80022e0:	2000094c 	.word	0x2000094c
 80022e4:	20000514 	.word	0x20000514
 80022e8:	20000710 	.word	0x20000710
 80022ec:	20000510 	.word	0x20000510
 80022f0:	20000640 	.word	0x20000640
 80022f4:	20000718 	.word	0x20000718
 80022f8:	0800d9dc 	.word	0x0800d9dc
 80022fc:	08001e91 	.word	0x08001e91
 8002300:	200005e8 	.word	0x200005e8
 8002304:	08001d95 	.word	0x08001d95
 8002308:	200005f0 	.word	0x200005f0
 800230c:	08001cc5 	.word	0x08001cc5
 8002310:	200005ec 	.word	0x200005ec
 8002314:	08001b6d 	.word	0x08001b6d
 8002318:	20000504 	.word	0x20000504
 800231c:	08001e85 	.word	0x08001e85
 8002320:	20000948 	.word	0x20000948
 8002324:	08001f59 	.word	0x08001f59
 8002328:	2000050c 	.word	0x2000050c
 800232c:	0800206d 	.word	0x0800206d
 8002330:	40010c00 	.word	0x40010c00
 8002334:	20000950 	.word	0x20000950
 8002338:	20000520 	.word	0x20000520
 800233c:	200005f4 	.word	0x200005f4

08002340 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002340:	b580      	push	{r7, lr}
 8002342:	b090      	sub	sp, #64	; 0x40
 8002344:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002346:	f107 0318 	add.w	r3, r7, #24
 800234a:	2228      	movs	r2, #40	; 0x28
 800234c:	2100      	movs	r1, #0
 800234e:	4618      	mov	r0, r3
 8002350:	f00a fe00 	bl	800cf54 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002354:	1d3b      	adds	r3, r7, #4
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	605a      	str	r2, [r3, #4]
 800235c:	609a      	str	r2, [r3, #8]
 800235e:	60da      	str	r2, [r3, #12]
 8002360:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002362:	2301      	movs	r3, #1
 8002364:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002366:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800236a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800236c:	2300      	movs	r3, #0
 800236e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002370:	2301      	movs	r3, #1
 8002372:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002374:	2302      	movs	r3, #2
 8002376:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002378:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800237c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800237e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002382:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002384:	f107 0318 	add.w	r3, r7, #24
 8002388:	4618      	mov	r0, r3
 800238a:	f001 fd11 	bl	8003db0 <HAL_RCC_OscConfig>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <SystemClock_Config+0x58>
		Error_Handler();
 8002394:	f000 fa3a 	bl	800280c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002398:	230f      	movs	r3, #15
 800239a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800239c:	2302      	movs	r3, #2
 800239e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023a0:	2300      	movs	r3, #0
 80023a2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023a8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023aa:	2300      	movs	r3, #0
 80023ac:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80023ae:	1d3b      	adds	r3, r7, #4
 80023b0:	2102      	movs	r1, #2
 80023b2:	4618      	mov	r0, r3
 80023b4:	f001 ff7c 	bl	80042b0 <HAL_RCC_ClockConfig>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <SystemClock_Config+0x82>
		Error_Handler();
 80023be:	f000 fa25 	bl	800280c <Error_Handler>
	}
}
 80023c2:	bf00      	nop
 80023c4:	3740      	adds	r7, #64	; 0x40
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
	...

080023cc <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80023d0:	4b12      	ldr	r3, [pc, #72]	; (800241c <MX_I2C1_Init+0x50>)
 80023d2:	4a13      	ldr	r2, [pc, #76]	; (8002420 <MX_I2C1_Init+0x54>)
 80023d4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80023d6:	4b11      	ldr	r3, [pc, #68]	; (800241c <MX_I2C1_Init+0x50>)
 80023d8:	4a12      	ldr	r2, [pc, #72]	; (8002424 <MX_I2C1_Init+0x58>)
 80023da:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023dc:	4b0f      	ldr	r3, [pc, #60]	; (800241c <MX_I2C1_Init+0x50>)
 80023de:	2200      	movs	r2, #0
 80023e0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80023e2:	4b0e      	ldr	r3, [pc, #56]	; (800241c <MX_I2C1_Init+0x50>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023e8:	4b0c      	ldr	r3, [pc, #48]	; (800241c <MX_I2C1_Init+0x50>)
 80023ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023ee:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023f0:	4b0a      	ldr	r3, [pc, #40]	; (800241c <MX_I2C1_Init+0x50>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80023f6:	4b09      	ldr	r3, [pc, #36]	; (800241c <MX_I2C1_Init+0x50>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023fc:	4b07      	ldr	r3, [pc, #28]	; (800241c <MX_I2C1_Init+0x50>)
 80023fe:	2200      	movs	r2, #0
 8002400:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002402:	4b06      	ldr	r3, [pc, #24]	; (800241c <MX_I2C1_Init+0x50>)
 8002404:	2200      	movs	r2, #0
 8002406:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002408:	4804      	ldr	r0, [pc, #16]	; (800241c <MX_I2C1_Init+0x50>)
 800240a:	f001 f835 	bl	8003478 <HAL_I2C_Init>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8002414:	f000 f9fa 	bl	800280c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002418:	bf00      	nop
 800241a:	bd80      	pop	{r7, pc}
 800241c:	200004a8 	.word	0x200004a8
 8002420:	40005400 	.word	0x40005400
 8002424:	000186a0 	.word	0x000186a0

08002428 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800242c:	4b17      	ldr	r3, [pc, #92]	; (800248c <MX_SPI1_Init+0x64>)
 800242e:	4a18      	ldr	r2, [pc, #96]	; (8002490 <MX_SPI1_Init+0x68>)
 8002430:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8002432:	4b16      	ldr	r3, [pc, #88]	; (800248c <MX_SPI1_Init+0x64>)
 8002434:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002438:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800243a:	4b14      	ldr	r3, [pc, #80]	; (800248c <MX_SPI1_Init+0x64>)
 800243c:	2200      	movs	r2, #0
 800243e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002440:	4b12      	ldr	r3, [pc, #72]	; (800248c <MX_SPI1_Init+0x64>)
 8002442:	2200      	movs	r2, #0
 8002444:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002446:	4b11      	ldr	r3, [pc, #68]	; (800248c <MX_SPI1_Init+0x64>)
 8002448:	2200      	movs	r2, #0
 800244a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800244c:	4b0f      	ldr	r3, [pc, #60]	; (800248c <MX_SPI1_Init+0x64>)
 800244e:	2200      	movs	r2, #0
 8002450:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8002452:	4b0e      	ldr	r3, [pc, #56]	; (800248c <MX_SPI1_Init+0x64>)
 8002454:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002458:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800245a:	4b0c      	ldr	r3, [pc, #48]	; (800248c <MX_SPI1_Init+0x64>)
 800245c:	2220      	movs	r2, #32
 800245e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002460:	4b0a      	ldr	r3, [pc, #40]	; (800248c <MX_SPI1_Init+0x64>)
 8002462:	2200      	movs	r2, #0
 8002464:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002466:	4b09      	ldr	r3, [pc, #36]	; (800248c <MX_SPI1_Init+0x64>)
 8002468:	2200      	movs	r2, #0
 800246a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800246c:	4b07      	ldr	r3, [pc, #28]	; (800248c <MX_SPI1_Init+0x64>)
 800246e:	2200      	movs	r2, #0
 8002470:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8002472:	4b06      	ldr	r3, [pc, #24]	; (800248c <MX_SPI1_Init+0x64>)
 8002474:	220a      	movs	r2, #10
 8002476:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8002478:	4804      	ldr	r0, [pc, #16]	; (800248c <MX_SPI1_Init+0x64>)
 800247a:	f002 f8d7 	bl	800462c <HAL_SPI_Init>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <MX_SPI1_Init+0x60>
		Error_Handler();
 8002484:	f000 f9c2 	bl	800280c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8002488:	bf00      	nop
 800248a:	bd80      	pop	{r7, pc}
 800248c:	2000066c 	.word	0x2000066c
 8002490:	40013000 	.word	0x40013000

08002494 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8002494:	b580      	push	{r7, lr}
 8002496:	b096      	sub	sp, #88	; 0x58
 8002498:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800249a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	605a      	str	r2, [r3, #4]
 80024a4:	609a      	str	r2, [r3, #8]
 80024a6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80024a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80024b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	605a      	str	r2, [r3, #4]
 80024bc:	609a      	str	r2, [r3, #8]
 80024be:	60da      	str	r2, [r3, #12]
 80024c0:	611a      	str	r2, [r3, #16]
 80024c2:	615a      	str	r2, [r3, #20]
 80024c4:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80024c6:	1d3b      	adds	r3, r7, #4
 80024c8:	2220      	movs	r2, #32
 80024ca:	2100      	movs	r1, #0
 80024cc:	4618      	mov	r0, r3
 80024ce:	f00a fd41 	bl	800cf54 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80024d2:	4b3e      	ldr	r3, [pc, #248]	; (80025cc <MX_TIM1_Init+0x138>)
 80024d4:	4a3e      	ldr	r2, [pc, #248]	; (80025d0 <MX_TIM1_Init+0x13c>)
 80024d6:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80024d8:	4b3c      	ldr	r3, [pc, #240]	; (80025cc <MX_TIM1_Init+0x138>)
 80024da:	2200      	movs	r2, #0
 80024dc:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024de:	4b3b      	ldr	r3, [pc, #236]	; (80025cc <MX_TIM1_Init+0x138>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 80024e4:	4b39      	ldr	r3, [pc, #228]	; (80025cc <MX_TIM1_Init+0x138>)
 80024e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024ea:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ec:	4b37      	ldr	r3, [pc, #220]	; (80025cc <MX_TIM1_Init+0x138>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80024f2:	4b36      	ldr	r3, [pc, #216]	; (80025cc <MX_TIM1_Init+0x138>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024f8:	4b34      	ldr	r3, [pc, #208]	; (80025cc <MX_TIM1_Init+0x138>)
 80024fa:	2280      	movs	r2, #128	; 0x80
 80024fc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80024fe:	4833      	ldr	r0, [pc, #204]	; (80025cc <MX_TIM1_Init+0x138>)
 8002500:	f002 fcbe 	bl	8004e80 <HAL_TIM_Base_Init>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <MX_TIM1_Init+0x7a>
		Error_Handler();
 800250a:	f000 f97f 	bl	800280c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800250e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002512:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8002514:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002518:	4619      	mov	r1, r3
 800251a:	482c      	ldr	r0, [pc, #176]	; (80025cc <MX_TIM1_Init+0x138>)
 800251c:	f003 fbde 	bl	8005cdc <HAL_TIM_ConfigClockSource>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <MX_TIM1_Init+0x96>
		Error_Handler();
 8002526:	f000 f971 	bl	800280c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800252a:	4828      	ldr	r0, [pc, #160]	; (80025cc <MX_TIM1_Init+0x138>)
 800252c:	f002 fd4a 	bl	8004fc4 <HAL_TIM_PWM_Init>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <MX_TIM1_Init+0xa6>
		Error_Handler();
 8002536:	f000 f969 	bl	800280c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800253a:	2300      	movs	r3, #0
 800253c:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800253e:	2300      	movs	r3, #0
 8002540:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8002542:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002546:	4619      	mov	r1, r3
 8002548:	4820      	ldr	r0, [pc, #128]	; (80025cc <MX_TIM1_Init+0x138>)
 800254a:	f004 f975 	bl	8006838 <HAL_TIMEx_MasterConfigSynchronization>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 8002554:	f000 f95a 	bl	800280c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002558:	2360      	movs	r3, #96	; 0x60
 800255a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 800255c:	2300      	movs	r3, #0
 800255e:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002560:	2300      	movs	r3, #0
 8002562:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002564:	2300      	movs	r3, #0
 8002566:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002568:	2300      	movs	r3, #0
 800256a:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800256c:	2300      	movs	r3, #0
 800256e:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002570:	2300      	movs	r3, #0
 8002572:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8002574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002578:	2200      	movs	r2, #0
 800257a:	4619      	mov	r1, r3
 800257c:	4813      	ldr	r0, [pc, #76]	; (80025cc <MX_TIM1_Init+0x138>)
 800257e:	f003 faeb 	bl	8005b58 <HAL_TIM_PWM_ConfigChannel>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <MX_TIM1_Init+0xf8>
			!= HAL_OK) {
		Error_Handler();
 8002588:	f000 f940 	bl	800280c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800258c:	2300      	movs	r3, #0
 800258e:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002590:	2300      	movs	r3, #0
 8002592:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002594:	2300      	movs	r3, #0
 8002596:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8002598:	2300      	movs	r3, #0
 800259a:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800259c:	2300      	movs	r3, #0
 800259e:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025a4:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025a6:	2300      	movs	r3, #0
 80025a8:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80025aa:	1d3b      	adds	r3, r7, #4
 80025ac:	4619      	mov	r1, r3
 80025ae:	4807      	ldr	r0, [pc, #28]	; (80025cc <MX_TIM1_Init+0x138>)
 80025b0:	f004 f9a0 	bl	80068f4 <HAL_TIMEx_ConfigBreakDeadTime>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <MX_TIM1_Init+0x12a>
			!= HAL_OK) {
		Error_Handler();
 80025ba:	f000 f927 	bl	800280c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80025be:	4803      	ldr	r0, [pc, #12]	; (80025cc <MX_TIM1_Init+0x138>)
 80025c0:	f000 fa46 	bl	8002a50 <HAL_TIM_MspPostInit>

}
 80025c4:	bf00      	nop
 80025c6:	3758      	adds	r7, #88	; 0x58
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	200005f4 	.word	0x200005f4
 80025d0:	40012c00 	.word	0x40012c00

080025d4 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08c      	sub	sp, #48	; 0x30
 80025d8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 80025da:	f107 031c 	add.w	r3, r7, #28
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	605a      	str	r2, [r3, #4]
 80025e4:	609a      	str	r2, [r3, #8]
 80025e6:	60da      	str	r2, [r3, #12]
 80025e8:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80025ea:	f107 030c 	add.w	r3, r7, #12
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	605a      	str	r2, [r3, #4]
 80025f4:	609a      	str	r2, [r3, #8]
 80025f6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80025f8:	1d3b      	adds	r3, r7, #4
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002600:	4b33      	ldr	r3, [pc, #204]	; (80026d0 <MX_TIM2_Init+0xfc>)
 8002602:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002606:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8002608:	4b31      	ldr	r3, [pc, #196]	; (80026d0 <MX_TIM2_Init+0xfc>)
 800260a:	2200      	movs	r2, #0
 800260c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800260e:	4b30      	ldr	r3, [pc, #192]	; (80026d0 <MX_TIM2_Init+0xfc>)
 8002610:	2200      	movs	r2, #0
 8002612:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8002614:	4b2e      	ldr	r3, [pc, #184]	; (80026d0 <MX_TIM2_Init+0xfc>)
 8002616:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800261a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800261c:	4b2c      	ldr	r3, [pc, #176]	; (80026d0 <MX_TIM2_Init+0xfc>)
 800261e:	2200      	movs	r2, #0
 8002620:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002622:	4b2b      	ldr	r3, [pc, #172]	; (80026d0 <MX_TIM2_Init+0xfc>)
 8002624:	2200      	movs	r2, #0
 8002626:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8002628:	4829      	ldr	r0, [pc, #164]	; (80026d0 <MX_TIM2_Init+0xfc>)
 800262a:	f002 fdc5 	bl	80051b8 <HAL_TIM_IC_Init>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <MX_TIM2_Init+0x64>
		Error_Handler();
 8002634:	f000 f8ea 	bl	800280c <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002638:	2304      	movs	r3, #4
 800263a:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800263c:	2350      	movs	r3, #80	; 0x50
 800263e:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002640:	2300      	movs	r3, #0
 8002642:	627b      	str	r3, [r7, #36]	; 0x24
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8002644:	2300      	movs	r3, #0
 8002646:	62bb      	str	r3, [r7, #40]	; 0x28
	sSlaveConfig.TriggerFilter = 0;
 8002648:	2300      	movs	r3, #0
 800264a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 800264c:	f107 031c 	add.w	r3, r7, #28
 8002650:	4619      	mov	r1, r3
 8002652:	481f      	ldr	r0, [pc, #124]	; (80026d0 <MX_TIM2_Init+0xfc>)
 8002654:	f003 fc09 	bl	8005e6a <HAL_TIM_SlaveConfigSynchro>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <MX_TIM2_Init+0x8e>
		Error_Handler();
 800265e:	f000 f8d5 	bl	800280c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002666:	2301      	movs	r3, #1
 8002668:	613b      	str	r3, [r7, #16]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
	sConfigIC.ICFilter = 0;
 800266e:	2300      	movs	r3, #0
 8002670:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8002672:	f107 030c 	add.w	r3, r7, #12
 8002676:	2200      	movs	r2, #0
 8002678:	4619      	mov	r1, r3
 800267a:	4815      	ldr	r0, [pc, #84]	; (80026d0 <MX_TIM2_Init+0xfc>)
 800267c:	f003 f9d0 	bl	8005a20 <HAL_TIM_IC_ConfigChannel>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <MX_TIM2_Init+0xb6>
		Error_Handler();
 8002686:	f000 f8c1 	bl	800280c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800268a:	2302      	movs	r3, #2
 800268c:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800268e:	2302      	movs	r3, #2
 8002690:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8002692:	f107 030c 	add.w	r3, r7, #12
 8002696:	2204      	movs	r2, #4
 8002698:	4619      	mov	r1, r3
 800269a:	480d      	ldr	r0, [pc, #52]	; (80026d0 <MX_TIM2_Init+0xfc>)
 800269c:	f003 f9c0 	bl	8005a20 <HAL_TIM_IC_ConfigChannel>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <MX_TIM2_Init+0xd6>
		Error_Handler();
 80026a6:	f000 f8b1 	bl	800280c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026aa:	2300      	movs	r3, #0
 80026ac:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ae:	2300      	movs	r3, #0
 80026b0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80026b2:	1d3b      	adds	r3, r7, #4
 80026b4:	4619      	mov	r1, r3
 80026b6:	4806      	ldr	r0, [pc, #24]	; (80026d0 <MX_TIM2_Init+0xfc>)
 80026b8:	f004 f8be 	bl	8006838 <HAL_TIMEx_MasterConfigSynchronization>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <MX_TIM2_Init+0xf2>
			!= HAL_OK) {
		Error_Handler();
 80026c2:	f000 f8a3 	bl	800280c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80026c6:	bf00      	nop
 80026c8:	3730      	adds	r7, #48	; 0x30
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	200006c4 	.word	0x200006c4

080026d4 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80026d8:	4b11      	ldr	r3, [pc, #68]	; (8002720 <MX_USART1_UART_Init+0x4c>)
 80026da:	4a12      	ldr	r2, [pc, #72]	; (8002724 <MX_USART1_UART_Init+0x50>)
 80026dc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 80026de:	4b10      	ldr	r3, [pc, #64]	; (8002720 <MX_USART1_UART_Init+0x4c>)
 80026e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80026e4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026e6:	4b0e      	ldr	r3, [pc, #56]	; (8002720 <MX_USART1_UART_Init+0x4c>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80026ec:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <MX_USART1_UART_Init+0x4c>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80026f2:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <MX_USART1_UART_Init+0x4c>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80026f8:	4b09      	ldr	r3, [pc, #36]	; (8002720 <MX_USART1_UART_Init+0x4c>)
 80026fa:	220c      	movs	r2, #12
 80026fc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026fe:	4b08      	ldr	r3, [pc, #32]	; (8002720 <MX_USART1_UART_Init+0x4c>)
 8002700:	2200      	movs	r2, #0
 8002702:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002704:	4b06      	ldr	r3, [pc, #24]	; (8002720 <MX_USART1_UART_Init+0x4c>)
 8002706:	2200      	movs	r2, #0
 8002708:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800270a:	4805      	ldr	r0, [pc, #20]	; (8002720 <MX_USART1_UART_Init+0x4c>)
 800270c:	f004 f955 	bl	80069ba <HAL_UART_Init>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8002716:	f000 f879 	bl	800280c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20000520 	.word	0x20000520
 8002724:	40013800 	.word	0x40013800

08002728 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002728:	b580      	push	{r7, lr}
 800272a:	b088      	sub	sp, #32
 800272c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800272e:	f107 0310 	add.w	r3, r7, #16
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	605a      	str	r2, [r3, #4]
 8002738:	609a      	str	r2, [r3, #8]
 800273a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800273c:	4b27      	ldr	r3, [pc, #156]	; (80027dc <MX_GPIO_Init+0xb4>)
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	4a26      	ldr	r2, [pc, #152]	; (80027dc <MX_GPIO_Init+0xb4>)
 8002742:	f043 0320 	orr.w	r3, r3, #32
 8002746:	6193      	str	r3, [r2, #24]
 8002748:	4b24      	ldr	r3, [pc, #144]	; (80027dc <MX_GPIO_Init+0xb4>)
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	f003 0320 	and.w	r3, r3, #32
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002754:	4b21      	ldr	r3, [pc, #132]	; (80027dc <MX_GPIO_Init+0xb4>)
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	4a20      	ldr	r2, [pc, #128]	; (80027dc <MX_GPIO_Init+0xb4>)
 800275a:	f043 0304 	orr.w	r3, r3, #4
 800275e:	6193      	str	r3, [r2, #24]
 8002760:	4b1e      	ldr	r3, [pc, #120]	; (80027dc <MX_GPIO_Init+0xb4>)
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	60bb      	str	r3, [r7, #8]
 800276a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800276c:	4b1b      	ldr	r3, [pc, #108]	; (80027dc <MX_GPIO_Init+0xb4>)
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	4a1a      	ldr	r2, [pc, #104]	; (80027dc <MX_GPIO_Init+0xb4>)
 8002772:	f043 0308 	orr.w	r3, r3, #8
 8002776:	6193      	str	r3, [r2, #24]
 8002778:	4b18      	ldr	r3, [pc, #96]	; (80027dc <MX_GPIO_Init+0xb4>)
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	f003 0308 	and.w	r3, r3, #8
 8002780:	607b      	str	r3, [r7, #4]
 8002782:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002784:	2200      	movs	r2, #0
 8002786:	2110      	movs	r1, #16
 8002788:	4815      	ldr	r0, [pc, #84]	; (80027e0 <MX_GPIO_Init+0xb8>)
 800278a:	f000 fe43 	bl	8003414 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, led_gg_Pin | led_yy_Pin, GPIO_PIN_RESET);
 800278e:	2200      	movs	r2, #0
 8002790:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002794:	4813      	ldr	r0, [pc, #76]	; (80027e4 <MX_GPIO_Init+0xbc>)
 8002796:	f000 fe3d 	bl	8003414 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 800279a:	2310      	movs	r3, #16
 800279c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800279e:	2301      	movs	r3, #1
 80027a0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a6:	2302      	movs	r3, #2
 80027a8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027aa:	f107 0310 	add.w	r3, r7, #16
 80027ae:	4619      	mov	r1, r3
 80027b0:	480b      	ldr	r0, [pc, #44]	; (80027e0 <MX_GPIO_Init+0xb8>)
 80027b2:	f000 fcab 	bl	800310c <HAL_GPIO_Init>

	/*Configure GPIO pins : led_gg_Pin led_yy_Pin */
	GPIO_InitStruct.Pin = led_gg_Pin | led_yy_Pin;
 80027b6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80027ba:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027bc:	2301      	movs	r3, #1
 80027be:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c4:	2302      	movs	r3, #2
 80027c6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c8:	f107 0310 	add.w	r3, r7, #16
 80027cc:	4619      	mov	r1, r3
 80027ce:	4805      	ldr	r0, [pc, #20]	; (80027e4 <MX_GPIO_Init+0xbc>)
 80027d0:	f000 fc9c 	bl	800310c <HAL_GPIO_Init>

}
 80027d4:	bf00      	nop
 80027d6:	3720      	adds	r7, #32
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40021000 	.word	0x40021000
 80027e0:	40010800 	.word	0x40010800
 80027e4:	40010c00 	.word	0x40010c00

080027e8 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM3) {
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a04      	ldr	r2, [pc, #16]	; (8002808 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d101      	bne.n	80027fe <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80027fa:	f000 fab5 	bl	8002d68 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80027fe:	bf00      	nop
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40000400 	.word	0x40000400

0800280c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002810:	b672      	cpsid	i
}
 8002812:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002814:	e7fe      	b.n	8002814 <Error_Handler+0x8>
	...

08002818 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800281e:	4b15      	ldr	r3, [pc, #84]	; (8002874 <HAL_MspInit+0x5c>)
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	4a14      	ldr	r2, [pc, #80]	; (8002874 <HAL_MspInit+0x5c>)
 8002824:	f043 0301 	orr.w	r3, r3, #1
 8002828:	6193      	str	r3, [r2, #24]
 800282a:	4b12      	ldr	r3, [pc, #72]	; (8002874 <HAL_MspInit+0x5c>)
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	60bb      	str	r3, [r7, #8]
 8002834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002836:	4b0f      	ldr	r3, [pc, #60]	; (8002874 <HAL_MspInit+0x5c>)
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	4a0e      	ldr	r2, [pc, #56]	; (8002874 <HAL_MspInit+0x5c>)
 800283c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002840:	61d3      	str	r3, [r2, #28]
 8002842:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <HAL_MspInit+0x5c>)
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284a:	607b      	str	r3, [r7, #4]
 800284c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800284e:	4b0a      	ldr	r3, [pc, #40]	; (8002878 <HAL_MspInit+0x60>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	4a04      	ldr	r2, [pc, #16]	; (8002878 <HAL_MspInit+0x60>)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800286a:	bf00      	nop
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr
 8002874:	40021000 	.word	0x40021000
 8002878:	40010000 	.word	0x40010000

0800287c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b088      	sub	sp, #32
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002884:	f107 0310 	add.w	r3, r7, #16
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	605a      	str	r2, [r3, #4]
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a15      	ldr	r2, [pc, #84]	; (80028ec <HAL_I2C_MspInit+0x70>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d123      	bne.n	80028e4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800289c:	4b14      	ldr	r3, [pc, #80]	; (80028f0 <HAL_I2C_MspInit+0x74>)
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	4a13      	ldr	r2, [pc, #76]	; (80028f0 <HAL_I2C_MspInit+0x74>)
 80028a2:	f043 0308 	orr.w	r3, r3, #8
 80028a6:	6193      	str	r3, [r2, #24]
 80028a8:	4b11      	ldr	r3, [pc, #68]	; (80028f0 <HAL_I2C_MspInit+0x74>)
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	f003 0308 	and.w	r3, r3, #8
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028b4:	23c0      	movs	r3, #192	; 0xc0
 80028b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028b8:	2312      	movs	r3, #18
 80028ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028bc:	2303      	movs	r3, #3
 80028be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c0:	f107 0310 	add.w	r3, r7, #16
 80028c4:	4619      	mov	r1, r3
 80028c6:	480b      	ldr	r0, [pc, #44]	; (80028f4 <HAL_I2C_MspInit+0x78>)
 80028c8:	f000 fc20 	bl	800310c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028cc:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <HAL_I2C_MspInit+0x74>)
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	4a07      	ldr	r2, [pc, #28]	; (80028f0 <HAL_I2C_MspInit+0x74>)
 80028d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028d6:	61d3      	str	r3, [r2, #28]
 80028d8:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <HAL_I2C_MspInit+0x74>)
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028e0:	60bb      	str	r3, [r7, #8]
 80028e2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80028e4:	bf00      	nop
 80028e6:	3720      	adds	r7, #32
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40005400 	.word	0x40005400
 80028f0:	40021000 	.word	0x40021000
 80028f4:	40010c00 	.word	0x40010c00

080028f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002900:	f107 0310 	add.w	r3, r7, #16
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a1b      	ldr	r2, [pc, #108]	; (8002980 <HAL_SPI_MspInit+0x88>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d12f      	bne.n	8002978 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002918:	4b1a      	ldr	r3, [pc, #104]	; (8002984 <HAL_SPI_MspInit+0x8c>)
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	4a19      	ldr	r2, [pc, #100]	; (8002984 <HAL_SPI_MspInit+0x8c>)
 800291e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002922:	6193      	str	r3, [r2, #24]
 8002924:	4b17      	ldr	r3, [pc, #92]	; (8002984 <HAL_SPI_MspInit+0x8c>)
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002930:	4b14      	ldr	r3, [pc, #80]	; (8002984 <HAL_SPI_MspInit+0x8c>)
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	4a13      	ldr	r2, [pc, #76]	; (8002984 <HAL_SPI_MspInit+0x8c>)
 8002936:	f043 0304 	orr.w	r3, r3, #4
 800293a:	6193      	str	r3, [r2, #24]
 800293c:	4b11      	ldr	r3, [pc, #68]	; (8002984 <HAL_SPI_MspInit+0x8c>)
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	60bb      	str	r3, [r7, #8]
 8002946:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002948:	23a0      	movs	r3, #160	; 0xa0
 800294a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294c:	2302      	movs	r3, #2
 800294e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002950:	2303      	movs	r3, #3
 8002952:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002954:	f107 0310 	add.w	r3, r7, #16
 8002958:	4619      	mov	r1, r3
 800295a:	480b      	ldr	r0, [pc, #44]	; (8002988 <HAL_SPI_MspInit+0x90>)
 800295c:	f000 fbd6 	bl	800310c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002960:	2340      	movs	r3, #64	; 0x40
 8002962:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002968:	2300      	movs	r3, #0
 800296a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800296c:	f107 0310 	add.w	r3, r7, #16
 8002970:	4619      	mov	r1, r3
 8002972:	4805      	ldr	r0, [pc, #20]	; (8002988 <HAL_SPI_MspInit+0x90>)
 8002974:	f000 fbca 	bl	800310c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002978:	bf00      	nop
 800297a:	3720      	adds	r7, #32
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40013000 	.word	0x40013000
 8002984:	40021000 	.word	0x40021000
 8002988:	40010800 	.word	0x40010800

0800298c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a09      	ldr	r2, [pc, #36]	; (80029c0 <HAL_TIM_Base_MspInit+0x34>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d10b      	bne.n	80029b6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800299e:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <HAL_TIM_Base_MspInit+0x38>)
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	4a08      	ldr	r2, [pc, #32]	; (80029c4 <HAL_TIM_Base_MspInit+0x38>)
 80029a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029a8:	6193      	str	r3, [r2, #24]
 80029aa:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <HAL_TIM_Base_MspInit+0x38>)
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80029b6:	bf00      	nop
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr
 80029c0:	40012c00 	.word	0x40012c00
 80029c4:	40021000 	.word	0x40021000

080029c8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d0:	f107 0310 	add.w	r3, r7, #16
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	605a      	str	r2, [r3, #4]
 80029da:	609a      	str	r2, [r3, #8]
 80029dc:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM2)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e6:	d12b      	bne.n	8002a40 <HAL_TIM_IC_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029e8:	4b17      	ldr	r3, [pc, #92]	; (8002a48 <HAL_TIM_IC_MspInit+0x80>)
 80029ea:	69db      	ldr	r3, [r3, #28]
 80029ec:	4a16      	ldr	r2, [pc, #88]	; (8002a48 <HAL_TIM_IC_MspInit+0x80>)
 80029ee:	f043 0301 	orr.w	r3, r3, #1
 80029f2:	61d3      	str	r3, [r2, #28]
 80029f4:	4b14      	ldr	r3, [pc, #80]	; (8002a48 <HAL_TIM_IC_MspInit+0x80>)
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a00:	4b11      	ldr	r3, [pc, #68]	; (8002a48 <HAL_TIM_IC_MspInit+0x80>)
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	4a10      	ldr	r2, [pc, #64]	; (8002a48 <HAL_TIM_IC_MspInit+0x80>)
 8002a06:	f043 0304 	orr.w	r3, r3, #4
 8002a0a:	6193      	str	r3, [r2, #24]
 8002a0c:	4b0e      	ldr	r3, [pc, #56]	; (8002a48 <HAL_TIM_IC_MspInit+0x80>)
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	60bb      	str	r3, [r7, #8]
 8002a16:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a24:	f107 0310 	add.w	r3, r7, #16
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4808      	ldr	r0, [pc, #32]	; (8002a4c <HAL_TIM_IC_MspInit+0x84>)
 8002a2c:	f000 fb6e 	bl	800310c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002a30:	2200      	movs	r2, #0
 8002a32:	2105      	movs	r1, #5
 8002a34:	201c      	movs	r0, #28
 8002a36:	f000 fa8c 	bl	8002f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a3a:	201c      	movs	r0, #28
 8002a3c:	f000 faa5 	bl	8002f8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002a40:	bf00      	nop
 8002a42:	3720      	adds	r7, #32
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	40010800 	.word	0x40010800

08002a50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b088      	sub	sp, #32
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a58:	f107 0310 	add.w	r3, r7, #16
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	605a      	str	r2, [r3, #4]
 8002a62:	609a      	str	r2, [r3, #8]
 8002a64:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a10      	ldr	r2, [pc, #64]	; (8002aac <HAL_TIM_MspPostInit+0x5c>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d118      	bne.n	8002aa2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a70:	4b0f      	ldr	r3, [pc, #60]	; (8002ab0 <HAL_TIM_MspPostInit+0x60>)
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	4a0e      	ldr	r2, [pc, #56]	; (8002ab0 <HAL_TIM_MspPostInit+0x60>)
 8002a76:	f043 0304 	orr.w	r3, r3, #4
 8002a7a:	6193      	str	r3, [r2, #24]
 8002a7c:	4b0c      	ldr	r3, [pc, #48]	; (8002ab0 <HAL_TIM_MspPostInit+0x60>)
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8e:	2302      	movs	r3, #2
 8002a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a92:	2302      	movs	r3, #2
 8002a94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a96:	f107 0310 	add.w	r3, r7, #16
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4805      	ldr	r0, [pc, #20]	; (8002ab4 <HAL_TIM_MspPostInit+0x64>)
 8002a9e:	f000 fb35 	bl	800310c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002aa2:	bf00      	nop
 8002aa4:	3720      	adds	r7, #32
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40012c00 	.word	0x40012c00
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	40010800 	.word	0x40010800

08002ab8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b088      	sub	sp, #32
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac0:	f107 0310 	add.w	r3, r7, #16
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a20      	ldr	r2, [pc, #128]	; (8002b54 <HAL_UART_MspInit+0x9c>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d139      	bne.n	8002b4c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ad8:	4b1f      	ldr	r3, [pc, #124]	; (8002b58 <HAL_UART_MspInit+0xa0>)
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	4a1e      	ldr	r2, [pc, #120]	; (8002b58 <HAL_UART_MspInit+0xa0>)
 8002ade:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ae2:	6193      	str	r3, [r2, #24]
 8002ae4:	4b1c      	ldr	r3, [pc, #112]	; (8002b58 <HAL_UART_MspInit+0xa0>)
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af0:	4b19      	ldr	r3, [pc, #100]	; (8002b58 <HAL_UART_MspInit+0xa0>)
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	4a18      	ldr	r2, [pc, #96]	; (8002b58 <HAL_UART_MspInit+0xa0>)
 8002af6:	f043 0304 	orr.w	r3, r3, #4
 8002afa:	6193      	str	r3, [r2, #24]
 8002afc:	4b16      	ldr	r3, [pc, #88]	; (8002b58 <HAL_UART_MspInit+0xa0>)
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	60bb      	str	r3, [r7, #8]
 8002b06:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0e:	2302      	movs	r3, #2
 8002b10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b12:	2303      	movs	r3, #3
 8002b14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b16:	f107 0310 	add.w	r3, r7, #16
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	480f      	ldr	r0, [pc, #60]	; (8002b5c <HAL_UART_MspInit+0xa4>)
 8002b1e:	f000 faf5 	bl	800310c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b30:	f107 0310 	add.w	r3, r7, #16
 8002b34:	4619      	mov	r1, r3
 8002b36:	4809      	ldr	r0, [pc, #36]	; (8002b5c <HAL_UART_MspInit+0xa4>)
 8002b38:	f000 fae8 	bl	800310c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	2105      	movs	r1, #5
 8002b40:	2025      	movs	r0, #37	; 0x25
 8002b42:	f000 fa06 	bl	8002f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b46:	2025      	movs	r0, #37	; 0x25
 8002b48:	f000 fa1f 	bl	8002f8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002b4c:	bf00      	nop
 8002b4e:	3720      	adds	r7, #32
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40013800 	.word	0x40013800
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	40010800 	.word	0x40010800

08002b60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b08c      	sub	sp, #48	; 0x30
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8002b70:	2200      	movs	r2, #0
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	201d      	movs	r0, #29
 8002b76:	f000 f9ec 	bl	8002f52 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002b7a:	201d      	movs	r0, #29
 8002b7c:	f000 fa05 	bl	8002f8a <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8002b80:	4b1f      	ldr	r3, [pc, #124]	; (8002c00 <HAL_InitTick+0xa0>)
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	4a1e      	ldr	r2, [pc, #120]	; (8002c00 <HAL_InitTick+0xa0>)
 8002b86:	f043 0302 	orr.w	r3, r3, #2
 8002b8a:	61d3      	str	r3, [r2, #28]
 8002b8c:	4b1c      	ldr	r3, [pc, #112]	; (8002c00 <HAL_InitTick+0xa0>)
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	60fb      	str	r3, [r7, #12]
 8002b96:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b98:	f107 0210 	add.w	r2, r7, #16
 8002b9c:	f107 0314 	add.w	r3, r7, #20
 8002ba0:	4611      	mov	r1, r2
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f001 fcf4 	bl	8004590 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002ba8:	f001 fcca 	bl	8004540 <HAL_RCC_GetPCLK1Freq>
 8002bac:	4603      	mov	r3, r0
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb4:	4a13      	ldr	r2, [pc, #76]	; (8002c04 <HAL_InitTick+0xa4>)
 8002bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bba:	0c9b      	lsrs	r3, r3, #18
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8002bc0:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <HAL_InitTick+0xa8>)
 8002bc2:	4a12      	ldr	r2, [pc, #72]	; (8002c0c <HAL_InitTick+0xac>)
 8002bc4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8002bc6:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <HAL_InitTick+0xa8>)
 8002bc8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002bcc:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8002bce:	4a0e      	ldr	r2, [pc, #56]	; (8002c08 <HAL_InitTick+0xa8>)
 8002bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd2:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <HAL_InitTick+0xa8>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bda:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <HAL_InitTick+0xa8>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8002be0:	4809      	ldr	r0, [pc, #36]	; (8002c08 <HAL_InitTick+0xa8>)
 8002be2:	f002 f94d 	bl	8004e80 <HAL_TIM_Base_Init>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d104      	bne.n	8002bf6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8002bec:	4806      	ldr	r0, [pc, #24]	; (8002c08 <HAL_InitTick+0xa8>)
 8002bee:	f002 f997 	bl	8004f20 <HAL_TIM_Base_Start_IT>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	e000      	b.n	8002bf8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3730      	adds	r7, #48	; 0x30
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40021000 	.word	0x40021000
 8002c04:	431bde83 	.word	0x431bde83
 8002c08:	20000954 	.word	0x20000954
 8002c0c:	40000400 	.word	0x40000400

08002c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c14:	e7fe      	b.n	8002c14 <NMI_Handler+0x4>

08002c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c16:	b480      	push	{r7}
 8002c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c1a:	e7fe      	b.n	8002c1a <HardFault_Handler+0x4>

08002c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c20:	e7fe      	b.n	8002c20 <MemManage_Handler+0x4>

08002c22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c22:	b480      	push	{r7}
 8002c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c26:	e7fe      	b.n	8002c26 <BusFault_Handler+0x4>

08002c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c2c:	e7fe      	b.n	8002c2c <UsageFault_Handler+0x4>

08002c2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c32:	bf00      	nop
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bc80      	pop	{r7}
 8002c38:	4770      	bx	lr
	...

08002c3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c40:	4802      	ldr	r0, [pc, #8]	; (8002c4c <TIM2_IRQHandler+0x10>)
 8002c42:	f002 fde5 	bl	8005810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	200006c4 	.word	0x200006c4

08002c50 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002c54:	4802      	ldr	r0, [pc, #8]	; (8002c60 <TIM3_IRQHandler+0x10>)
 8002c56:	f002 fddb 	bl	8005810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000954 	.word	0x20000954

08002c64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c68:	4802      	ldr	r0, [pc, #8]	; (8002c74 <USART1_IRQHandler+0x10>)
 8002c6a:	f003 ff1b 	bl	8006aa4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20000520 	.word	0x20000520

08002c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c80:	4a14      	ldr	r2, [pc, #80]	; (8002cd4 <_sbrk+0x5c>)
 8002c82:	4b15      	ldr	r3, [pc, #84]	; (8002cd8 <_sbrk+0x60>)
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c8c:	4b13      	ldr	r3, [pc, #76]	; (8002cdc <_sbrk+0x64>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d102      	bne.n	8002c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c94:	4b11      	ldr	r3, [pc, #68]	; (8002cdc <_sbrk+0x64>)
 8002c96:	4a12      	ldr	r2, [pc, #72]	; (8002ce0 <_sbrk+0x68>)
 8002c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c9a:	4b10      	ldr	r3, [pc, #64]	; (8002cdc <_sbrk+0x64>)
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d207      	bcs.n	8002cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ca8:	f00a f90c 	bl	800cec4 <__errno>
 8002cac:	4603      	mov	r3, r0
 8002cae:	220c      	movs	r2, #12
 8002cb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cb6:	e009      	b.n	8002ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cb8:	4b08      	ldr	r3, [pc, #32]	; (8002cdc <_sbrk+0x64>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cbe:	4b07      	ldr	r3, [pc, #28]	; (8002cdc <_sbrk+0x64>)
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	4a05      	ldr	r2, [pc, #20]	; (8002cdc <_sbrk+0x64>)
 8002cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cca:	68fb      	ldr	r3, [r7, #12]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	20005000 	.word	0x20005000
 8002cd8:	00000400 	.word	0x00000400
 8002cdc:	200000c4 	.word	0x200000c4
 8002ce0:	20000e58 	.word	0x20000e58

08002ce4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ce8:	bf00      	nop
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bc80      	pop	{r7}
 8002cee:	4770      	bx	lr

08002cf0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002cf0:	f7ff fff8 	bl	8002ce4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cf4:	480b      	ldr	r0, [pc, #44]	; (8002d24 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002cf6:	490c      	ldr	r1, [pc, #48]	; (8002d28 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002cf8:	4a0c      	ldr	r2, [pc, #48]	; (8002d2c <LoopFillZerobss+0x16>)
  movs r3, #0
 8002cfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cfc:	e002      	b.n	8002d04 <LoopCopyDataInit>

08002cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d02:	3304      	adds	r3, #4

08002d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d08:	d3f9      	bcc.n	8002cfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d0a:	4a09      	ldr	r2, [pc, #36]	; (8002d30 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002d0c:	4c09      	ldr	r4, [pc, #36]	; (8002d34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d10:	e001      	b.n	8002d16 <LoopFillZerobss>

08002d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d14:	3204      	adds	r2, #4

08002d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d18:	d3fb      	bcc.n	8002d12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d1a:	f00a f8d9 	bl	800ced0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d1e:	f7ff f9e7 	bl	80020f0 <main>
  bx lr
 8002d22:	4770      	bx	lr
  ldr r0, =_sdata
 8002d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d28:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8002d2c:	0800dcd0 	.word	0x0800dcd0
  ldr r2, =_sbss
 8002d30:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8002d34:	20000e58 	.word	0x20000e58

08002d38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d38:	e7fe      	b.n	8002d38 <ADC1_2_IRQHandler>
	...

08002d3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d40:	4b08      	ldr	r3, [pc, #32]	; (8002d64 <HAL_Init+0x28>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a07      	ldr	r2, [pc, #28]	; (8002d64 <HAL_Init+0x28>)
 8002d46:	f043 0310 	orr.w	r3, r3, #16
 8002d4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d4c:	2003      	movs	r0, #3
 8002d4e:	f000 f8f5 	bl	8002f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d52:	2000      	movs	r0, #0
 8002d54:	f7ff ff04 	bl	8002b60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d58:	f7ff fd5e 	bl	8002818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40022000 	.word	0x40022000

08002d68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d6c:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <HAL_IncTick+0x1c>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	461a      	mov	r2, r3
 8002d72:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <HAL_IncTick+0x20>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4413      	add	r3, r2
 8002d78:	4a03      	ldr	r2, [pc, #12]	; (8002d88 <HAL_IncTick+0x20>)
 8002d7a:	6013      	str	r3, [r2, #0]
}
 8002d7c:	bf00      	nop
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr
 8002d84:	2000001c 	.word	0x2000001c
 8002d88:	200009a0 	.word	0x200009a0

08002d8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d90:	4b02      	ldr	r3, [pc, #8]	; (8002d9c <HAL_GetTick+0x10>)
 8002d92:	681b      	ldr	r3, [r3, #0]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bc80      	pop	{r7}
 8002d9a:	4770      	bx	lr
 8002d9c:	200009a0 	.word	0x200009a0

08002da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002da8:	f7ff fff0 	bl	8002d8c <HAL_GetTick>
 8002dac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db8:	d005      	beq.n	8002dc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dba:	4b0a      	ldr	r3, [pc, #40]	; (8002de4 <HAL_Delay+0x44>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dc6:	bf00      	nop
 8002dc8:	f7ff ffe0 	bl	8002d8c <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d8f7      	bhi.n	8002dc8 <HAL_Delay+0x28>
  {
  }
}
 8002dd8:	bf00      	nop
 8002dda:	bf00      	nop
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	2000001c 	.word	0x2000001c

08002de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002df8:	4b0c      	ldr	r3, [pc, #48]	; (8002e2c <__NVIC_SetPriorityGrouping+0x44>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e04:	4013      	ands	r3, r2
 8002e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e1a:	4a04      	ldr	r2, [pc, #16]	; (8002e2c <__NVIC_SetPriorityGrouping+0x44>)
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	60d3      	str	r3, [r2, #12]
}
 8002e20:	bf00      	nop
 8002e22:	3714      	adds	r7, #20
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bc80      	pop	{r7}
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	e000ed00 	.word	0xe000ed00

08002e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e34:	4b04      	ldr	r3, [pc, #16]	; (8002e48 <__NVIC_GetPriorityGrouping+0x18>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	0a1b      	lsrs	r3, r3, #8
 8002e3a:	f003 0307 	and.w	r3, r3, #7
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bc80      	pop	{r7}
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	e000ed00 	.word	0xe000ed00

08002e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	4603      	mov	r3, r0
 8002e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	db0b      	blt.n	8002e76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e5e:	79fb      	ldrb	r3, [r7, #7]
 8002e60:	f003 021f 	and.w	r2, r3, #31
 8002e64:	4906      	ldr	r1, [pc, #24]	; (8002e80 <__NVIC_EnableIRQ+0x34>)
 8002e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6a:	095b      	lsrs	r3, r3, #5
 8002e6c:	2001      	movs	r0, #1
 8002e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr
 8002e80:	e000e100 	.word	0xe000e100

08002e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	6039      	str	r1, [r7, #0]
 8002e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	db0a      	blt.n	8002eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	490c      	ldr	r1, [pc, #48]	; (8002ed0 <__NVIC_SetPriority+0x4c>)
 8002e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea2:	0112      	lsls	r2, r2, #4
 8002ea4:	b2d2      	uxtb	r2, r2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002eac:	e00a      	b.n	8002ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	4908      	ldr	r1, [pc, #32]	; (8002ed4 <__NVIC_SetPriority+0x50>)
 8002eb4:	79fb      	ldrb	r3, [r7, #7]
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	3b04      	subs	r3, #4
 8002ebc:	0112      	lsls	r2, r2, #4
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	761a      	strb	r2, [r3, #24]
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bc80      	pop	{r7}
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	e000e100 	.word	0xe000e100
 8002ed4:	e000ed00 	.word	0xe000ed00

08002ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b089      	sub	sp, #36	; 0x24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	f1c3 0307 	rsb	r3, r3, #7
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	bf28      	it	cs
 8002ef6:	2304      	movcs	r3, #4
 8002ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	3304      	adds	r3, #4
 8002efe:	2b06      	cmp	r3, #6
 8002f00:	d902      	bls.n	8002f08 <NVIC_EncodePriority+0x30>
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	3b03      	subs	r3, #3
 8002f06:	e000      	b.n	8002f0a <NVIC_EncodePriority+0x32>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	43da      	mvns	r2, r3
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	401a      	ands	r2, r3
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f20:	f04f 31ff 	mov.w	r1, #4294967295
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2a:	43d9      	mvns	r1, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f30:	4313      	orrs	r3, r2
         );
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3724      	adds	r7, #36	; 0x24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bc80      	pop	{r7}
 8002f3a:	4770      	bx	lr

08002f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f7ff ff4f 	bl	8002de8 <__NVIC_SetPriorityGrouping>
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b086      	sub	sp, #24
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	4603      	mov	r3, r0
 8002f5a:	60b9      	str	r1, [r7, #8]
 8002f5c:	607a      	str	r2, [r7, #4]
 8002f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f60:	2300      	movs	r3, #0
 8002f62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f64:	f7ff ff64 	bl	8002e30 <__NVIC_GetPriorityGrouping>
 8002f68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	68b9      	ldr	r1, [r7, #8]
 8002f6e:	6978      	ldr	r0, [r7, #20]
 8002f70:	f7ff ffb2 	bl	8002ed8 <NVIC_EncodePriority>
 8002f74:	4602      	mov	r2, r0
 8002f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f7a:	4611      	mov	r1, r2
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff ff81 	bl	8002e84 <__NVIC_SetPriority>
}
 8002f82:	bf00      	nop
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b082      	sub	sp, #8
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	4603      	mov	r3, r0
 8002f92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff ff57 	bl	8002e4c <__NVIC_EnableIRQ>
}
 8002f9e:	bf00      	nop
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b085      	sub	sp, #20
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d008      	beq.n	8002fd0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2204      	movs	r2, #4
 8002fc2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e020      	b.n	8003012 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 020e 	bic.w	r2, r2, #14
 8002fde:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0201 	bic.w	r2, r2, #1
 8002fee:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8002ffe:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003010:	7bfb      	ldrb	r3, [r7, #15]
}
 8003012:	4618      	mov	r0, r3
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	bc80      	pop	{r7}
 800301a:	4770      	bx	lr

0800301c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003024:	2300      	movs	r3, #0
 8003026:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d005      	beq.n	8003040 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2204      	movs	r2, #4
 8003038:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	73fb      	strb	r3, [r7, #15]
 800303e:	e051      	b.n	80030e4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 020e 	bic.w	r2, r2, #14
 800304e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0201 	bic.w	r2, r2, #1
 800305e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a22      	ldr	r2, [pc, #136]	; (80030f0 <HAL_DMA_Abort_IT+0xd4>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d029      	beq.n	80030be <HAL_DMA_Abort_IT+0xa2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a21      	ldr	r2, [pc, #132]	; (80030f4 <HAL_DMA_Abort_IT+0xd8>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d022      	beq.n	80030ba <HAL_DMA_Abort_IT+0x9e>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a1f      	ldr	r2, [pc, #124]	; (80030f8 <HAL_DMA_Abort_IT+0xdc>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d01a      	beq.n	80030b4 <HAL_DMA_Abort_IT+0x98>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a1e      	ldr	r2, [pc, #120]	; (80030fc <HAL_DMA_Abort_IT+0xe0>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d012      	beq.n	80030ae <HAL_DMA_Abort_IT+0x92>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a1c      	ldr	r2, [pc, #112]	; (8003100 <HAL_DMA_Abort_IT+0xe4>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d00a      	beq.n	80030a8 <HAL_DMA_Abort_IT+0x8c>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a1b      	ldr	r2, [pc, #108]	; (8003104 <HAL_DMA_Abort_IT+0xe8>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d102      	bne.n	80030a2 <HAL_DMA_Abort_IT+0x86>
 800309c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030a0:	e00e      	b.n	80030c0 <HAL_DMA_Abort_IT+0xa4>
 80030a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030a6:	e00b      	b.n	80030c0 <HAL_DMA_Abort_IT+0xa4>
 80030a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030ac:	e008      	b.n	80030c0 <HAL_DMA_Abort_IT+0xa4>
 80030ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030b2:	e005      	b.n	80030c0 <HAL_DMA_Abort_IT+0xa4>
 80030b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030b8:	e002      	b.n	80030c0 <HAL_DMA_Abort_IT+0xa4>
 80030ba:	2310      	movs	r3, #16
 80030bc:	e000      	b.n	80030c0 <HAL_DMA_Abort_IT+0xa4>
 80030be:	2301      	movs	r3, #1
 80030c0:	4a11      	ldr	r2, [pc, #68]	; (8003108 <HAL_DMA_Abort_IT+0xec>)
 80030c2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	4798      	blx	r3
    } 
  }
  return status;
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40020008 	.word	0x40020008
 80030f4:	4002001c 	.word	0x4002001c
 80030f8:	40020030 	.word	0x40020030
 80030fc:	40020044 	.word	0x40020044
 8003100:	40020058 	.word	0x40020058
 8003104:	4002006c 	.word	0x4002006c
 8003108:	40020000 	.word	0x40020000

0800310c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800310c:	b480      	push	{r7}
 800310e:	b08b      	sub	sp, #44	; 0x2c
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003116:	2300      	movs	r3, #0
 8003118:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800311a:	2300      	movs	r3, #0
 800311c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800311e:	e169      	b.n	80033f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003120:	2201      	movs	r2, #1
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	69fa      	ldr	r2, [r7, #28]
 8003130:	4013      	ands	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	429a      	cmp	r2, r3
 800313a:	f040 8158 	bne.w	80033ee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	4a9a      	ldr	r2, [pc, #616]	; (80033ac <HAL_GPIO_Init+0x2a0>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d05e      	beq.n	8003206 <HAL_GPIO_Init+0xfa>
 8003148:	4a98      	ldr	r2, [pc, #608]	; (80033ac <HAL_GPIO_Init+0x2a0>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d875      	bhi.n	800323a <HAL_GPIO_Init+0x12e>
 800314e:	4a98      	ldr	r2, [pc, #608]	; (80033b0 <HAL_GPIO_Init+0x2a4>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d058      	beq.n	8003206 <HAL_GPIO_Init+0xfa>
 8003154:	4a96      	ldr	r2, [pc, #600]	; (80033b0 <HAL_GPIO_Init+0x2a4>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d86f      	bhi.n	800323a <HAL_GPIO_Init+0x12e>
 800315a:	4a96      	ldr	r2, [pc, #600]	; (80033b4 <HAL_GPIO_Init+0x2a8>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d052      	beq.n	8003206 <HAL_GPIO_Init+0xfa>
 8003160:	4a94      	ldr	r2, [pc, #592]	; (80033b4 <HAL_GPIO_Init+0x2a8>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d869      	bhi.n	800323a <HAL_GPIO_Init+0x12e>
 8003166:	4a94      	ldr	r2, [pc, #592]	; (80033b8 <HAL_GPIO_Init+0x2ac>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d04c      	beq.n	8003206 <HAL_GPIO_Init+0xfa>
 800316c:	4a92      	ldr	r2, [pc, #584]	; (80033b8 <HAL_GPIO_Init+0x2ac>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d863      	bhi.n	800323a <HAL_GPIO_Init+0x12e>
 8003172:	4a92      	ldr	r2, [pc, #584]	; (80033bc <HAL_GPIO_Init+0x2b0>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d046      	beq.n	8003206 <HAL_GPIO_Init+0xfa>
 8003178:	4a90      	ldr	r2, [pc, #576]	; (80033bc <HAL_GPIO_Init+0x2b0>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d85d      	bhi.n	800323a <HAL_GPIO_Init+0x12e>
 800317e:	2b12      	cmp	r3, #18
 8003180:	d82a      	bhi.n	80031d8 <HAL_GPIO_Init+0xcc>
 8003182:	2b12      	cmp	r3, #18
 8003184:	d859      	bhi.n	800323a <HAL_GPIO_Init+0x12e>
 8003186:	a201      	add	r2, pc, #4	; (adr r2, 800318c <HAL_GPIO_Init+0x80>)
 8003188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318c:	08003207 	.word	0x08003207
 8003190:	080031e1 	.word	0x080031e1
 8003194:	080031f3 	.word	0x080031f3
 8003198:	08003235 	.word	0x08003235
 800319c:	0800323b 	.word	0x0800323b
 80031a0:	0800323b 	.word	0x0800323b
 80031a4:	0800323b 	.word	0x0800323b
 80031a8:	0800323b 	.word	0x0800323b
 80031ac:	0800323b 	.word	0x0800323b
 80031b0:	0800323b 	.word	0x0800323b
 80031b4:	0800323b 	.word	0x0800323b
 80031b8:	0800323b 	.word	0x0800323b
 80031bc:	0800323b 	.word	0x0800323b
 80031c0:	0800323b 	.word	0x0800323b
 80031c4:	0800323b 	.word	0x0800323b
 80031c8:	0800323b 	.word	0x0800323b
 80031cc:	0800323b 	.word	0x0800323b
 80031d0:	080031e9 	.word	0x080031e9
 80031d4:	080031fd 	.word	0x080031fd
 80031d8:	4a79      	ldr	r2, [pc, #484]	; (80033c0 <HAL_GPIO_Init+0x2b4>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d013      	beq.n	8003206 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80031de:	e02c      	b.n	800323a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	623b      	str	r3, [r7, #32]
          break;
 80031e6:	e029      	b.n	800323c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	3304      	adds	r3, #4
 80031ee:	623b      	str	r3, [r7, #32]
          break;
 80031f0:	e024      	b.n	800323c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	3308      	adds	r3, #8
 80031f8:	623b      	str	r3, [r7, #32]
          break;
 80031fa:	e01f      	b.n	800323c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	330c      	adds	r3, #12
 8003202:	623b      	str	r3, [r7, #32]
          break;
 8003204:	e01a      	b.n	800323c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d102      	bne.n	8003214 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800320e:	2304      	movs	r3, #4
 8003210:	623b      	str	r3, [r7, #32]
          break;
 8003212:	e013      	b.n	800323c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d105      	bne.n	8003228 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800321c:	2308      	movs	r3, #8
 800321e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	69fa      	ldr	r2, [r7, #28]
 8003224:	611a      	str	r2, [r3, #16]
          break;
 8003226:	e009      	b.n	800323c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003228:	2308      	movs	r3, #8
 800322a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	69fa      	ldr	r2, [r7, #28]
 8003230:	615a      	str	r2, [r3, #20]
          break;
 8003232:	e003      	b.n	800323c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003234:	2300      	movs	r3, #0
 8003236:	623b      	str	r3, [r7, #32]
          break;
 8003238:	e000      	b.n	800323c <HAL_GPIO_Init+0x130>
          break;
 800323a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	2bff      	cmp	r3, #255	; 0xff
 8003240:	d801      	bhi.n	8003246 <HAL_GPIO_Init+0x13a>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	e001      	b.n	800324a <HAL_GPIO_Init+0x13e>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	3304      	adds	r3, #4
 800324a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	2bff      	cmp	r3, #255	; 0xff
 8003250:	d802      	bhi.n	8003258 <HAL_GPIO_Init+0x14c>
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	e002      	b.n	800325e <HAL_GPIO_Init+0x152>
 8003258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325a:	3b08      	subs	r3, #8
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	210f      	movs	r1, #15
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	fa01 f303 	lsl.w	r3, r1, r3
 800326c:	43db      	mvns	r3, r3
 800326e:	401a      	ands	r2, r3
 8003270:	6a39      	ldr	r1, [r7, #32]
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	fa01 f303 	lsl.w	r3, r1, r3
 8003278:	431a      	orrs	r2, r3
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	f000 80b1 	beq.w	80033ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800328c:	4b4d      	ldr	r3, [pc, #308]	; (80033c4 <HAL_GPIO_Init+0x2b8>)
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	4a4c      	ldr	r2, [pc, #304]	; (80033c4 <HAL_GPIO_Init+0x2b8>)
 8003292:	f043 0301 	orr.w	r3, r3, #1
 8003296:	6193      	str	r3, [r2, #24]
 8003298:	4b4a      	ldr	r3, [pc, #296]	; (80033c4 <HAL_GPIO_Init+0x2b8>)
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	60bb      	str	r3, [r7, #8]
 80032a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80032a4:	4a48      	ldr	r2, [pc, #288]	; (80033c8 <HAL_GPIO_Init+0x2bc>)
 80032a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a8:	089b      	lsrs	r3, r3, #2
 80032aa:	3302      	adds	r3, #2
 80032ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b4:	f003 0303 	and.w	r3, r3, #3
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	220f      	movs	r2, #15
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	43db      	mvns	r3, r3
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	4013      	ands	r3, r2
 80032c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a40      	ldr	r2, [pc, #256]	; (80033cc <HAL_GPIO_Init+0x2c0>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d013      	beq.n	80032f8 <HAL_GPIO_Init+0x1ec>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a3f      	ldr	r2, [pc, #252]	; (80033d0 <HAL_GPIO_Init+0x2c4>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d00d      	beq.n	80032f4 <HAL_GPIO_Init+0x1e8>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a3e      	ldr	r2, [pc, #248]	; (80033d4 <HAL_GPIO_Init+0x2c8>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d007      	beq.n	80032f0 <HAL_GPIO_Init+0x1e4>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a3d      	ldr	r2, [pc, #244]	; (80033d8 <HAL_GPIO_Init+0x2cc>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d101      	bne.n	80032ec <HAL_GPIO_Init+0x1e0>
 80032e8:	2303      	movs	r3, #3
 80032ea:	e006      	b.n	80032fa <HAL_GPIO_Init+0x1ee>
 80032ec:	2304      	movs	r3, #4
 80032ee:	e004      	b.n	80032fa <HAL_GPIO_Init+0x1ee>
 80032f0:	2302      	movs	r3, #2
 80032f2:	e002      	b.n	80032fa <HAL_GPIO_Init+0x1ee>
 80032f4:	2301      	movs	r3, #1
 80032f6:	e000      	b.n	80032fa <HAL_GPIO_Init+0x1ee>
 80032f8:	2300      	movs	r3, #0
 80032fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032fc:	f002 0203 	and.w	r2, r2, #3
 8003300:	0092      	lsls	r2, r2, #2
 8003302:	4093      	lsls	r3, r2
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	4313      	orrs	r3, r2
 8003308:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800330a:	492f      	ldr	r1, [pc, #188]	; (80033c8 <HAL_GPIO_Init+0x2bc>)
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	089b      	lsrs	r3, r3, #2
 8003310:	3302      	adds	r3, #2
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d006      	beq.n	8003332 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003324:	4b2d      	ldr	r3, [pc, #180]	; (80033dc <HAL_GPIO_Init+0x2d0>)
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	492c      	ldr	r1, [pc, #176]	; (80033dc <HAL_GPIO_Init+0x2d0>)
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	4313      	orrs	r3, r2
 800332e:	608b      	str	r3, [r1, #8]
 8003330:	e006      	b.n	8003340 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003332:	4b2a      	ldr	r3, [pc, #168]	; (80033dc <HAL_GPIO_Init+0x2d0>)
 8003334:	689a      	ldr	r2, [r3, #8]
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	43db      	mvns	r3, r3
 800333a:	4928      	ldr	r1, [pc, #160]	; (80033dc <HAL_GPIO_Init+0x2d0>)
 800333c:	4013      	ands	r3, r2
 800333e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d006      	beq.n	800335a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800334c:	4b23      	ldr	r3, [pc, #140]	; (80033dc <HAL_GPIO_Init+0x2d0>)
 800334e:	68da      	ldr	r2, [r3, #12]
 8003350:	4922      	ldr	r1, [pc, #136]	; (80033dc <HAL_GPIO_Init+0x2d0>)
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	4313      	orrs	r3, r2
 8003356:	60cb      	str	r3, [r1, #12]
 8003358:	e006      	b.n	8003368 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800335a:	4b20      	ldr	r3, [pc, #128]	; (80033dc <HAL_GPIO_Init+0x2d0>)
 800335c:	68da      	ldr	r2, [r3, #12]
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	43db      	mvns	r3, r3
 8003362:	491e      	ldr	r1, [pc, #120]	; (80033dc <HAL_GPIO_Init+0x2d0>)
 8003364:	4013      	ands	r3, r2
 8003366:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d006      	beq.n	8003382 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003374:	4b19      	ldr	r3, [pc, #100]	; (80033dc <HAL_GPIO_Init+0x2d0>)
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	4918      	ldr	r1, [pc, #96]	; (80033dc <HAL_GPIO_Init+0x2d0>)
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	4313      	orrs	r3, r2
 800337e:	604b      	str	r3, [r1, #4]
 8003380:	e006      	b.n	8003390 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003382:	4b16      	ldr	r3, [pc, #88]	; (80033dc <HAL_GPIO_Init+0x2d0>)
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	43db      	mvns	r3, r3
 800338a:	4914      	ldr	r1, [pc, #80]	; (80033dc <HAL_GPIO_Init+0x2d0>)
 800338c:	4013      	ands	r3, r2
 800338e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d021      	beq.n	80033e0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800339c:	4b0f      	ldr	r3, [pc, #60]	; (80033dc <HAL_GPIO_Init+0x2d0>)
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	490e      	ldr	r1, [pc, #56]	; (80033dc <HAL_GPIO_Init+0x2d0>)
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	600b      	str	r3, [r1, #0]
 80033a8:	e021      	b.n	80033ee <HAL_GPIO_Init+0x2e2>
 80033aa:	bf00      	nop
 80033ac:	10320000 	.word	0x10320000
 80033b0:	10310000 	.word	0x10310000
 80033b4:	10220000 	.word	0x10220000
 80033b8:	10210000 	.word	0x10210000
 80033bc:	10120000 	.word	0x10120000
 80033c0:	10110000 	.word	0x10110000
 80033c4:	40021000 	.word	0x40021000
 80033c8:	40010000 	.word	0x40010000
 80033cc:	40010800 	.word	0x40010800
 80033d0:	40010c00 	.word	0x40010c00
 80033d4:	40011000 	.word	0x40011000
 80033d8:	40011400 	.word	0x40011400
 80033dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80033e0:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <HAL_GPIO_Init+0x304>)
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	43db      	mvns	r3, r3
 80033e8:	4909      	ldr	r1, [pc, #36]	; (8003410 <HAL_GPIO_Init+0x304>)
 80033ea:	4013      	ands	r3, r2
 80033ec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	3301      	adds	r3, #1
 80033f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fa:	fa22 f303 	lsr.w	r3, r2, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f47f ae8e 	bne.w	8003120 <HAL_GPIO_Init+0x14>
  }
}
 8003404:	bf00      	nop
 8003406:	bf00      	nop
 8003408:	372c      	adds	r7, #44	; 0x2c
 800340a:	46bd      	mov	sp, r7
 800340c:	bc80      	pop	{r7}
 800340e:	4770      	bx	lr
 8003410:	40010400 	.word	0x40010400

08003414 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	460b      	mov	r3, r1
 800341e:	807b      	strh	r3, [r7, #2]
 8003420:	4613      	mov	r3, r2
 8003422:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003424:	787b      	ldrb	r3, [r7, #1]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800342a:	887a      	ldrh	r2, [r7, #2]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003430:	e003      	b.n	800343a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003432:	887b      	ldrh	r3, [r7, #2]
 8003434:	041a      	lsls	r2, r3, #16
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	611a      	str	r2, [r3, #16]
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	bc80      	pop	{r7}
 8003442:	4770      	bx	lr

08003444 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	460b      	mov	r3, r1
 800344e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003456:	887a      	ldrh	r2, [r7, #2]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4013      	ands	r3, r2
 800345c:	041a      	lsls	r2, r3, #16
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	43d9      	mvns	r1, r3
 8003462:	887b      	ldrh	r3, [r7, #2]
 8003464:	400b      	ands	r3, r1
 8003466:	431a      	orrs	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	611a      	str	r2, [r3, #16]
}
 800346c:	bf00      	nop
 800346e:	3714      	adds	r7, #20
 8003470:	46bd      	mov	sp, r7
 8003472:	bc80      	pop	{r7}
 8003474:	4770      	bx	lr
	...

08003478 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e12b      	b.n	80036e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d106      	bne.n	80034a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7ff f9ec 	bl	800287c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2224      	movs	r2, #36	; 0x24
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 0201 	bic.w	r2, r2, #1
 80034ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034dc:	f001 f830 	bl	8004540 <HAL_RCC_GetPCLK1Freq>
 80034e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	4a81      	ldr	r2, [pc, #516]	; (80036ec <HAL_I2C_Init+0x274>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d807      	bhi.n	80034fc <HAL_I2C_Init+0x84>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4a80      	ldr	r2, [pc, #512]	; (80036f0 <HAL_I2C_Init+0x278>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	bf94      	ite	ls
 80034f4:	2301      	movls	r3, #1
 80034f6:	2300      	movhi	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	e006      	b.n	800350a <HAL_I2C_Init+0x92>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	4a7d      	ldr	r2, [pc, #500]	; (80036f4 <HAL_I2C_Init+0x27c>)
 8003500:	4293      	cmp	r3, r2
 8003502:	bf94      	ite	ls
 8003504:	2301      	movls	r3, #1
 8003506:	2300      	movhi	r3, #0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e0e7      	b.n	80036e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	4a78      	ldr	r2, [pc, #480]	; (80036f8 <HAL_I2C_Init+0x280>)
 8003516:	fba2 2303 	umull	r2, r3, r2, r3
 800351a:	0c9b      	lsrs	r3, r3, #18
 800351c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68ba      	ldr	r2, [r7, #8]
 800352e:	430a      	orrs	r2, r1
 8003530:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	4a6a      	ldr	r2, [pc, #424]	; (80036ec <HAL_I2C_Init+0x274>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d802      	bhi.n	800354c <HAL_I2C_Init+0xd4>
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	3301      	adds	r3, #1
 800354a:	e009      	b.n	8003560 <HAL_I2C_Init+0xe8>
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003552:	fb02 f303 	mul.w	r3, r2, r3
 8003556:	4a69      	ldr	r2, [pc, #420]	; (80036fc <HAL_I2C_Init+0x284>)
 8003558:	fba2 2303 	umull	r2, r3, r2, r3
 800355c:	099b      	lsrs	r3, r3, #6
 800355e:	3301      	adds	r3, #1
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6812      	ldr	r2, [r2, #0]
 8003564:	430b      	orrs	r3, r1
 8003566:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003572:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	495c      	ldr	r1, [pc, #368]	; (80036ec <HAL_I2C_Init+0x274>)
 800357c:	428b      	cmp	r3, r1
 800357e:	d819      	bhi.n	80035b4 <HAL_I2C_Init+0x13c>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	1e59      	subs	r1, r3, #1
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	fbb1 f3f3 	udiv	r3, r1, r3
 800358e:	1c59      	adds	r1, r3, #1
 8003590:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003594:	400b      	ands	r3, r1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00a      	beq.n	80035b0 <HAL_I2C_Init+0x138>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	1e59      	subs	r1, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80035a8:	3301      	adds	r3, #1
 80035aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ae:	e051      	b.n	8003654 <HAL_I2C_Init+0x1dc>
 80035b0:	2304      	movs	r3, #4
 80035b2:	e04f      	b.n	8003654 <HAL_I2C_Init+0x1dc>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d111      	bne.n	80035e0 <HAL_I2C_Init+0x168>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	1e58      	subs	r0, r3, #1
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6859      	ldr	r1, [r3, #4]
 80035c4:	460b      	mov	r3, r1
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	440b      	add	r3, r1
 80035ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ce:	3301      	adds	r3, #1
 80035d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	bf0c      	ite	eq
 80035d8:	2301      	moveq	r3, #1
 80035da:	2300      	movne	r3, #0
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	e012      	b.n	8003606 <HAL_I2C_Init+0x18e>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	1e58      	subs	r0, r3, #1
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6859      	ldr	r1, [r3, #4]
 80035e8:	460b      	mov	r3, r1
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	0099      	lsls	r1, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035f6:	3301      	adds	r3, #1
 80035f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	bf0c      	ite	eq
 8003600:	2301      	moveq	r3, #1
 8003602:	2300      	movne	r3, #0
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <HAL_I2C_Init+0x196>
 800360a:	2301      	movs	r3, #1
 800360c:	e022      	b.n	8003654 <HAL_I2C_Init+0x1dc>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10e      	bne.n	8003634 <HAL_I2C_Init+0x1bc>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	1e58      	subs	r0, r3, #1
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6859      	ldr	r1, [r3, #4]
 800361e:	460b      	mov	r3, r1
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	440b      	add	r3, r1
 8003624:	fbb0 f3f3 	udiv	r3, r0, r3
 8003628:	3301      	adds	r3, #1
 800362a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800362e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003632:	e00f      	b.n	8003654 <HAL_I2C_Init+0x1dc>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	1e58      	subs	r0, r3, #1
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6859      	ldr	r1, [r3, #4]
 800363c:	460b      	mov	r3, r1
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	0099      	lsls	r1, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	fbb0 f3f3 	udiv	r3, r0, r3
 800364a:	3301      	adds	r3, #1
 800364c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003650:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	6809      	ldr	r1, [r1, #0]
 8003658:	4313      	orrs	r3, r2
 800365a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	69da      	ldr	r2, [r3, #28]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	431a      	orrs	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003682:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	6911      	ldr	r1, [r2, #16]
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	68d2      	ldr	r2, [r2, #12]
 800368e:	4311      	orrs	r1, r2
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6812      	ldr	r2, [r2, #0]
 8003694:	430b      	orrs	r3, r1
 8003696:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	695a      	ldr	r2, [r3, #20]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 0201 	orr.w	r2, r2, #1
 80036c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2220      	movs	r2, #32
 80036ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	000186a0 	.word	0x000186a0
 80036f0:	001e847f 	.word	0x001e847f
 80036f4:	003d08ff 	.word	0x003d08ff
 80036f8:	431bde83 	.word	0x431bde83
 80036fc:	10624dd3 	.word	0x10624dd3

08003700 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b088      	sub	sp, #32
 8003704:	af02      	add	r7, sp, #8
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	607a      	str	r2, [r7, #4]
 800370a:	461a      	mov	r2, r3
 800370c:	460b      	mov	r3, r1
 800370e:	817b      	strh	r3, [r7, #10]
 8003710:	4613      	mov	r3, r2
 8003712:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003714:	f7ff fb3a 	bl	8002d8c <HAL_GetTick>
 8003718:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b20      	cmp	r3, #32
 8003724:	f040 80e0 	bne.w	80038e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	2319      	movs	r3, #25
 800372e:	2201      	movs	r2, #1
 8003730:	4970      	ldr	r1, [pc, #448]	; (80038f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f000 f964 	bl	8003a00 <I2C_WaitOnFlagUntilTimeout>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800373e:	2302      	movs	r3, #2
 8003740:	e0d3      	b.n	80038ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003748:	2b01      	cmp	r3, #1
 800374a:	d101      	bne.n	8003750 <HAL_I2C_Master_Transmit+0x50>
 800374c:	2302      	movs	r3, #2
 800374e:	e0cc      	b.n	80038ea <HAL_I2C_Master_Transmit+0x1ea>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b01      	cmp	r3, #1
 8003764:	d007      	beq.n	8003776 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f042 0201 	orr.w	r2, r2, #1
 8003774:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003784:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2221      	movs	r2, #33	; 0x21
 800378a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2210      	movs	r2, #16
 8003792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	893a      	ldrh	r2, [r7, #8]
 80037a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	4a50      	ldr	r2, [pc, #320]	; (80038f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80037b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80037b8:	8979      	ldrh	r1, [r7, #10]
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	6a3a      	ldr	r2, [r7, #32]
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f000 f89c 	bl	80038fc <I2C_MasterRequestWrite>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e08d      	b.n	80038ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ce:	2300      	movs	r3, #0
 80037d0:	613b      	str	r3, [r7, #16]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	613b      	str	r3, [r7, #16]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	613b      	str	r3, [r7, #16]
 80037e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80037e4:	e066      	b.n	80038b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	6a39      	ldr	r1, [r7, #32]
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f000 fa22 	bl	8003c34 <I2C_WaitOnTXEFlagUntilTimeout>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00d      	beq.n	8003812 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	d107      	bne.n	800380e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800380c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e06b      	b.n	80038ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	781a      	ldrb	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	1c5a      	adds	r2, r3, #1
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382c:	b29b      	uxth	r3, r3
 800382e:	3b01      	subs	r3, #1
 8003830:	b29a      	uxth	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800383a:	3b01      	subs	r3, #1
 800383c:	b29a      	uxth	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	f003 0304 	and.w	r3, r3, #4
 800384c:	2b04      	cmp	r3, #4
 800384e:	d11b      	bne.n	8003888 <HAL_I2C_Master_Transmit+0x188>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003854:	2b00      	cmp	r3, #0
 8003856:	d017      	beq.n	8003888 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	781a      	ldrb	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	1c5a      	adds	r2, r3, #1
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003872:	b29b      	uxth	r3, r3
 8003874:	3b01      	subs	r3, #1
 8003876:	b29a      	uxth	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003880:	3b01      	subs	r3, #1
 8003882:	b29a      	uxth	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	6a39      	ldr	r1, [r7, #32]
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f000 fa19 	bl	8003cc4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00d      	beq.n	80038b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389c:	2b04      	cmp	r3, #4
 800389e:	d107      	bne.n	80038b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e01a      	b.n	80038ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d194      	bne.n	80037e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2220      	movs	r2, #32
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	e000      	b.n	80038ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80038e8:	2302      	movs	r3, #2
  }
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3718      	adds	r7, #24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	00100002 	.word	0x00100002
 80038f8:	ffff0000 	.word	0xffff0000

080038fc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b088      	sub	sp, #32
 8003900:	af02      	add	r7, sp, #8
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	607a      	str	r2, [r7, #4]
 8003906:	603b      	str	r3, [r7, #0]
 8003908:	460b      	mov	r3, r1
 800390a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003910:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	2b08      	cmp	r3, #8
 8003916:	d006      	beq.n	8003926 <I2C_MasterRequestWrite+0x2a>
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d003      	beq.n	8003926 <I2C_MasterRequestWrite+0x2a>
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003924:	d108      	bne.n	8003938 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	e00b      	b.n	8003950 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393c:	2b12      	cmp	r3, #18
 800393e:	d107      	bne.n	8003950 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800394e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f000 f84f 	bl	8003a00 <I2C_WaitOnFlagUntilTimeout>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00d      	beq.n	8003984 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003976:	d103      	bne.n	8003980 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800397e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e035      	b.n	80039f0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800398c:	d108      	bne.n	80039a0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800398e:	897b      	ldrh	r3, [r7, #10]
 8003990:	b2db      	uxtb	r3, r3
 8003992:	461a      	mov	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800399c:	611a      	str	r2, [r3, #16]
 800399e:	e01b      	b.n	80039d8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80039a0:	897b      	ldrh	r3, [r7, #10]
 80039a2:	11db      	asrs	r3, r3, #7
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	f003 0306 	and.w	r3, r3, #6
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	f063 030f 	orn	r3, r3, #15
 80039b0:	b2da      	uxtb	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	490e      	ldr	r1, [pc, #56]	; (80039f8 <I2C_MasterRequestWrite+0xfc>)
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f000 f898 	bl	8003af4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e010      	b.n	80039f0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80039ce:	897b      	ldrh	r3, [r7, #10]
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	4907      	ldr	r1, [pc, #28]	; (80039fc <I2C_MasterRequestWrite+0x100>)
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f000 f888 	bl	8003af4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e000      	b.n	80039f0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3718      	adds	r7, #24
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	00010008 	.word	0x00010008
 80039fc:	00010002 	.word	0x00010002

08003a00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	603b      	str	r3, [r7, #0]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a10:	e048      	b.n	8003aa4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a18:	d044      	beq.n	8003aa4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a1a:	f7ff f9b7 	bl	8002d8c <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d302      	bcc.n	8003a30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d139      	bne.n	8003aa4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	0c1b      	lsrs	r3, r3, #16
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d10d      	bne.n	8003a56 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	43da      	mvns	r2, r3
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	4013      	ands	r3, r2
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	bf0c      	ite	eq
 8003a4c:	2301      	moveq	r3, #1
 8003a4e:	2300      	movne	r3, #0
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	461a      	mov	r2, r3
 8003a54:	e00c      	b.n	8003a70 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	43da      	mvns	r2, r3
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	4013      	ands	r3, r2
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	bf0c      	ite	eq
 8003a68:	2301      	moveq	r3, #1
 8003a6a:	2300      	movne	r3, #0
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	461a      	mov	r2, r3
 8003a70:	79fb      	ldrb	r3, [r7, #7]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d116      	bne.n	8003aa4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a90:	f043 0220 	orr.w	r2, r3, #32
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e023      	b.n	8003aec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	0c1b      	lsrs	r3, r3, #16
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d10d      	bne.n	8003aca <I2C_WaitOnFlagUntilTimeout+0xca>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	43da      	mvns	r2, r3
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	bf0c      	ite	eq
 8003ac0:	2301      	moveq	r3, #1
 8003ac2:	2300      	movne	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	e00c      	b.n	8003ae4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	43da      	mvns	r2, r3
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	bf0c      	ite	eq
 8003adc:	2301      	moveq	r3, #1
 8003ade:	2300      	movne	r3, #0
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	79fb      	ldrb	r3, [r7, #7]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d093      	beq.n	8003a12 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
 8003b00:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b02:	e071      	b.n	8003be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b12:	d123      	bne.n	8003b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b22:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b48:	f043 0204 	orr.w	r2, r3, #4
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e067      	b.n	8003c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b62:	d041      	beq.n	8003be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b64:	f7ff f912 	bl	8002d8c <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d302      	bcc.n	8003b7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d136      	bne.n	8003be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	0c1b      	lsrs	r3, r3, #16
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d10c      	bne.n	8003b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	43da      	mvns	r2, r3
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	bf14      	ite	ne
 8003b96:	2301      	movne	r3, #1
 8003b98:	2300      	moveq	r3, #0
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	e00b      	b.n	8003bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	43da      	mvns	r2, r3
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	bf14      	ite	ne
 8003bb0:	2301      	movne	r3, #1
 8003bb2:	2300      	moveq	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d016      	beq.n	8003be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd4:	f043 0220 	orr.w	r2, r3, #32
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e021      	b.n	8003c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	0c1b      	lsrs	r3, r3, #16
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d10c      	bne.n	8003c0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	43da      	mvns	r2, r3
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	bf14      	ite	ne
 8003c04:	2301      	movne	r3, #1
 8003c06:	2300      	moveq	r3, #0
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	e00b      	b.n	8003c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	43da      	mvns	r2, r3
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	4013      	ands	r3, r2
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	bf14      	ite	ne
 8003c1e:	2301      	movne	r3, #1
 8003c20:	2300      	moveq	r3, #0
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f47f af6d 	bne.w	8003b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c40:	e034      	b.n	8003cac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 f886 	bl	8003d54 <I2C_IsAcknowledgeFailed>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e034      	b.n	8003cbc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c58:	d028      	beq.n	8003cac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c5a:	f7ff f897 	bl	8002d8c <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d302      	bcc.n	8003c70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d11d      	bne.n	8003cac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c7a:	2b80      	cmp	r3, #128	; 0x80
 8003c7c:	d016      	beq.n	8003cac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2220      	movs	r2, #32
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c98:	f043 0220 	orr.w	r2, r3, #32
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e007      	b.n	8003cbc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb6:	2b80      	cmp	r3, #128	; 0x80
 8003cb8:	d1c3      	bne.n	8003c42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cd0:	e034      	b.n	8003d3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 f83e 	bl	8003d54 <I2C_IsAcknowledgeFailed>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e034      	b.n	8003d4c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce8:	d028      	beq.n	8003d3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cea:	f7ff f84f 	bl	8002d8c <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d302      	bcc.n	8003d00 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d11d      	bne.n	8003d3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	f003 0304 	and.w	r3, r3, #4
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	d016      	beq.n	8003d3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d28:	f043 0220 	orr.w	r2, r3, #32
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e007      	b.n	8003d4c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	f003 0304 	and.w	r3, r3, #4
 8003d46:	2b04      	cmp	r3, #4
 8003d48:	d1c3      	bne.n	8003cd2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d6a:	d11b      	bne.n	8003da4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d74:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d90:	f043 0204 	orr.w	r2, r3, #4
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e000      	b.n	8003da6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bc80      	pop	{r7}
 8003dae:	4770      	bx	lr

08003db0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e26c      	b.n	800429c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f000 8087 	beq.w	8003ede <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dd0:	4b92      	ldr	r3, [pc, #584]	; (800401c <HAL_RCC_OscConfig+0x26c>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f003 030c 	and.w	r3, r3, #12
 8003dd8:	2b04      	cmp	r3, #4
 8003dda:	d00c      	beq.n	8003df6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ddc:	4b8f      	ldr	r3, [pc, #572]	; (800401c <HAL_RCC_OscConfig+0x26c>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f003 030c 	and.w	r3, r3, #12
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	d112      	bne.n	8003e0e <HAL_RCC_OscConfig+0x5e>
 8003de8:	4b8c      	ldr	r3, [pc, #560]	; (800401c <HAL_RCC_OscConfig+0x26c>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003df4:	d10b      	bne.n	8003e0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df6:	4b89      	ldr	r3, [pc, #548]	; (800401c <HAL_RCC_OscConfig+0x26c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d06c      	beq.n	8003edc <HAL_RCC_OscConfig+0x12c>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d168      	bne.n	8003edc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e246      	b.n	800429c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e16:	d106      	bne.n	8003e26 <HAL_RCC_OscConfig+0x76>
 8003e18:	4b80      	ldr	r3, [pc, #512]	; (800401c <HAL_RCC_OscConfig+0x26c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a7f      	ldr	r2, [pc, #508]	; (800401c <HAL_RCC_OscConfig+0x26c>)
 8003e1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e22:	6013      	str	r3, [r2, #0]
 8003e24:	e02e      	b.n	8003e84 <HAL_RCC_OscConfig+0xd4>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10c      	bne.n	8003e48 <HAL_RCC_OscConfig+0x98>
 8003e2e:	4b7b      	ldr	r3, [pc, #492]	; (800401c <HAL_RCC_OscConfig+0x26c>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a7a      	ldr	r2, [pc, #488]	; (800401c <HAL_RCC_OscConfig+0x26c>)
 8003e34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e38:	6013      	str	r3, [r2, #0]
 8003e3a:	4b78      	ldr	r3, [pc, #480]	; (800401c <HAL_RCC_OscConfig+0x26c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a77      	ldr	r2, [pc, #476]	; (800401c <HAL_RCC_OscConfig+0x26c>)
 8003e40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e44:	6013      	str	r3, [r2, #0]
 8003e46:	e01d      	b.n	8003e84 <HAL_RCC_OscConfig+0xd4>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e50:	d10c      	bne.n	8003e6c <HAL_RCC_OscConfig+0xbc>
 8003e52:	4b72      	ldr	r3, [pc, #456]	; (800401c <HAL_RCC_OscConfig+0x26c>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a71      	ldr	r2, [pc, #452]	; (800401c <HAL_RCC_OscConfig+0x26c>)
 8003e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e5c:	6013      	str	r3, [r2, #0]
 8003e5e:	4b6f      	ldr	r3, [pc, #444]	; (800401c <HAL_RCC_OscConfig+0x26c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a6e      	ldr	r2, [pc, #440]	; (800401c <HAL_RCC_OscConfig+0x26c>)
 8003e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e68:	6013      	str	r3, [r2, #0]
 8003e6a:	e00b      	b.n	8003e84 <HAL_RCC_OscConfig+0xd4>
 8003e6c:	4b6b      	ldr	r3, [pc, #428]	; (800401c <HAL_RCC_OscConfig+0x26c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a6a      	ldr	r2, [pc, #424]	; (800401c <HAL_RCC_OscConfig+0x26c>)
 8003e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e76:	6013      	str	r3, [r2, #0]
 8003e78:	4b68      	ldr	r3, [pc, #416]	; (800401c <HAL_RCC_OscConfig+0x26c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a67      	ldr	r2, [pc, #412]	; (800401c <HAL_RCC_OscConfig+0x26c>)
 8003e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d013      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e8c:	f7fe ff7e 	bl	8002d8c <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e94:	f7fe ff7a 	bl	8002d8c <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b64      	cmp	r3, #100	; 0x64
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e1fa      	b.n	800429c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ea6:	4b5d      	ldr	r3, [pc, #372]	; (800401c <HAL_RCC_OscConfig+0x26c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d0f0      	beq.n	8003e94 <HAL_RCC_OscConfig+0xe4>
 8003eb2:	e014      	b.n	8003ede <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb4:	f7fe ff6a 	bl	8002d8c <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ebc:	f7fe ff66 	bl	8002d8c <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b64      	cmp	r3, #100	; 0x64
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e1e6      	b.n	800429c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ece:	4b53      	ldr	r3, [pc, #332]	; (800401c <HAL_RCC_OscConfig+0x26c>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1f0      	bne.n	8003ebc <HAL_RCC_OscConfig+0x10c>
 8003eda:	e000      	b.n	8003ede <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003edc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d063      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003eea:	4b4c      	ldr	r3, [pc, #304]	; (800401c <HAL_RCC_OscConfig+0x26c>)
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f003 030c 	and.w	r3, r3, #12
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00b      	beq.n	8003f0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ef6:	4b49      	ldr	r3, [pc, #292]	; (800401c <HAL_RCC_OscConfig+0x26c>)
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f003 030c 	and.w	r3, r3, #12
 8003efe:	2b08      	cmp	r3, #8
 8003f00:	d11c      	bne.n	8003f3c <HAL_RCC_OscConfig+0x18c>
 8003f02:	4b46      	ldr	r3, [pc, #280]	; (800401c <HAL_RCC_OscConfig+0x26c>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d116      	bne.n	8003f3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f0e:	4b43      	ldr	r3, [pc, #268]	; (800401c <HAL_RCC_OscConfig+0x26c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d005      	beq.n	8003f26 <HAL_RCC_OscConfig+0x176>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d001      	beq.n	8003f26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e1ba      	b.n	800429c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f26:	4b3d      	ldr	r3, [pc, #244]	; (800401c <HAL_RCC_OscConfig+0x26c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	4939      	ldr	r1, [pc, #228]	; (800401c <HAL_RCC_OscConfig+0x26c>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f3a:	e03a      	b.n	8003fb2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d020      	beq.n	8003f86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f44:	4b36      	ldr	r3, [pc, #216]	; (8004020 <HAL_RCC_OscConfig+0x270>)
 8003f46:	2201      	movs	r2, #1
 8003f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4a:	f7fe ff1f 	bl	8002d8c <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f50:	e008      	b.n	8003f64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f52:	f7fe ff1b 	bl	8002d8c <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e19b      	b.n	800429c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f64:	4b2d      	ldr	r3, [pc, #180]	; (800401c <HAL_RCC_OscConfig+0x26c>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0f0      	beq.n	8003f52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f70:	4b2a      	ldr	r3, [pc, #168]	; (800401c <HAL_RCC_OscConfig+0x26c>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	00db      	lsls	r3, r3, #3
 8003f7e:	4927      	ldr	r1, [pc, #156]	; (800401c <HAL_RCC_OscConfig+0x26c>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	600b      	str	r3, [r1, #0]
 8003f84:	e015      	b.n	8003fb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f86:	4b26      	ldr	r3, [pc, #152]	; (8004020 <HAL_RCC_OscConfig+0x270>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f8c:	f7fe fefe 	bl	8002d8c <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f94:	f7fe fefa 	bl	8002d8c <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e17a      	b.n	800429c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fa6:	4b1d      	ldr	r3, [pc, #116]	; (800401c <HAL_RCC_OscConfig+0x26c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1f0      	bne.n	8003f94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0308 	and.w	r3, r3, #8
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d03a      	beq.n	8004034 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d019      	beq.n	8003ffa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fc6:	4b17      	ldr	r3, [pc, #92]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003fc8:	2201      	movs	r2, #1
 8003fca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fcc:	f7fe fede 	bl	8002d8c <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fd4:	f7fe feda 	bl	8002d8c <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e15a      	b.n	800429c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fe6:	4b0d      	ldr	r3, [pc, #52]	; (800401c <HAL_RCC_OscConfig+0x26c>)
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0f0      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003ff2:	2001      	movs	r0, #1
 8003ff4:	f000 fafc 	bl	80045f0 <RCC_Delay>
 8003ff8:	e01c      	b.n	8004034 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ffa:	4b0a      	ldr	r3, [pc, #40]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004000:	f7fe fec4 	bl	8002d8c <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004006:	e00f      	b.n	8004028 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004008:	f7fe fec0 	bl	8002d8c <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b02      	cmp	r3, #2
 8004014:	d908      	bls.n	8004028 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e140      	b.n	800429c <HAL_RCC_OscConfig+0x4ec>
 800401a:	bf00      	nop
 800401c:	40021000 	.word	0x40021000
 8004020:	42420000 	.word	0x42420000
 8004024:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004028:	4b9e      	ldr	r3, [pc, #632]	; (80042a4 <HAL_RCC_OscConfig+0x4f4>)
 800402a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1e9      	bne.n	8004008 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0304 	and.w	r3, r3, #4
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 80a6 	beq.w	800418e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004042:	2300      	movs	r3, #0
 8004044:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004046:	4b97      	ldr	r3, [pc, #604]	; (80042a4 <HAL_RCC_OscConfig+0x4f4>)
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10d      	bne.n	800406e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004052:	4b94      	ldr	r3, [pc, #592]	; (80042a4 <HAL_RCC_OscConfig+0x4f4>)
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	4a93      	ldr	r2, [pc, #588]	; (80042a4 <HAL_RCC_OscConfig+0x4f4>)
 8004058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800405c:	61d3      	str	r3, [r2, #28]
 800405e:	4b91      	ldr	r3, [pc, #580]	; (80042a4 <HAL_RCC_OscConfig+0x4f4>)
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004066:	60bb      	str	r3, [r7, #8]
 8004068:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800406a:	2301      	movs	r3, #1
 800406c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800406e:	4b8e      	ldr	r3, [pc, #568]	; (80042a8 <HAL_RCC_OscConfig+0x4f8>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004076:	2b00      	cmp	r3, #0
 8004078:	d118      	bne.n	80040ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800407a:	4b8b      	ldr	r3, [pc, #556]	; (80042a8 <HAL_RCC_OscConfig+0x4f8>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a8a      	ldr	r2, [pc, #552]	; (80042a8 <HAL_RCC_OscConfig+0x4f8>)
 8004080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004084:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004086:	f7fe fe81 	bl	8002d8c <HAL_GetTick>
 800408a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800408c:	e008      	b.n	80040a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800408e:	f7fe fe7d 	bl	8002d8c <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	2b64      	cmp	r3, #100	; 0x64
 800409a:	d901      	bls.n	80040a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e0fd      	b.n	800429c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a0:	4b81      	ldr	r3, [pc, #516]	; (80042a8 <HAL_RCC_OscConfig+0x4f8>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d0f0      	beq.n	800408e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d106      	bne.n	80040c2 <HAL_RCC_OscConfig+0x312>
 80040b4:	4b7b      	ldr	r3, [pc, #492]	; (80042a4 <HAL_RCC_OscConfig+0x4f4>)
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	4a7a      	ldr	r2, [pc, #488]	; (80042a4 <HAL_RCC_OscConfig+0x4f4>)
 80040ba:	f043 0301 	orr.w	r3, r3, #1
 80040be:	6213      	str	r3, [r2, #32]
 80040c0:	e02d      	b.n	800411e <HAL_RCC_OscConfig+0x36e>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10c      	bne.n	80040e4 <HAL_RCC_OscConfig+0x334>
 80040ca:	4b76      	ldr	r3, [pc, #472]	; (80042a4 <HAL_RCC_OscConfig+0x4f4>)
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	4a75      	ldr	r2, [pc, #468]	; (80042a4 <HAL_RCC_OscConfig+0x4f4>)
 80040d0:	f023 0301 	bic.w	r3, r3, #1
 80040d4:	6213      	str	r3, [r2, #32]
 80040d6:	4b73      	ldr	r3, [pc, #460]	; (80042a4 <HAL_RCC_OscConfig+0x4f4>)
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	4a72      	ldr	r2, [pc, #456]	; (80042a4 <HAL_RCC_OscConfig+0x4f4>)
 80040dc:	f023 0304 	bic.w	r3, r3, #4
 80040e0:	6213      	str	r3, [r2, #32]
 80040e2:	e01c      	b.n	800411e <HAL_RCC_OscConfig+0x36e>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	2b05      	cmp	r3, #5
 80040ea:	d10c      	bne.n	8004106 <HAL_RCC_OscConfig+0x356>
 80040ec:	4b6d      	ldr	r3, [pc, #436]	; (80042a4 <HAL_RCC_OscConfig+0x4f4>)
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	4a6c      	ldr	r2, [pc, #432]	; (80042a4 <HAL_RCC_OscConfig+0x4f4>)
 80040f2:	f043 0304 	orr.w	r3, r3, #4
 80040f6:	6213      	str	r3, [r2, #32]
 80040f8:	4b6a      	ldr	r3, [pc, #424]	; (80042a4 <HAL_RCC_OscConfig+0x4f4>)
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	4a69      	ldr	r2, [pc, #420]	; (80042a4 <HAL_RCC_OscConfig+0x4f4>)
 80040fe:	f043 0301 	orr.w	r3, r3, #1
 8004102:	6213      	str	r3, [r2, #32]
 8004104:	e00b      	b.n	800411e <HAL_RCC_OscConfig+0x36e>
 8004106:	4b67      	ldr	r3, [pc, #412]	; (80042a4 <HAL_RCC_OscConfig+0x4f4>)
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	4a66      	ldr	r2, [pc, #408]	; (80042a4 <HAL_RCC_OscConfig+0x4f4>)
 800410c:	f023 0301 	bic.w	r3, r3, #1
 8004110:	6213      	str	r3, [r2, #32]
 8004112:	4b64      	ldr	r3, [pc, #400]	; (80042a4 <HAL_RCC_OscConfig+0x4f4>)
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	4a63      	ldr	r2, [pc, #396]	; (80042a4 <HAL_RCC_OscConfig+0x4f4>)
 8004118:	f023 0304 	bic.w	r3, r3, #4
 800411c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d015      	beq.n	8004152 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004126:	f7fe fe31 	bl	8002d8c <HAL_GetTick>
 800412a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800412c:	e00a      	b.n	8004144 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800412e:	f7fe fe2d 	bl	8002d8c <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	f241 3288 	movw	r2, #5000	; 0x1388
 800413c:	4293      	cmp	r3, r2
 800413e:	d901      	bls.n	8004144 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e0ab      	b.n	800429c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004144:	4b57      	ldr	r3, [pc, #348]	; (80042a4 <HAL_RCC_OscConfig+0x4f4>)
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d0ee      	beq.n	800412e <HAL_RCC_OscConfig+0x37e>
 8004150:	e014      	b.n	800417c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004152:	f7fe fe1b 	bl	8002d8c <HAL_GetTick>
 8004156:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004158:	e00a      	b.n	8004170 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800415a:	f7fe fe17 	bl	8002d8c <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	f241 3288 	movw	r2, #5000	; 0x1388
 8004168:	4293      	cmp	r3, r2
 800416a:	d901      	bls.n	8004170 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e095      	b.n	800429c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004170:	4b4c      	ldr	r3, [pc, #304]	; (80042a4 <HAL_RCC_OscConfig+0x4f4>)
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1ee      	bne.n	800415a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800417c:	7dfb      	ldrb	r3, [r7, #23]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d105      	bne.n	800418e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004182:	4b48      	ldr	r3, [pc, #288]	; (80042a4 <HAL_RCC_OscConfig+0x4f4>)
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	4a47      	ldr	r2, [pc, #284]	; (80042a4 <HAL_RCC_OscConfig+0x4f4>)
 8004188:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800418c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 8081 	beq.w	800429a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004198:	4b42      	ldr	r3, [pc, #264]	; (80042a4 <HAL_RCC_OscConfig+0x4f4>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f003 030c 	and.w	r3, r3, #12
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d061      	beq.n	8004268 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	69db      	ldr	r3, [r3, #28]
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d146      	bne.n	800423a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ac:	4b3f      	ldr	r3, [pc, #252]	; (80042ac <HAL_RCC_OscConfig+0x4fc>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b2:	f7fe fdeb 	bl	8002d8c <HAL_GetTick>
 80041b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041b8:	e008      	b.n	80041cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ba:	f7fe fde7 	bl	8002d8c <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e067      	b.n	800429c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041cc:	4b35      	ldr	r3, [pc, #212]	; (80042a4 <HAL_RCC_OscConfig+0x4f4>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1f0      	bne.n	80041ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041e0:	d108      	bne.n	80041f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80041e2:	4b30      	ldr	r3, [pc, #192]	; (80042a4 <HAL_RCC_OscConfig+0x4f4>)
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	492d      	ldr	r1, [pc, #180]	; (80042a4 <HAL_RCC_OscConfig+0x4f4>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041f4:	4b2b      	ldr	r3, [pc, #172]	; (80042a4 <HAL_RCC_OscConfig+0x4f4>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a19      	ldr	r1, [r3, #32]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004204:	430b      	orrs	r3, r1
 8004206:	4927      	ldr	r1, [pc, #156]	; (80042a4 <HAL_RCC_OscConfig+0x4f4>)
 8004208:	4313      	orrs	r3, r2
 800420a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800420c:	4b27      	ldr	r3, [pc, #156]	; (80042ac <HAL_RCC_OscConfig+0x4fc>)
 800420e:	2201      	movs	r2, #1
 8004210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004212:	f7fe fdbb 	bl	8002d8c <HAL_GetTick>
 8004216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004218:	e008      	b.n	800422c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800421a:	f7fe fdb7 	bl	8002d8c <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d901      	bls.n	800422c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e037      	b.n	800429c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800422c:	4b1d      	ldr	r3, [pc, #116]	; (80042a4 <HAL_RCC_OscConfig+0x4f4>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0f0      	beq.n	800421a <HAL_RCC_OscConfig+0x46a>
 8004238:	e02f      	b.n	800429a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800423a:	4b1c      	ldr	r3, [pc, #112]	; (80042ac <HAL_RCC_OscConfig+0x4fc>)
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004240:	f7fe fda4 	bl	8002d8c <HAL_GetTick>
 8004244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004246:	e008      	b.n	800425a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004248:	f7fe fda0 	bl	8002d8c <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b02      	cmp	r3, #2
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e020      	b.n	800429c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800425a:	4b12      	ldr	r3, [pc, #72]	; (80042a4 <HAL_RCC_OscConfig+0x4f4>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1f0      	bne.n	8004248 <HAL_RCC_OscConfig+0x498>
 8004266:	e018      	b.n	800429a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	69db      	ldr	r3, [r3, #28]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d101      	bne.n	8004274 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e013      	b.n	800429c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004274:	4b0b      	ldr	r3, [pc, #44]	; (80042a4 <HAL_RCC_OscConfig+0x4f4>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	429a      	cmp	r2, r3
 8004286:	d106      	bne.n	8004296 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004292:	429a      	cmp	r2, r3
 8004294:	d001      	beq.n	800429a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e000      	b.n	800429c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3718      	adds	r7, #24
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	40021000 	.word	0x40021000
 80042a8:	40007000 	.word	0x40007000
 80042ac:	42420060 	.word	0x42420060

080042b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e0d0      	b.n	8004466 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042c4:	4b6a      	ldr	r3, [pc, #424]	; (8004470 <HAL_RCC_ClockConfig+0x1c0>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d910      	bls.n	80042f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042d2:	4b67      	ldr	r3, [pc, #412]	; (8004470 <HAL_RCC_ClockConfig+0x1c0>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f023 0207 	bic.w	r2, r3, #7
 80042da:	4965      	ldr	r1, [pc, #404]	; (8004470 <HAL_RCC_ClockConfig+0x1c0>)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	4313      	orrs	r3, r2
 80042e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042e2:	4b63      	ldr	r3, [pc, #396]	; (8004470 <HAL_RCC_ClockConfig+0x1c0>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0307 	and.w	r3, r3, #7
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d001      	beq.n	80042f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e0b8      	b.n	8004466 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d020      	beq.n	8004342 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b00      	cmp	r3, #0
 800430a:	d005      	beq.n	8004318 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800430c:	4b59      	ldr	r3, [pc, #356]	; (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	4a58      	ldr	r2, [pc, #352]	; (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 8004312:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004316:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0308 	and.w	r3, r3, #8
 8004320:	2b00      	cmp	r3, #0
 8004322:	d005      	beq.n	8004330 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004324:	4b53      	ldr	r3, [pc, #332]	; (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	4a52      	ldr	r2, [pc, #328]	; (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 800432a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800432e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004330:	4b50      	ldr	r3, [pc, #320]	; (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	494d      	ldr	r1, [pc, #308]	; (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 800433e:	4313      	orrs	r3, r2
 8004340:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d040      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d107      	bne.n	8004366 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004356:	4b47      	ldr	r3, [pc, #284]	; (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d115      	bne.n	800438e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e07f      	b.n	8004466 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2b02      	cmp	r3, #2
 800436c:	d107      	bne.n	800437e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800436e:	4b41      	ldr	r3, [pc, #260]	; (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d109      	bne.n	800438e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e073      	b.n	8004466 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800437e:	4b3d      	ldr	r3, [pc, #244]	; (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e06b      	b.n	8004466 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800438e:	4b39      	ldr	r3, [pc, #228]	; (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f023 0203 	bic.w	r2, r3, #3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	4936      	ldr	r1, [pc, #216]	; (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 800439c:	4313      	orrs	r3, r2
 800439e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043a0:	f7fe fcf4 	bl	8002d8c <HAL_GetTick>
 80043a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043a6:	e00a      	b.n	80043be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043a8:	f7fe fcf0 	bl	8002d8c <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e053      	b.n	8004466 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043be:	4b2d      	ldr	r3, [pc, #180]	; (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f003 020c 	and.w	r2, r3, #12
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d1eb      	bne.n	80043a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043d0:	4b27      	ldr	r3, [pc, #156]	; (8004470 <HAL_RCC_ClockConfig+0x1c0>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d210      	bcs.n	8004400 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043de:	4b24      	ldr	r3, [pc, #144]	; (8004470 <HAL_RCC_ClockConfig+0x1c0>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f023 0207 	bic.w	r2, r3, #7
 80043e6:	4922      	ldr	r1, [pc, #136]	; (8004470 <HAL_RCC_ClockConfig+0x1c0>)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ee:	4b20      	ldr	r3, [pc, #128]	; (8004470 <HAL_RCC_ClockConfig+0x1c0>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0307 	and.w	r3, r3, #7
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d001      	beq.n	8004400 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e032      	b.n	8004466 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	2b00      	cmp	r3, #0
 800440a:	d008      	beq.n	800441e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800440c:	4b19      	ldr	r3, [pc, #100]	; (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	4916      	ldr	r1, [pc, #88]	; (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 800441a:	4313      	orrs	r3, r2
 800441c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0308 	and.w	r3, r3, #8
 8004426:	2b00      	cmp	r3, #0
 8004428:	d009      	beq.n	800443e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800442a:	4b12      	ldr	r3, [pc, #72]	; (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	490e      	ldr	r1, [pc, #56]	; (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 800443a:	4313      	orrs	r3, r2
 800443c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800443e:	f000 f821 	bl	8004484 <HAL_RCC_GetSysClockFreq>
 8004442:	4602      	mov	r2, r0
 8004444:	4b0b      	ldr	r3, [pc, #44]	; (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	091b      	lsrs	r3, r3, #4
 800444a:	f003 030f 	and.w	r3, r3, #15
 800444e:	490a      	ldr	r1, [pc, #40]	; (8004478 <HAL_RCC_ClockConfig+0x1c8>)
 8004450:	5ccb      	ldrb	r3, [r1, r3]
 8004452:	fa22 f303 	lsr.w	r3, r2, r3
 8004456:	4a09      	ldr	r2, [pc, #36]	; (800447c <HAL_RCC_ClockConfig+0x1cc>)
 8004458:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800445a:	4b09      	ldr	r3, [pc, #36]	; (8004480 <HAL_RCC_ClockConfig+0x1d0>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f7fe fb7e 	bl	8002b60 <HAL_InitTick>

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	40022000 	.word	0x40022000
 8004474:	40021000 	.word	0x40021000
 8004478:	0800dae8 	.word	0x0800dae8
 800447c:	20000014 	.word	0x20000014
 8004480:	20000018 	.word	0x20000018

08004484 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004484:	b480      	push	{r7}
 8004486:	b087      	sub	sp, #28
 8004488:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800448a:	2300      	movs	r3, #0
 800448c:	60fb      	str	r3, [r7, #12]
 800448e:	2300      	movs	r3, #0
 8004490:	60bb      	str	r3, [r7, #8]
 8004492:	2300      	movs	r3, #0
 8004494:	617b      	str	r3, [r7, #20]
 8004496:	2300      	movs	r3, #0
 8004498:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800449a:	2300      	movs	r3, #0
 800449c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800449e:	4b1e      	ldr	r3, [pc, #120]	; (8004518 <HAL_RCC_GetSysClockFreq+0x94>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f003 030c 	and.w	r3, r3, #12
 80044aa:	2b04      	cmp	r3, #4
 80044ac:	d002      	beq.n	80044b4 <HAL_RCC_GetSysClockFreq+0x30>
 80044ae:	2b08      	cmp	r3, #8
 80044b0:	d003      	beq.n	80044ba <HAL_RCC_GetSysClockFreq+0x36>
 80044b2:	e027      	b.n	8004504 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044b4:	4b19      	ldr	r3, [pc, #100]	; (800451c <HAL_RCC_GetSysClockFreq+0x98>)
 80044b6:	613b      	str	r3, [r7, #16]
      break;
 80044b8:	e027      	b.n	800450a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	0c9b      	lsrs	r3, r3, #18
 80044be:	f003 030f 	and.w	r3, r3, #15
 80044c2:	4a17      	ldr	r2, [pc, #92]	; (8004520 <HAL_RCC_GetSysClockFreq+0x9c>)
 80044c4:	5cd3      	ldrb	r3, [r2, r3]
 80044c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d010      	beq.n	80044f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80044d2:	4b11      	ldr	r3, [pc, #68]	; (8004518 <HAL_RCC_GetSysClockFreq+0x94>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	0c5b      	lsrs	r3, r3, #17
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	4a11      	ldr	r2, [pc, #68]	; (8004524 <HAL_RCC_GetSysClockFreq+0xa0>)
 80044de:	5cd3      	ldrb	r3, [r2, r3]
 80044e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a0d      	ldr	r2, [pc, #52]	; (800451c <HAL_RCC_GetSysClockFreq+0x98>)
 80044e6:	fb02 f203 	mul.w	r2, r2, r3
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f0:	617b      	str	r3, [r7, #20]
 80044f2:	e004      	b.n	80044fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a0c      	ldr	r2, [pc, #48]	; (8004528 <HAL_RCC_GetSysClockFreq+0xa4>)
 80044f8:	fb02 f303 	mul.w	r3, r2, r3
 80044fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	613b      	str	r3, [r7, #16]
      break;
 8004502:	e002      	b.n	800450a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004504:	4b05      	ldr	r3, [pc, #20]	; (800451c <HAL_RCC_GetSysClockFreq+0x98>)
 8004506:	613b      	str	r3, [r7, #16]
      break;
 8004508:	bf00      	nop
    }
  }
  return sysclockfreq;
 800450a:	693b      	ldr	r3, [r7, #16]
}
 800450c:	4618      	mov	r0, r3
 800450e:	371c      	adds	r7, #28
 8004510:	46bd      	mov	sp, r7
 8004512:	bc80      	pop	{r7}
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	40021000 	.word	0x40021000
 800451c:	007a1200 	.word	0x007a1200
 8004520:	0800db00 	.word	0x0800db00
 8004524:	0800db10 	.word	0x0800db10
 8004528:	003d0900 	.word	0x003d0900

0800452c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004530:	4b02      	ldr	r3, [pc, #8]	; (800453c <HAL_RCC_GetHCLKFreq+0x10>)
 8004532:	681b      	ldr	r3, [r3, #0]
}
 8004534:	4618      	mov	r0, r3
 8004536:	46bd      	mov	sp, r7
 8004538:	bc80      	pop	{r7}
 800453a:	4770      	bx	lr
 800453c:	20000014 	.word	0x20000014

08004540 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004544:	f7ff fff2 	bl	800452c <HAL_RCC_GetHCLKFreq>
 8004548:	4602      	mov	r2, r0
 800454a:	4b05      	ldr	r3, [pc, #20]	; (8004560 <HAL_RCC_GetPCLK1Freq+0x20>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	0a1b      	lsrs	r3, r3, #8
 8004550:	f003 0307 	and.w	r3, r3, #7
 8004554:	4903      	ldr	r1, [pc, #12]	; (8004564 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004556:	5ccb      	ldrb	r3, [r1, r3]
 8004558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800455c:	4618      	mov	r0, r3
 800455e:	bd80      	pop	{r7, pc}
 8004560:	40021000 	.word	0x40021000
 8004564:	0800daf8 	.word	0x0800daf8

08004568 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800456c:	f7ff ffde 	bl	800452c <HAL_RCC_GetHCLKFreq>
 8004570:	4602      	mov	r2, r0
 8004572:	4b05      	ldr	r3, [pc, #20]	; (8004588 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	0adb      	lsrs	r3, r3, #11
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	4903      	ldr	r1, [pc, #12]	; (800458c <HAL_RCC_GetPCLK2Freq+0x24>)
 800457e:	5ccb      	ldrb	r3, [r1, r3]
 8004580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004584:	4618      	mov	r0, r3
 8004586:	bd80      	pop	{r7, pc}
 8004588:	40021000 	.word	0x40021000
 800458c:	0800daf8 	.word	0x0800daf8

08004590 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	220f      	movs	r2, #15
 800459e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80045a0:	4b11      	ldr	r3, [pc, #68]	; (80045e8 <HAL_RCC_GetClockConfig+0x58>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f003 0203 	and.w	r2, r3, #3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80045ac:	4b0e      	ldr	r3, [pc, #56]	; (80045e8 <HAL_RCC_GetClockConfig+0x58>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80045b8:	4b0b      	ldr	r3, [pc, #44]	; (80045e8 <HAL_RCC_GetClockConfig+0x58>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80045c4:	4b08      	ldr	r3, [pc, #32]	; (80045e8 <HAL_RCC_GetClockConfig+0x58>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	08db      	lsrs	r3, r3, #3
 80045ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80045d2:	4b06      	ldr	r3, [pc, #24]	; (80045ec <HAL_RCC_GetClockConfig+0x5c>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0207 	and.w	r2, r3, #7
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80045de:	bf00      	nop
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bc80      	pop	{r7}
 80045e6:	4770      	bx	lr
 80045e8:	40021000 	.word	0x40021000
 80045ec:	40022000 	.word	0x40022000

080045f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80045f8:	4b0a      	ldr	r3, [pc, #40]	; (8004624 <RCC_Delay+0x34>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a0a      	ldr	r2, [pc, #40]	; (8004628 <RCC_Delay+0x38>)
 80045fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004602:	0a5b      	lsrs	r3, r3, #9
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	fb02 f303 	mul.w	r3, r2, r3
 800460a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800460c:	bf00      	nop
  }
  while (Delay --);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	1e5a      	subs	r2, r3, #1
 8004612:	60fa      	str	r2, [r7, #12]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1f9      	bne.n	800460c <RCC_Delay+0x1c>
}
 8004618:	bf00      	nop
 800461a:	bf00      	nop
 800461c:	3714      	adds	r7, #20
 800461e:	46bd      	mov	sp, r7
 8004620:	bc80      	pop	{r7}
 8004622:	4770      	bx	lr
 8004624:	20000014 	.word	0x20000014
 8004628:	10624dd3 	.word	0x10624dd3

0800462c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e076      	b.n	800472c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	2b00      	cmp	r3, #0
 8004644:	d108      	bne.n	8004658 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800464e:	d009      	beq.n	8004664 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	61da      	str	r2, [r3, #28]
 8004656:	e005      	b.n	8004664 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d106      	bne.n	8004684 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7fe f93a 	bl	80028f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2202      	movs	r2, #2
 8004688:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800469a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80046ac:	431a      	orrs	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	431a      	orrs	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	431a      	orrs	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046d4:	431a      	orrs	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046de:	431a      	orrs	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a1b      	ldr	r3, [r3, #32]
 80046e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046e8:	ea42 0103 	orr.w	r1, r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	430a      	orrs	r2, r1
 80046fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	0c1a      	lsrs	r2, r3, #16
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f002 0204 	and.w	r2, r2, #4
 800470a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	69da      	ldr	r2, [r3, #28]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800471a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3708      	adds	r7, #8
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b088      	sub	sp, #32
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	603b      	str	r3, [r7, #0]
 8004740:	4613      	mov	r3, r2
 8004742:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004744:	2300      	movs	r3, #0
 8004746:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800474e:	2b01      	cmp	r3, #1
 8004750:	d101      	bne.n	8004756 <HAL_SPI_Transmit+0x22>
 8004752:	2302      	movs	r3, #2
 8004754:	e12d      	b.n	80049b2 <HAL_SPI_Transmit+0x27e>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800475e:	f7fe fb15 	bl	8002d8c <HAL_GetTick>
 8004762:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004764:	88fb      	ldrh	r3, [r7, #6]
 8004766:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b01      	cmp	r3, #1
 8004772:	d002      	beq.n	800477a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004774:	2302      	movs	r3, #2
 8004776:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004778:	e116      	b.n	80049a8 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d002      	beq.n	8004786 <HAL_SPI_Transmit+0x52>
 8004780:	88fb      	ldrh	r3, [r7, #6]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d102      	bne.n	800478c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	77fb      	strb	r3, [r7, #31]
    goto error;
 800478a:	e10d      	b.n	80049a8 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2203      	movs	r2, #3
 8004790:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	88fa      	ldrh	r2, [r7, #6]
 80047a4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	88fa      	ldrh	r2, [r7, #6]
 80047aa:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047d2:	d10f      	bne.n	80047f4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047f2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fe:	2b40      	cmp	r3, #64	; 0x40
 8004800:	d007      	beq.n	8004812 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004810:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800481a:	d14f      	bne.n	80048bc <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d002      	beq.n	800482a <HAL_SPI_Transmit+0xf6>
 8004824:	8afb      	ldrh	r3, [r7, #22]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d142      	bne.n	80048b0 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482e:	881a      	ldrh	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483a:	1c9a      	adds	r2, r3, #2
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004844:	b29b      	uxth	r3, r3
 8004846:	3b01      	subs	r3, #1
 8004848:	b29a      	uxth	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800484e:	e02f      	b.n	80048b0 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b02      	cmp	r3, #2
 800485c:	d112      	bne.n	8004884 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004862:	881a      	ldrh	r2, [r3, #0]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486e:	1c9a      	adds	r2, r3, #2
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004878:	b29b      	uxth	r3, r3
 800487a:	3b01      	subs	r3, #1
 800487c:	b29a      	uxth	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	86da      	strh	r2, [r3, #54]	; 0x36
 8004882:	e015      	b.n	80048b0 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004884:	f7fe fa82 	bl	8002d8c <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	683a      	ldr	r2, [r7, #0]
 8004890:	429a      	cmp	r2, r3
 8004892:	d803      	bhi.n	800489c <HAL_SPI_Transmit+0x168>
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800489a:	d102      	bne.n	80048a2 <HAL_SPI_Transmit+0x16e>
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d106      	bne.n	80048b0 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80048ae:	e07b      	b.n	80049a8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1ca      	bne.n	8004850 <HAL_SPI_Transmit+0x11c>
 80048ba:	e050      	b.n	800495e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d002      	beq.n	80048ca <HAL_SPI_Transmit+0x196>
 80048c4:	8afb      	ldrh	r3, [r7, #22]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d144      	bne.n	8004954 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	330c      	adds	r3, #12
 80048d4:	7812      	ldrb	r2, [r2, #0]
 80048d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048dc:	1c5a      	adds	r2, r3, #1
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	3b01      	subs	r3, #1
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80048f0:	e030      	b.n	8004954 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f003 0302 	and.w	r3, r3, #2
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d113      	bne.n	8004928 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	330c      	adds	r3, #12
 800490a:	7812      	ldrb	r2, [r2, #0]
 800490c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004912:	1c5a      	adds	r2, r3, #1
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800491c:	b29b      	uxth	r3, r3
 800491e:	3b01      	subs	r3, #1
 8004920:	b29a      	uxth	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	86da      	strh	r2, [r3, #54]	; 0x36
 8004926:	e015      	b.n	8004954 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004928:	f7fe fa30 	bl	8002d8c <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	429a      	cmp	r2, r3
 8004936:	d803      	bhi.n	8004940 <HAL_SPI_Transmit+0x20c>
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493e:	d102      	bne.n	8004946 <HAL_SPI_Transmit+0x212>
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d106      	bne.n	8004954 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004952:	e029      	b.n	80049a8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004958:	b29b      	uxth	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1c9      	bne.n	80048f2 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800495e:	69ba      	ldr	r2, [r7, #24]
 8004960:	6839      	ldr	r1, [r7, #0]
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f000 fa6e 	bl	8004e44 <SPI_EndRxTxTransaction>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d002      	beq.n	8004974 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2220      	movs	r2, #32
 8004972:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10a      	bne.n	8004992 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800497c:	2300      	movs	r3, #0
 800497e:	613b      	str	r3, [r7, #16]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	613b      	str	r3, [r7, #16]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	613b      	str	r3, [r7, #16]
 8004990:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004996:	2b00      	cmp	r3, #0
 8004998:	d002      	beq.n	80049a0 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	77fb      	strb	r3, [r7, #31]
 800499e:	e003      	b.n	80049a8 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80049b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3720      	adds	r7, #32
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b08c      	sub	sp, #48	; 0x30
 80049be:	af00      	add	r7, sp, #0
 80049c0:	60f8      	str	r0, [r7, #12]
 80049c2:	60b9      	str	r1, [r7, #8]
 80049c4:	607a      	str	r2, [r7, #4]
 80049c6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80049c8:	2301      	movs	r3, #1
 80049ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80049cc:	2300      	movs	r3, #0
 80049ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d101      	bne.n	80049e0 <HAL_SPI_TransmitReceive+0x26>
 80049dc:	2302      	movs	r3, #2
 80049de:	e198      	b.n	8004d12 <HAL_SPI_TransmitReceive+0x358>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049e8:	f7fe f9d0 	bl	8002d8c <HAL_GetTick>
 80049ec:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80049fe:	887b      	ldrh	r3, [r7, #2]
 8004a00:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d00f      	beq.n	8004a2a <HAL_SPI_TransmitReceive+0x70>
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a10:	d107      	bne.n	8004a22 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d103      	bne.n	8004a22 <HAL_SPI_TransmitReceive+0x68>
 8004a1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a1e:	2b04      	cmp	r3, #4
 8004a20:	d003      	beq.n	8004a2a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004a22:	2302      	movs	r3, #2
 8004a24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004a28:	e16d      	b.n	8004d06 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d005      	beq.n	8004a3c <HAL_SPI_TransmitReceive+0x82>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d002      	beq.n	8004a3c <HAL_SPI_TransmitReceive+0x82>
 8004a36:	887b      	ldrh	r3, [r7, #2]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d103      	bne.n	8004a44 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004a42:	e160      	b.n	8004d06 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b04      	cmp	r3, #4
 8004a4e:	d003      	beq.n	8004a58 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2205      	movs	r2, #5
 8004a54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	887a      	ldrh	r2, [r7, #2]
 8004a68:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	887a      	ldrh	r2, [r7, #2]
 8004a6e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	887a      	ldrh	r2, [r7, #2]
 8004a7a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	887a      	ldrh	r2, [r7, #2]
 8004a80:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a98:	2b40      	cmp	r3, #64	; 0x40
 8004a9a:	d007      	beq.n	8004aac <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004aaa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ab4:	d17c      	bne.n	8004bb0 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d002      	beq.n	8004ac4 <HAL_SPI_TransmitReceive+0x10a>
 8004abe:	8b7b      	ldrh	r3, [r7, #26]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d16a      	bne.n	8004b9a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac8:	881a      	ldrh	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad4:	1c9a      	adds	r2, r3, #2
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ae8:	e057      	b.n	8004b9a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d11b      	bne.n	8004b30 <HAL_SPI_TransmitReceive+0x176>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d016      	beq.n	8004b30 <HAL_SPI_TransmitReceive+0x176>
 8004b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d113      	bne.n	8004b30 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0c:	881a      	ldrh	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b18:	1c9a      	adds	r2, r3, #2
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	3b01      	subs	r3, #1
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d119      	bne.n	8004b72 <HAL_SPI_TransmitReceive+0x1b8>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d014      	beq.n	8004b72 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b52:	b292      	uxth	r2, r2
 8004b54:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5a:	1c9a      	adds	r2, r3, #2
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	3b01      	subs	r3, #1
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b72:	f7fe f90b 	bl	8002d8c <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d80b      	bhi.n	8004b9a <HAL_SPI_TransmitReceive+0x1e0>
 8004b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b88:	d007      	beq.n	8004b9a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004b98:	e0b5      	b.n	8004d06 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1a2      	bne.n	8004aea <HAL_SPI_TransmitReceive+0x130>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d19d      	bne.n	8004aea <HAL_SPI_TransmitReceive+0x130>
 8004bae:	e080      	b.n	8004cb2 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d002      	beq.n	8004bbe <HAL_SPI_TransmitReceive+0x204>
 8004bb8:	8b7b      	ldrh	r3, [r7, #26]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d16f      	bne.n	8004c9e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	330c      	adds	r3, #12
 8004bc8:	7812      	ldrb	r2, [r2, #0]
 8004bca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd0:	1c5a      	adds	r2, r3, #1
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004be4:	e05b      	b.n	8004c9e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d11c      	bne.n	8004c2e <HAL_SPI_TransmitReceive+0x274>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d017      	beq.n	8004c2e <HAL_SPI_TransmitReceive+0x274>
 8004bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d114      	bne.n	8004c2e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	330c      	adds	r3, #12
 8004c0e:	7812      	ldrb	r2, [r2, #0]
 8004c10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c16:	1c5a      	adds	r2, r3, #1
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	3b01      	subs	r3, #1
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d119      	bne.n	8004c70 <HAL_SPI_TransmitReceive+0x2b6>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d014      	beq.n	8004c70 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68da      	ldr	r2, [r3, #12]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c50:	b2d2      	uxtb	r2, r2
 8004c52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c58:	1c5a      	adds	r2, r3, #1
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	3b01      	subs	r3, #1
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c70:	f7fe f88c 	bl	8002d8c <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d803      	bhi.n	8004c88 <HAL_SPI_TransmitReceive+0x2ce>
 8004c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c86:	d102      	bne.n	8004c8e <HAL_SPI_TransmitReceive+0x2d4>
 8004c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d107      	bne.n	8004c9e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004c9c:	e033      	b.n	8004d06 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d19e      	bne.n	8004be6 <HAL_SPI_TransmitReceive+0x22c>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d199      	bne.n	8004be6 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cb4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f000 f8c4 	bl	8004e44 <SPI_EndRxTxTransaction>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d006      	beq.n	8004cd0 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004cce:	e01a      	b.n	8004d06 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d10a      	bne.n	8004cee <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cd8:	2300      	movs	r3, #0
 8004cda:	617b      	str	r3, [r7, #20]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	617b      	str	r3, [r7, #20]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	617b      	str	r3, [r7, #20]
 8004cec:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cfc:	e003      	b.n	8004d06 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3730      	adds	r7, #48	; 0x30
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b083      	sub	sp, #12
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d28:	b2db      	uxtb	r3, r3
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	370c      	adds	r7, #12
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bc80      	pop	{r7}
 8004d32:	4770      	bx	lr

08004d34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b088      	sub	sp, #32
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	603b      	str	r3, [r7, #0]
 8004d40:	4613      	mov	r3, r2
 8004d42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d44:	f7fe f822 	bl	8002d8c <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4c:	1a9b      	subs	r3, r3, r2
 8004d4e:	683a      	ldr	r2, [r7, #0]
 8004d50:	4413      	add	r3, r2
 8004d52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d54:	f7fe f81a 	bl	8002d8c <HAL_GetTick>
 8004d58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d5a:	4b39      	ldr	r3, [pc, #228]	; (8004e40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	015b      	lsls	r3, r3, #5
 8004d60:	0d1b      	lsrs	r3, r3, #20
 8004d62:	69fa      	ldr	r2, [r7, #28]
 8004d64:	fb02 f303 	mul.w	r3, r2, r3
 8004d68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d6a:	e054      	b.n	8004e16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d72:	d050      	beq.n	8004e16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d74:	f7fe f80a 	bl	8002d8c <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	69fa      	ldr	r2, [r7, #28]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d902      	bls.n	8004d8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d13d      	bne.n	8004e06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004da2:	d111      	bne.n	8004dc8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dac:	d004      	beq.n	8004db8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004db6:	d107      	bne.n	8004dc8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dc6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dd0:	d10f      	bne.n	8004df2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004df0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e017      	b.n	8004e36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d101      	bne.n	8004e10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	3b01      	subs	r3, #1
 8004e14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	689a      	ldr	r2, [r3, #8]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	4013      	ands	r3, r2
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	bf0c      	ite	eq
 8004e26:	2301      	moveq	r3, #1
 8004e28:	2300      	movne	r3, #0
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	79fb      	ldrb	r3, [r7, #7]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d19b      	bne.n	8004d6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3720      	adds	r7, #32
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	20000014 	.word	0x20000014

08004e44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af02      	add	r7, sp, #8
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	9300      	str	r3, [sp, #0]
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	2200      	movs	r2, #0
 8004e58:	2180      	movs	r1, #128	; 0x80
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f7ff ff6a 	bl	8004d34 <SPI_WaitFlagStateUntilTimeout>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d007      	beq.n	8004e76 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6a:	f043 0220 	orr.w	r2, r3, #32
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e000      	b.n	8004e78 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e041      	b.n	8004f16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d106      	bne.n	8004eac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7fd fd70 	bl	800298c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2202      	movs	r2, #2
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	3304      	adds	r3, #4
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	4610      	mov	r0, r2
 8004ec0:	f001 f876 	bl	8005fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
	...

08004f20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d001      	beq.n	8004f38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e03a      	b.n	8004fae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68da      	ldr	r2, [r3, #12]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f042 0201 	orr.w	r2, r2, #1
 8004f4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a18      	ldr	r2, [pc, #96]	; (8004fb8 <HAL_TIM_Base_Start_IT+0x98>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d00e      	beq.n	8004f78 <HAL_TIM_Base_Start_IT+0x58>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f62:	d009      	beq.n	8004f78 <HAL_TIM_Base_Start_IT+0x58>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a14      	ldr	r2, [pc, #80]	; (8004fbc <HAL_TIM_Base_Start_IT+0x9c>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d004      	beq.n	8004f78 <HAL_TIM_Base_Start_IT+0x58>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a13      	ldr	r2, [pc, #76]	; (8004fc0 <HAL_TIM_Base_Start_IT+0xa0>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d111      	bne.n	8004f9c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f003 0307 	and.w	r3, r3, #7
 8004f82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2b06      	cmp	r3, #6
 8004f88:	d010      	beq.n	8004fac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f042 0201 	orr.w	r2, r2, #1
 8004f98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f9a:	e007      	b.n	8004fac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f042 0201 	orr.w	r2, r2, #1
 8004faa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bc80      	pop	{r7}
 8004fb6:	4770      	bx	lr
 8004fb8:	40012c00 	.word	0x40012c00
 8004fbc:	40000400 	.word	0x40000400
 8004fc0:	40000800 	.word	0x40000800

08004fc4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e041      	b.n	800505a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d106      	bne.n	8004ff0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f839 	bl	8005062 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	3304      	adds	r3, #4
 8005000:	4619      	mov	r1, r3
 8005002:	4610      	mov	r0, r2
 8005004:	f000 ffd4 	bl	8005fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3708      	adds	r7, #8
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005062:	b480      	push	{r7}
 8005064:	b083      	sub	sp, #12
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800506a:	bf00      	nop
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	bc80      	pop	{r7}
 8005072:	4770      	bx	lr

08005074 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d109      	bne.n	8005098 <HAL_TIM_PWM_Start+0x24>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b01      	cmp	r3, #1
 800508e:	bf14      	ite	ne
 8005090:	2301      	movne	r3, #1
 8005092:	2300      	moveq	r3, #0
 8005094:	b2db      	uxtb	r3, r3
 8005096:	e022      	b.n	80050de <HAL_TIM_PWM_Start+0x6a>
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	2b04      	cmp	r3, #4
 800509c:	d109      	bne.n	80050b2 <HAL_TIM_PWM_Start+0x3e>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	bf14      	ite	ne
 80050aa:	2301      	movne	r3, #1
 80050ac:	2300      	moveq	r3, #0
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	e015      	b.n	80050de <HAL_TIM_PWM_Start+0x6a>
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b08      	cmp	r3, #8
 80050b6:	d109      	bne.n	80050cc <HAL_TIM_PWM_Start+0x58>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	bf14      	ite	ne
 80050c4:	2301      	movne	r3, #1
 80050c6:	2300      	moveq	r3, #0
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	e008      	b.n	80050de <HAL_TIM_PWM_Start+0x6a>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	bf14      	ite	ne
 80050d8:	2301      	movne	r3, #1
 80050da:	2300      	moveq	r3, #0
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d001      	beq.n	80050e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e05e      	b.n	80051a4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d104      	bne.n	80050f6 <HAL_TIM_PWM_Start+0x82>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2202      	movs	r2, #2
 80050f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050f4:	e013      	b.n	800511e <HAL_TIM_PWM_Start+0xaa>
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	2b04      	cmp	r3, #4
 80050fa:	d104      	bne.n	8005106 <HAL_TIM_PWM_Start+0x92>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005104:	e00b      	b.n	800511e <HAL_TIM_PWM_Start+0xaa>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2b08      	cmp	r3, #8
 800510a:	d104      	bne.n	8005116 <HAL_TIM_PWM_Start+0xa2>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005114:	e003      	b.n	800511e <HAL_TIM_PWM_Start+0xaa>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2202      	movs	r2, #2
 800511a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2201      	movs	r2, #1
 8005124:	6839      	ldr	r1, [r7, #0]
 8005126:	4618      	mov	r0, r3
 8005128:	f001 fb61 	bl	80067ee <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a1e      	ldr	r2, [pc, #120]	; (80051ac <HAL_TIM_PWM_Start+0x138>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d107      	bne.n	8005146 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005144:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a18      	ldr	r2, [pc, #96]	; (80051ac <HAL_TIM_PWM_Start+0x138>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d00e      	beq.n	800516e <HAL_TIM_PWM_Start+0xfa>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005158:	d009      	beq.n	800516e <HAL_TIM_PWM_Start+0xfa>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a14      	ldr	r2, [pc, #80]	; (80051b0 <HAL_TIM_PWM_Start+0x13c>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d004      	beq.n	800516e <HAL_TIM_PWM_Start+0xfa>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a12      	ldr	r2, [pc, #72]	; (80051b4 <HAL_TIM_PWM_Start+0x140>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d111      	bne.n	8005192 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f003 0307 	and.w	r3, r3, #7
 8005178:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2b06      	cmp	r3, #6
 800517e:	d010      	beq.n	80051a2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f042 0201 	orr.w	r2, r2, #1
 800518e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005190:	e007      	b.n	80051a2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f042 0201 	orr.w	r2, r2, #1
 80051a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	40012c00 	.word	0x40012c00
 80051b0:	40000400 	.word	0x40000400
 80051b4:	40000800 	.word	0x40000800

080051b8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e041      	b.n	800524e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d106      	bne.n	80051e4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7fd fbf2 	bl	80029c8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2202      	movs	r2, #2
 80051e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	3304      	adds	r3, #4
 80051f4:	4619      	mov	r1, r3
 80051f6:	4610      	mov	r0, r2
 80051f8:	f000 feda 	bl	8005fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3708      	adds	r7, #8
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
	...

08005258 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d104      	bne.n	8005272 <HAL_TIM_IC_Start+0x1a>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800526e:	b2db      	uxtb	r3, r3
 8005270:	e013      	b.n	800529a <HAL_TIM_IC_Start+0x42>
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b04      	cmp	r3, #4
 8005276:	d104      	bne.n	8005282 <HAL_TIM_IC_Start+0x2a>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800527e:	b2db      	uxtb	r3, r3
 8005280:	e00b      	b.n	800529a <HAL_TIM_IC_Start+0x42>
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	2b08      	cmp	r3, #8
 8005286:	d104      	bne.n	8005292 <HAL_TIM_IC_Start+0x3a>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800528e:	b2db      	uxtb	r3, r3
 8005290:	e003      	b.n	800529a <HAL_TIM_IC_Start+0x42>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005298:	b2db      	uxtb	r3, r3
 800529a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d104      	bne.n	80052ac <HAL_TIM_IC_Start+0x54>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	e013      	b.n	80052d4 <HAL_TIM_IC_Start+0x7c>
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	2b04      	cmp	r3, #4
 80052b0:	d104      	bne.n	80052bc <HAL_TIM_IC_Start+0x64>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	e00b      	b.n	80052d4 <HAL_TIM_IC_Start+0x7c>
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	2b08      	cmp	r3, #8
 80052c0:	d104      	bne.n	80052cc <HAL_TIM_IC_Start+0x74>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	e003      	b.n	80052d4 <HAL_TIM_IC_Start+0x7c>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80052d6:	7bfb      	ldrb	r3, [r7, #15]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d102      	bne.n	80052e2 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80052dc:	7bbb      	ldrb	r3, [r7, #14]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d001      	beq.n	80052e6 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e06d      	b.n	80053c2 <HAL_TIM_IC_Start+0x16a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d104      	bne.n	80052f6 <HAL_TIM_IC_Start+0x9e>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2202      	movs	r2, #2
 80052f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052f4:	e013      	b.n	800531e <HAL_TIM_IC_Start+0xc6>
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	2b04      	cmp	r3, #4
 80052fa:	d104      	bne.n	8005306 <HAL_TIM_IC_Start+0xae>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2202      	movs	r2, #2
 8005300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005304:	e00b      	b.n	800531e <HAL_TIM_IC_Start+0xc6>
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b08      	cmp	r3, #8
 800530a:	d104      	bne.n	8005316 <HAL_TIM_IC_Start+0xbe>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2202      	movs	r2, #2
 8005310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005314:	e003      	b.n	800531e <HAL_TIM_IC_Start+0xc6>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2202      	movs	r2, #2
 800531a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d104      	bne.n	800532e <HAL_TIM_IC_Start+0xd6>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2202      	movs	r2, #2
 8005328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800532c:	e013      	b.n	8005356 <HAL_TIM_IC_Start+0xfe>
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	2b04      	cmp	r3, #4
 8005332:	d104      	bne.n	800533e <HAL_TIM_IC_Start+0xe6>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800533c:	e00b      	b.n	8005356 <HAL_TIM_IC_Start+0xfe>
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	2b08      	cmp	r3, #8
 8005342:	d104      	bne.n	800534e <HAL_TIM_IC_Start+0xf6>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2202      	movs	r2, #2
 8005348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800534c:	e003      	b.n	8005356 <HAL_TIM_IC_Start+0xfe>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2202      	movs	r2, #2
 8005352:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2201      	movs	r2, #1
 800535c:	6839      	ldr	r1, [r7, #0]
 800535e:	4618      	mov	r0, r3
 8005360:	f001 fa45 	bl	80067ee <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a18      	ldr	r2, [pc, #96]	; (80053cc <HAL_TIM_IC_Start+0x174>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d00e      	beq.n	800538c <HAL_TIM_IC_Start+0x134>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005376:	d009      	beq.n	800538c <HAL_TIM_IC_Start+0x134>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a14      	ldr	r2, [pc, #80]	; (80053d0 <HAL_TIM_IC_Start+0x178>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d004      	beq.n	800538c <HAL_TIM_IC_Start+0x134>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a13      	ldr	r2, [pc, #76]	; (80053d4 <HAL_TIM_IC_Start+0x17c>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d111      	bne.n	80053b0 <HAL_TIM_IC_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f003 0307 	and.w	r3, r3, #7
 8005396:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	2b06      	cmp	r3, #6
 800539c:	d010      	beq.n	80053c0 <HAL_TIM_IC_Start+0x168>
    {
      __HAL_TIM_ENABLE(htim);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f042 0201 	orr.w	r2, r2, #1
 80053ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ae:	e007      	b.n	80053c0 <HAL_TIM_IC_Start+0x168>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f042 0201 	orr.w	r2, r2, #1
 80053be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3710      	adds	r7, #16
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	40012c00 	.word	0x40012c00
 80053d0:	40000400 	.word	0x40000400
 80053d4:	40000800 	.word	0x40000800

080053d8 <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2200      	movs	r2, #0
 80053e8:	6839      	ldr	r1, [r7, #0]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f001 f9ff 	bl	80067ee <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6a1a      	ldr	r2, [r3, #32]
 80053f6:	f241 1311 	movw	r3, #4369	; 0x1111
 80053fa:	4013      	ands	r3, r2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10f      	bne.n	8005420 <HAL_TIM_IC_Stop+0x48>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6a1a      	ldr	r2, [r3, #32]
 8005406:	f240 4344 	movw	r3, #1092	; 0x444
 800540a:	4013      	ands	r3, r2
 800540c:	2b00      	cmp	r3, #0
 800540e:	d107      	bne.n	8005420 <HAL_TIM_IC_Stop+0x48>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 0201 	bic.w	r2, r2, #1
 800541e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d104      	bne.n	8005430 <HAL_TIM_IC_Stop+0x58>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800542e:	e013      	b.n	8005458 <HAL_TIM_IC_Stop+0x80>
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	2b04      	cmp	r3, #4
 8005434:	d104      	bne.n	8005440 <HAL_TIM_IC_Stop+0x68>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800543e:	e00b      	b.n	8005458 <HAL_TIM_IC_Stop+0x80>
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	2b08      	cmp	r3, #8
 8005444:	d104      	bne.n	8005450 <HAL_TIM_IC_Stop+0x78>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800544e:	e003      	b.n	8005458 <HAL_TIM_IC_Stop+0x80>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d104      	bne.n	8005468 <HAL_TIM_IC_Stop+0x90>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005466:	e013      	b.n	8005490 <HAL_TIM_IC_Stop+0xb8>
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	2b04      	cmp	r3, #4
 800546c:	d104      	bne.n	8005478 <HAL_TIM_IC_Stop+0xa0>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005476:	e00b      	b.n	8005490 <HAL_TIM_IC_Stop+0xb8>
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	2b08      	cmp	r3, #8
 800547c:	d104      	bne.n	8005488 <HAL_TIM_IC_Stop+0xb0>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005486:	e003      	b.n	8005490 <HAL_TIM_IC_Stop+0xb8>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3708      	adds	r7, #8
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
	...

0800549c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054a6:	2300      	movs	r3, #0
 80054a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d104      	bne.n	80054ba <HAL_TIM_IC_Start_IT+0x1e>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	e013      	b.n	80054e2 <HAL_TIM_IC_Start_IT+0x46>
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b04      	cmp	r3, #4
 80054be:	d104      	bne.n	80054ca <HAL_TIM_IC_Start_IT+0x2e>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	e00b      	b.n	80054e2 <HAL_TIM_IC_Start_IT+0x46>
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2b08      	cmp	r3, #8
 80054ce:	d104      	bne.n	80054da <HAL_TIM_IC_Start_IT+0x3e>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	e003      	b.n	80054e2 <HAL_TIM_IC_Start_IT+0x46>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d104      	bne.n	80054f4 <HAL_TIM_IC_Start_IT+0x58>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	e013      	b.n	800551c <HAL_TIM_IC_Start_IT+0x80>
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	d104      	bne.n	8005504 <HAL_TIM_IC_Start_IT+0x68>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005500:	b2db      	uxtb	r3, r3
 8005502:	e00b      	b.n	800551c <HAL_TIM_IC_Start_IT+0x80>
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	2b08      	cmp	r3, #8
 8005508:	d104      	bne.n	8005514 <HAL_TIM_IC_Start_IT+0x78>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005510:	b2db      	uxtb	r3, r3
 8005512:	e003      	b.n	800551c <HAL_TIM_IC_Start_IT+0x80>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800551a:	b2db      	uxtb	r3, r3
 800551c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800551e:	7bbb      	ldrb	r3, [r7, #14]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d102      	bne.n	800552a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005524:	7b7b      	ldrb	r3, [r7, #13]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d001      	beq.n	800552e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e0b8      	b.n	80056a0 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d104      	bne.n	800553e <HAL_TIM_IC_Start_IT+0xa2>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2202      	movs	r2, #2
 8005538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800553c:	e013      	b.n	8005566 <HAL_TIM_IC_Start_IT+0xca>
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	2b04      	cmp	r3, #4
 8005542:	d104      	bne.n	800554e <HAL_TIM_IC_Start_IT+0xb2>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2202      	movs	r2, #2
 8005548:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800554c:	e00b      	b.n	8005566 <HAL_TIM_IC_Start_IT+0xca>
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	2b08      	cmp	r3, #8
 8005552:	d104      	bne.n	800555e <HAL_TIM_IC_Start_IT+0xc2>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2202      	movs	r2, #2
 8005558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800555c:	e003      	b.n	8005566 <HAL_TIM_IC_Start_IT+0xca>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2202      	movs	r2, #2
 8005562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d104      	bne.n	8005576 <HAL_TIM_IC_Start_IT+0xda>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2202      	movs	r2, #2
 8005570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005574:	e013      	b.n	800559e <HAL_TIM_IC_Start_IT+0x102>
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	2b04      	cmp	r3, #4
 800557a:	d104      	bne.n	8005586 <HAL_TIM_IC_Start_IT+0xea>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2202      	movs	r2, #2
 8005580:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005584:	e00b      	b.n	800559e <HAL_TIM_IC_Start_IT+0x102>
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	2b08      	cmp	r3, #8
 800558a:	d104      	bne.n	8005596 <HAL_TIM_IC_Start_IT+0xfa>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2202      	movs	r2, #2
 8005590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005594:	e003      	b.n	800559e <HAL_TIM_IC_Start_IT+0x102>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2202      	movs	r2, #2
 800559a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2b0c      	cmp	r3, #12
 80055a2:	d841      	bhi.n	8005628 <HAL_TIM_IC_Start_IT+0x18c>
 80055a4:	a201      	add	r2, pc, #4	; (adr r2, 80055ac <HAL_TIM_IC_Start_IT+0x110>)
 80055a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055aa:	bf00      	nop
 80055ac:	080055e1 	.word	0x080055e1
 80055b0:	08005629 	.word	0x08005629
 80055b4:	08005629 	.word	0x08005629
 80055b8:	08005629 	.word	0x08005629
 80055bc:	080055f3 	.word	0x080055f3
 80055c0:	08005629 	.word	0x08005629
 80055c4:	08005629 	.word	0x08005629
 80055c8:	08005629 	.word	0x08005629
 80055cc:	08005605 	.word	0x08005605
 80055d0:	08005629 	.word	0x08005629
 80055d4:	08005629 	.word	0x08005629
 80055d8:	08005629 	.word	0x08005629
 80055dc:	08005617 	.word	0x08005617
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68da      	ldr	r2, [r3, #12]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f042 0202 	orr.w	r2, r2, #2
 80055ee:	60da      	str	r2, [r3, #12]
      break;
 80055f0:	e01d      	b.n	800562e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68da      	ldr	r2, [r3, #12]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f042 0204 	orr.w	r2, r2, #4
 8005600:	60da      	str	r2, [r3, #12]
      break;
 8005602:	e014      	b.n	800562e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68da      	ldr	r2, [r3, #12]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f042 0208 	orr.w	r2, r2, #8
 8005612:	60da      	str	r2, [r3, #12]
      break;
 8005614:	e00b      	b.n	800562e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68da      	ldr	r2, [r3, #12]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f042 0210 	orr.w	r2, r2, #16
 8005624:	60da      	str	r2, [r3, #12]
      break;
 8005626:	e002      	b.n	800562e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	73fb      	strb	r3, [r7, #15]
      break;
 800562c:	bf00      	nop
  }

  if (status == HAL_OK)
 800562e:	7bfb      	ldrb	r3, [r7, #15]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d134      	bne.n	800569e <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2201      	movs	r2, #1
 800563a:	6839      	ldr	r1, [r7, #0]
 800563c:	4618      	mov	r0, r3
 800563e:	f001 f8d6 	bl	80067ee <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a18      	ldr	r2, [pc, #96]	; (80056a8 <HAL_TIM_IC_Start_IT+0x20c>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d00e      	beq.n	800566a <HAL_TIM_IC_Start_IT+0x1ce>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005654:	d009      	beq.n	800566a <HAL_TIM_IC_Start_IT+0x1ce>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a14      	ldr	r2, [pc, #80]	; (80056ac <HAL_TIM_IC_Start_IT+0x210>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d004      	beq.n	800566a <HAL_TIM_IC_Start_IT+0x1ce>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a12      	ldr	r2, [pc, #72]	; (80056b0 <HAL_TIM_IC_Start_IT+0x214>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d111      	bne.n	800568e <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f003 0307 	and.w	r3, r3, #7
 8005674:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	2b06      	cmp	r3, #6
 800567a:	d010      	beq.n	800569e <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f042 0201 	orr.w	r2, r2, #1
 800568a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800568c:	e007      	b.n	800569e <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f042 0201 	orr.w	r2, r2, #1
 800569c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800569e:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	40012c00 	.word	0x40012c00
 80056ac:	40000400 	.word	0x40000400
 80056b0:	40000800 	.word	0x40000800

080056b4 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056be:	2300      	movs	r3, #0
 80056c0:	73fb      	strb	r3, [r7, #15]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	2b0c      	cmp	r3, #12
 80056c6:	d841      	bhi.n	800574c <HAL_TIM_IC_Stop_IT+0x98>
 80056c8:	a201      	add	r2, pc, #4	; (adr r2, 80056d0 <HAL_TIM_IC_Stop_IT+0x1c>)
 80056ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ce:	bf00      	nop
 80056d0:	08005705 	.word	0x08005705
 80056d4:	0800574d 	.word	0x0800574d
 80056d8:	0800574d 	.word	0x0800574d
 80056dc:	0800574d 	.word	0x0800574d
 80056e0:	08005717 	.word	0x08005717
 80056e4:	0800574d 	.word	0x0800574d
 80056e8:	0800574d 	.word	0x0800574d
 80056ec:	0800574d 	.word	0x0800574d
 80056f0:	08005729 	.word	0x08005729
 80056f4:	0800574d 	.word	0x0800574d
 80056f8:	0800574d 	.word	0x0800574d
 80056fc:	0800574d 	.word	0x0800574d
 8005700:	0800573b 	.word	0x0800573b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68da      	ldr	r2, [r3, #12]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f022 0202 	bic.w	r2, r2, #2
 8005712:	60da      	str	r2, [r3, #12]
      break;
 8005714:	e01d      	b.n	8005752 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68da      	ldr	r2, [r3, #12]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f022 0204 	bic.w	r2, r2, #4
 8005724:	60da      	str	r2, [r3, #12]
      break;
 8005726:	e014      	b.n	8005752 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68da      	ldr	r2, [r3, #12]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 0208 	bic.w	r2, r2, #8
 8005736:	60da      	str	r2, [r3, #12]
      break;
 8005738:	e00b      	b.n	8005752 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68da      	ldr	r2, [r3, #12]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f022 0210 	bic.w	r2, r2, #16
 8005748:	60da      	str	r2, [r3, #12]
      break;
 800574a:	e002      	b.n	8005752 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	73fb      	strb	r3, [r7, #15]
      break;
 8005750:	bf00      	nop
  }

  if (status == HAL_OK)
 8005752:	7bfb      	ldrb	r3, [r7, #15]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d156      	bne.n	8005806 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2200      	movs	r2, #0
 800575e:	6839      	ldr	r1, [r7, #0]
 8005760:	4618      	mov	r0, r3
 8005762:	f001 f844 	bl	80067ee <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6a1a      	ldr	r2, [r3, #32]
 800576c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005770:	4013      	ands	r3, r2
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10f      	bne.n	8005796 <HAL_TIM_IC_Stop_IT+0xe2>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	6a1a      	ldr	r2, [r3, #32]
 800577c:	f240 4344 	movw	r3, #1092	; 0x444
 8005780:	4013      	ands	r3, r2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d107      	bne.n	8005796 <HAL_TIM_IC_Stop_IT+0xe2>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f022 0201 	bic.w	r2, r2, #1
 8005794:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d104      	bne.n	80057a6 <HAL_TIM_IC_Stop_IT+0xf2>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057a4:	e013      	b.n	80057ce <HAL_TIM_IC_Stop_IT+0x11a>
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b04      	cmp	r3, #4
 80057aa:	d104      	bne.n	80057b6 <HAL_TIM_IC_Stop_IT+0x102>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057b4:	e00b      	b.n	80057ce <HAL_TIM_IC_Stop_IT+0x11a>
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	2b08      	cmp	r3, #8
 80057ba:	d104      	bne.n	80057c6 <HAL_TIM_IC_Stop_IT+0x112>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057c4:	e003      	b.n	80057ce <HAL_TIM_IC_Stop_IT+0x11a>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d104      	bne.n	80057de <HAL_TIM_IC_Stop_IT+0x12a>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057dc:	e013      	b.n	8005806 <HAL_TIM_IC_Stop_IT+0x152>
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	2b04      	cmp	r3, #4
 80057e2:	d104      	bne.n	80057ee <HAL_TIM_IC_Stop_IT+0x13a>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057ec:	e00b      	b.n	8005806 <HAL_TIM_IC_Stop_IT+0x152>
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	2b08      	cmp	r3, #8
 80057f2:	d104      	bne.n	80057fe <HAL_TIM_IC_Stop_IT+0x14a>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057fc:	e003      	b.n	8005806 <HAL_TIM_IC_Stop_IT+0x152>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 8005806:	7bfb      	ldrb	r3, [r7, #15]
}
 8005808:	4618      	mov	r0, r3
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b02      	cmp	r3, #2
 8005824:	d122      	bne.n	800586c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	f003 0302 	and.w	r3, r3, #2
 8005830:	2b02      	cmp	r3, #2
 8005832:	d11b      	bne.n	800586c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f06f 0202 	mvn.w	r2, #2
 800583c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2201      	movs	r2, #1
 8005842:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	f003 0303 	and.w	r3, r3, #3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f7fc f8d2 	bl	80019fc <HAL_TIM_IC_CaptureCallback>
 8005858:	e005      	b.n	8005866 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 fb8c 	bl	8005f78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 fb92 	bl	8005f8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	f003 0304 	and.w	r3, r3, #4
 8005876:	2b04      	cmp	r3, #4
 8005878:	d122      	bne.n	80058c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	f003 0304 	and.w	r3, r3, #4
 8005884:	2b04      	cmp	r3, #4
 8005886:	d11b      	bne.n	80058c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f06f 0204 	mvn.w	r2, #4
 8005890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2202      	movs	r2, #2
 8005896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d003      	beq.n	80058ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7fc f8a8 	bl	80019fc <HAL_TIM_IC_CaptureCallback>
 80058ac:	e005      	b.n	80058ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 fb62 	bl	8005f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 fb68 	bl	8005f8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	f003 0308 	and.w	r3, r3, #8
 80058ca:	2b08      	cmp	r3, #8
 80058cc:	d122      	bne.n	8005914 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	f003 0308 	and.w	r3, r3, #8
 80058d8:	2b08      	cmp	r3, #8
 80058da:	d11b      	bne.n	8005914 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f06f 0208 	mvn.w	r2, #8
 80058e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2204      	movs	r2, #4
 80058ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	f003 0303 	and.w	r3, r3, #3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f7fc f87e 	bl	80019fc <HAL_TIM_IC_CaptureCallback>
 8005900:	e005      	b.n	800590e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 fb38 	bl	8005f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 fb3e 	bl	8005f8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	f003 0310 	and.w	r3, r3, #16
 800591e:	2b10      	cmp	r3, #16
 8005920:	d122      	bne.n	8005968 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	f003 0310 	and.w	r3, r3, #16
 800592c:	2b10      	cmp	r3, #16
 800592e:	d11b      	bne.n	8005968 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f06f 0210 	mvn.w	r2, #16
 8005938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2208      	movs	r2, #8
 800593e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800594a:	2b00      	cmp	r3, #0
 800594c:	d003      	beq.n	8005956 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f7fc f854 	bl	80019fc <HAL_TIM_IC_CaptureCallback>
 8005954:	e005      	b.n	8005962 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 fb0e 	bl	8005f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 fb14 	bl	8005f8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b01      	cmp	r3, #1
 8005974:	d10e      	bne.n	8005994 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	f003 0301 	and.w	r3, r3, #1
 8005980:	2b01      	cmp	r3, #1
 8005982:	d107      	bne.n	8005994 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f06f 0201 	mvn.w	r2, #1
 800598c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f7fc ff2a 	bl	80027e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800599e:	2b80      	cmp	r3, #128	; 0x80
 80059a0:	d10e      	bne.n	80059c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ac:	2b80      	cmp	r3, #128	; 0x80
 80059ae:	d107      	bne.n	80059c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 fff4 	bl	80069a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ca:	2b40      	cmp	r3, #64	; 0x40
 80059cc:	d10e      	bne.n	80059ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d8:	2b40      	cmp	r3, #64	; 0x40
 80059da:	d107      	bne.n	80059ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 fad8 	bl	8005f9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	f003 0320 	and.w	r3, r3, #32
 80059f6:	2b20      	cmp	r3, #32
 80059f8:	d10e      	bne.n	8005a18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	f003 0320 	and.w	r3, r3, #32
 8005a04:	2b20      	cmp	r3, #32
 8005a06:	d107      	bne.n	8005a18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f06f 0220 	mvn.w	r2, #32
 8005a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 ffbf 	bl	8006996 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a18:	bf00      	nop
 8005a1a:	3708      	adds	r7, #8
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d101      	bne.n	8005a3e <HAL_TIM_IC_ConfigChannel+0x1e>
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	e088      	b.n	8005b50 <HAL_TIM_IC_ConfigChannel+0x130>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d11b      	bne.n	8005a84 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6818      	ldr	r0, [r3, #0]
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	6819      	ldr	r1, [r3, #0]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	685a      	ldr	r2, [r3, #4]
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	f000 fd24 	bl	80064a8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	699a      	ldr	r2, [r3, #24]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f022 020c 	bic.w	r2, r2, #12
 8005a6e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6999      	ldr	r1, [r3, #24]
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	689a      	ldr	r2, [r3, #8]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	619a      	str	r2, [r3, #24]
 8005a82:	e060      	b.n	8005b46 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b04      	cmp	r3, #4
 8005a88:	d11c      	bne.n	8005ac4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6818      	ldr	r0, [r3, #0]
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	6819      	ldr	r1, [r3, #0]
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	685a      	ldr	r2, [r3, #4]
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	f000 fd8d 	bl	80065b8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	699a      	ldr	r2, [r3, #24]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005aac:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	6999      	ldr	r1, [r3, #24]
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	021a      	lsls	r2, r3, #8
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	619a      	str	r2, [r3, #24]
 8005ac2:	e040      	b.n	8005b46 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b08      	cmp	r3, #8
 8005ac8:	d11b      	bne.n	8005b02 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6818      	ldr	r0, [r3, #0]
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	6819      	ldr	r1, [r3, #0]
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	685a      	ldr	r2, [r3, #4]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	f000 fdd8 	bl	800668e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	69da      	ldr	r2, [r3, #28]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f022 020c 	bic.w	r2, r2, #12
 8005aec:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	69d9      	ldr	r1, [r3, #28]
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	689a      	ldr	r2, [r3, #8]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	430a      	orrs	r2, r1
 8005afe:	61da      	str	r2, [r3, #28]
 8005b00:	e021      	b.n	8005b46 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b0c      	cmp	r3, #12
 8005b06:	d11c      	bne.n	8005b42 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6818      	ldr	r0, [r3, #0]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	6819      	ldr	r1, [r3, #0]
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	685a      	ldr	r2, [r3, #4]
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	f000 fdf4 	bl	8006704 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	69da      	ldr	r2, [r3, #28]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005b2a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	69d9      	ldr	r1, [r3, #28]
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	021a      	lsls	r2, r3, #8
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	61da      	str	r2, [r3, #28]
 8005b40:	e001      	b.n	8005b46 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3718      	adds	r7, #24
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b64:	2300      	movs	r3, #0
 8005b66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d101      	bne.n	8005b76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b72:	2302      	movs	r3, #2
 8005b74:	e0ae      	b.n	8005cd4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2b0c      	cmp	r3, #12
 8005b82:	f200 809f 	bhi.w	8005cc4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005b86:	a201      	add	r2, pc, #4	; (adr r2, 8005b8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8c:	08005bc1 	.word	0x08005bc1
 8005b90:	08005cc5 	.word	0x08005cc5
 8005b94:	08005cc5 	.word	0x08005cc5
 8005b98:	08005cc5 	.word	0x08005cc5
 8005b9c:	08005c01 	.word	0x08005c01
 8005ba0:	08005cc5 	.word	0x08005cc5
 8005ba4:	08005cc5 	.word	0x08005cc5
 8005ba8:	08005cc5 	.word	0x08005cc5
 8005bac:	08005c43 	.word	0x08005c43
 8005bb0:	08005cc5 	.word	0x08005cc5
 8005bb4:	08005cc5 	.word	0x08005cc5
 8005bb8:	08005cc5 	.word	0x08005cc5
 8005bbc:	08005c83 	.word	0x08005c83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68b9      	ldr	r1, [r7, #8]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f000 fa54 	bl	8006074 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	699a      	ldr	r2, [r3, #24]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f042 0208 	orr.w	r2, r2, #8
 8005bda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	699a      	ldr	r2, [r3, #24]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f022 0204 	bic.w	r2, r2, #4
 8005bea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6999      	ldr	r1, [r3, #24]
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	691a      	ldr	r2, [r3, #16]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	619a      	str	r2, [r3, #24]
      break;
 8005bfe:	e064      	b.n	8005cca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68b9      	ldr	r1, [r7, #8]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f000 fa9a 	bl	8006140 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	699a      	ldr	r2, [r3, #24]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	699a      	ldr	r2, [r3, #24]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	6999      	ldr	r1, [r3, #24]
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	021a      	lsls	r2, r3, #8
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	430a      	orrs	r2, r1
 8005c3e:	619a      	str	r2, [r3, #24]
      break;
 8005c40:	e043      	b.n	8005cca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68b9      	ldr	r1, [r7, #8]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 fae3 	bl	8006214 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	69da      	ldr	r2, [r3, #28]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f042 0208 	orr.w	r2, r2, #8
 8005c5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	69da      	ldr	r2, [r3, #28]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f022 0204 	bic.w	r2, r2, #4
 8005c6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	69d9      	ldr	r1, [r3, #28]
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	691a      	ldr	r2, [r3, #16]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	61da      	str	r2, [r3, #28]
      break;
 8005c80:	e023      	b.n	8005cca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68b9      	ldr	r1, [r7, #8]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f000 fb2d 	bl	80062e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	69da      	ldr	r2, [r3, #28]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	69da      	ldr	r2, [r3, #28]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	69d9      	ldr	r1, [r3, #28]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	021a      	lsls	r2, r3, #8
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	61da      	str	r2, [r3, #28]
      break;
 8005cc2:	e002      	b.n	8005cca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	75fb      	strb	r3, [r7, #23]
      break;
 8005cc8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3718      	adds	r7, #24
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d101      	bne.n	8005cf8 <HAL_TIM_ConfigClockSource+0x1c>
 8005cf4:	2302      	movs	r3, #2
 8005cf6:	e0b4      	b.n	8005e62 <HAL_TIM_ConfigClockSource+0x186>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2202      	movs	r2, #2
 8005d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68ba      	ldr	r2, [r7, #8]
 8005d26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d30:	d03e      	beq.n	8005db0 <HAL_TIM_ConfigClockSource+0xd4>
 8005d32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d36:	f200 8087 	bhi.w	8005e48 <HAL_TIM_ConfigClockSource+0x16c>
 8005d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d3e:	f000 8086 	beq.w	8005e4e <HAL_TIM_ConfigClockSource+0x172>
 8005d42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d46:	d87f      	bhi.n	8005e48 <HAL_TIM_ConfigClockSource+0x16c>
 8005d48:	2b70      	cmp	r3, #112	; 0x70
 8005d4a:	d01a      	beq.n	8005d82 <HAL_TIM_ConfigClockSource+0xa6>
 8005d4c:	2b70      	cmp	r3, #112	; 0x70
 8005d4e:	d87b      	bhi.n	8005e48 <HAL_TIM_ConfigClockSource+0x16c>
 8005d50:	2b60      	cmp	r3, #96	; 0x60
 8005d52:	d050      	beq.n	8005df6 <HAL_TIM_ConfigClockSource+0x11a>
 8005d54:	2b60      	cmp	r3, #96	; 0x60
 8005d56:	d877      	bhi.n	8005e48 <HAL_TIM_ConfigClockSource+0x16c>
 8005d58:	2b50      	cmp	r3, #80	; 0x50
 8005d5a:	d03c      	beq.n	8005dd6 <HAL_TIM_ConfigClockSource+0xfa>
 8005d5c:	2b50      	cmp	r3, #80	; 0x50
 8005d5e:	d873      	bhi.n	8005e48 <HAL_TIM_ConfigClockSource+0x16c>
 8005d60:	2b40      	cmp	r3, #64	; 0x40
 8005d62:	d058      	beq.n	8005e16 <HAL_TIM_ConfigClockSource+0x13a>
 8005d64:	2b40      	cmp	r3, #64	; 0x40
 8005d66:	d86f      	bhi.n	8005e48 <HAL_TIM_ConfigClockSource+0x16c>
 8005d68:	2b30      	cmp	r3, #48	; 0x30
 8005d6a:	d064      	beq.n	8005e36 <HAL_TIM_ConfigClockSource+0x15a>
 8005d6c:	2b30      	cmp	r3, #48	; 0x30
 8005d6e:	d86b      	bhi.n	8005e48 <HAL_TIM_ConfigClockSource+0x16c>
 8005d70:	2b20      	cmp	r3, #32
 8005d72:	d060      	beq.n	8005e36 <HAL_TIM_ConfigClockSource+0x15a>
 8005d74:	2b20      	cmp	r3, #32
 8005d76:	d867      	bhi.n	8005e48 <HAL_TIM_ConfigClockSource+0x16c>
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d05c      	beq.n	8005e36 <HAL_TIM_ConfigClockSource+0x15a>
 8005d7c:	2b10      	cmp	r3, #16
 8005d7e:	d05a      	beq.n	8005e36 <HAL_TIM_ConfigClockSource+0x15a>
 8005d80:	e062      	b.n	8005e48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6818      	ldr	r0, [r3, #0]
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	6899      	ldr	r1, [r3, #8]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	685a      	ldr	r2, [r3, #4]
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	f000 fd0d 	bl	80067b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005da4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	609a      	str	r2, [r3, #8]
      break;
 8005dae:	e04f      	b.n	8005e50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6818      	ldr	r0, [r3, #0]
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	6899      	ldr	r1, [r3, #8]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	685a      	ldr	r2, [r3, #4]
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	f000 fcf6 	bl	80067b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	689a      	ldr	r2, [r3, #8]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005dd2:	609a      	str	r2, [r3, #8]
      break;
 8005dd4:	e03c      	b.n	8005e50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6818      	ldr	r0, [r3, #0]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	6859      	ldr	r1, [r3, #4]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	461a      	mov	r2, r3
 8005de4:	f000 fbba 	bl	800655c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2150      	movs	r1, #80	; 0x50
 8005dee:	4618      	mov	r0, r3
 8005df0:	f000 fcc4 	bl	800677c <TIM_ITRx_SetConfig>
      break;
 8005df4:	e02c      	b.n	8005e50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6818      	ldr	r0, [r3, #0]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	6859      	ldr	r1, [r3, #4]
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	461a      	mov	r2, r3
 8005e04:	f000 fc14 	bl	8006630 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2160      	movs	r1, #96	; 0x60
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f000 fcb4 	bl	800677c <TIM_ITRx_SetConfig>
      break;
 8005e14:	e01c      	b.n	8005e50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6818      	ldr	r0, [r3, #0]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	6859      	ldr	r1, [r3, #4]
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	461a      	mov	r2, r3
 8005e24:	f000 fb9a 	bl	800655c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2140      	movs	r1, #64	; 0x40
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 fca4 	bl	800677c <TIM_ITRx_SetConfig>
      break;
 8005e34:	e00c      	b.n	8005e50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4619      	mov	r1, r3
 8005e40:	4610      	mov	r0, r2
 8005e42:	f000 fc9b 	bl	800677c <TIM_ITRx_SetConfig>
      break;
 8005e46:	e003      	b.n	8005e50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e4c:	e000      	b.n	8005e50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b082      	sub	sp, #8
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
 8005e72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d101      	bne.n	8005e82 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005e7e:	2302      	movs	r3, #2
 8005e80:	e031      	b.n	8005ee6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2202      	movs	r2, #2
 8005e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005e92:	6839      	ldr	r1, [r7, #0]
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 fa75 	bl	8006384 <TIM_SlaveTimer_SetConfig>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d009      	beq.n	8005eb4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e018      	b.n	8005ee6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68da      	ldr	r2, [r3, #12]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ec2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68da      	ldr	r2, [r3, #12]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005ed2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3708      	adds	r7, #8
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
	...

08005ef0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005efa:	2300      	movs	r3, #0
 8005efc:	60fb      	str	r3, [r7, #12]
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	2b0c      	cmp	r3, #12
 8005f02:	d831      	bhi.n	8005f68 <HAL_TIM_ReadCapturedValue+0x78>
 8005f04:	a201      	add	r2, pc, #4	; (adr r2, 8005f0c <HAL_TIM_ReadCapturedValue+0x1c>)
 8005f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0a:	bf00      	nop
 8005f0c:	08005f41 	.word	0x08005f41
 8005f10:	08005f69 	.word	0x08005f69
 8005f14:	08005f69 	.word	0x08005f69
 8005f18:	08005f69 	.word	0x08005f69
 8005f1c:	08005f4b 	.word	0x08005f4b
 8005f20:	08005f69 	.word	0x08005f69
 8005f24:	08005f69 	.word	0x08005f69
 8005f28:	08005f69 	.word	0x08005f69
 8005f2c:	08005f55 	.word	0x08005f55
 8005f30:	08005f69 	.word	0x08005f69
 8005f34:	08005f69 	.word	0x08005f69
 8005f38:	08005f69 	.word	0x08005f69
 8005f3c:	08005f5f 	.word	0x08005f5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f46:	60fb      	str	r3, [r7, #12]

      break;
 8005f48:	e00f      	b.n	8005f6a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f50:	60fb      	str	r3, [r7, #12]

      break;
 8005f52:	e00a      	b.n	8005f6a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f5a:	60fb      	str	r3, [r7, #12]

      break;
 8005f5c:	e005      	b.n	8005f6a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f64:	60fb      	str	r3, [r7, #12]

      break;
 8005f66:	e000      	b.n	8005f6a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005f68:	bf00      	nop
  }

  return tmpreg;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3714      	adds	r7, #20
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bc80      	pop	{r7}
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop

08005f78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bc80      	pop	{r7}
 8005f88:	4770      	bx	lr

08005f8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b083      	sub	sp, #12
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f92:	bf00      	nop
 8005f94:	370c      	adds	r7, #12
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bc80      	pop	{r7}
 8005f9a:	4770      	bx	lr

08005f9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bc80      	pop	{r7}
 8005fac:	4770      	bx	lr
	...

08005fb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a29      	ldr	r2, [pc, #164]	; (8006068 <TIM_Base_SetConfig+0xb8>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d00b      	beq.n	8005fe0 <TIM_Base_SetConfig+0x30>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fce:	d007      	beq.n	8005fe0 <TIM_Base_SetConfig+0x30>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a26      	ldr	r2, [pc, #152]	; (800606c <TIM_Base_SetConfig+0xbc>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d003      	beq.n	8005fe0 <TIM_Base_SetConfig+0x30>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a25      	ldr	r2, [pc, #148]	; (8006070 <TIM_Base_SetConfig+0xc0>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d108      	bne.n	8005ff2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a1c      	ldr	r2, [pc, #112]	; (8006068 <TIM_Base_SetConfig+0xb8>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d00b      	beq.n	8006012 <TIM_Base_SetConfig+0x62>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006000:	d007      	beq.n	8006012 <TIM_Base_SetConfig+0x62>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a19      	ldr	r2, [pc, #100]	; (800606c <TIM_Base_SetConfig+0xbc>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d003      	beq.n	8006012 <TIM_Base_SetConfig+0x62>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a18      	ldr	r2, [pc, #96]	; (8006070 <TIM_Base_SetConfig+0xc0>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d108      	bne.n	8006024 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006018:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	4313      	orrs	r3, r2
 8006022:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	4313      	orrs	r3, r2
 8006030:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	689a      	ldr	r2, [r3, #8]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a07      	ldr	r2, [pc, #28]	; (8006068 <TIM_Base_SetConfig+0xb8>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d103      	bne.n	8006058 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	691a      	ldr	r2, [r3, #16]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	615a      	str	r2, [r3, #20]
}
 800605e:	bf00      	nop
 8006060:	3714      	adds	r7, #20
 8006062:	46bd      	mov	sp, r7
 8006064:	bc80      	pop	{r7}
 8006066:	4770      	bx	lr
 8006068:	40012c00 	.word	0x40012c00
 800606c:	40000400 	.word	0x40000400
 8006070:	40000800 	.word	0x40000800

08006074 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006074:	b480      	push	{r7}
 8006076:	b087      	sub	sp, #28
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a1b      	ldr	r3, [r3, #32]
 8006082:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a1b      	ldr	r3, [r3, #32]
 8006088:	f023 0201 	bic.w	r2, r3, #1
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f023 0303 	bic.w	r3, r3, #3
 80060aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	f023 0302 	bic.w	r3, r3, #2
 80060bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	697a      	ldr	r2, [r7, #20]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a1c      	ldr	r2, [pc, #112]	; (800613c <TIM_OC1_SetConfig+0xc8>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d10c      	bne.n	80060ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	f023 0308 	bic.w	r3, r3, #8
 80060d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	697a      	ldr	r2, [r7, #20]
 80060de:	4313      	orrs	r3, r2
 80060e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	f023 0304 	bic.w	r3, r3, #4
 80060e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a13      	ldr	r2, [pc, #76]	; (800613c <TIM_OC1_SetConfig+0xc8>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d111      	bne.n	8006116 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006100:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	4313      	orrs	r3, r2
 800610a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	4313      	orrs	r3, r2
 8006114:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	693a      	ldr	r2, [r7, #16]
 800611a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	685a      	ldr	r2, [r3, #4]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	697a      	ldr	r2, [r7, #20]
 800612e:	621a      	str	r2, [r3, #32]
}
 8006130:	bf00      	nop
 8006132:	371c      	adds	r7, #28
 8006134:	46bd      	mov	sp, r7
 8006136:	bc80      	pop	{r7}
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	40012c00 	.word	0x40012c00

08006140 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006140:	b480      	push	{r7}
 8006142:	b087      	sub	sp, #28
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a1b      	ldr	r3, [r3, #32]
 8006154:	f023 0210 	bic.w	r2, r3, #16
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800616e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006176:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	021b      	lsls	r3, r3, #8
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	4313      	orrs	r3, r2
 8006182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	f023 0320 	bic.w	r3, r3, #32
 800618a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	011b      	lsls	r3, r3, #4
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	4313      	orrs	r3, r2
 8006196:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a1d      	ldr	r2, [pc, #116]	; (8006210 <TIM_OC2_SetConfig+0xd0>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d10d      	bne.n	80061bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	011b      	lsls	r3, r3, #4
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a14      	ldr	r2, [pc, #80]	; (8006210 <TIM_OC2_SetConfig+0xd0>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d113      	bne.n	80061ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	695b      	ldr	r3, [r3, #20]
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	4313      	orrs	r3, r2
 80061de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	699b      	ldr	r3, [r3, #24]
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	621a      	str	r2, [r3, #32]
}
 8006206:	bf00      	nop
 8006208:	371c      	adds	r7, #28
 800620a:	46bd      	mov	sp, r7
 800620c:	bc80      	pop	{r7}
 800620e:	4770      	bx	lr
 8006210:	40012c00 	.word	0x40012c00

08006214 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006214:	b480      	push	{r7}
 8006216:	b087      	sub	sp, #28
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a1b      	ldr	r3, [r3, #32]
 8006228:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f023 0303 	bic.w	r3, r3, #3
 800624a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	4313      	orrs	r3, r2
 8006254:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800625c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	021b      	lsls	r3, r3, #8
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	4313      	orrs	r3, r2
 8006268:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a1d      	ldr	r2, [pc, #116]	; (80062e4 <TIM_OC3_SetConfig+0xd0>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d10d      	bne.n	800628e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006278:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	021b      	lsls	r3, r3, #8
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	4313      	orrs	r3, r2
 8006284:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800628c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a14      	ldr	r2, [pc, #80]	; (80062e4 <TIM_OC3_SetConfig+0xd0>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d113      	bne.n	80062be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800629c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	011b      	lsls	r3, r3, #4
 80062ac:	693a      	ldr	r2, [r7, #16]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	011b      	lsls	r3, r3, #4
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	685a      	ldr	r2, [r3, #4]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	621a      	str	r2, [r3, #32]
}
 80062d8:	bf00      	nop
 80062da:	371c      	adds	r7, #28
 80062dc:	46bd      	mov	sp, r7
 80062de:	bc80      	pop	{r7}
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	40012c00 	.word	0x40012c00

080062e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b087      	sub	sp, #28
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a1b      	ldr	r3, [r3, #32]
 80062fc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800631e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	021b      	lsls	r3, r3, #8
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	4313      	orrs	r3, r2
 800632a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006332:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	031b      	lsls	r3, r3, #12
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	4313      	orrs	r3, r2
 800633e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a0f      	ldr	r2, [pc, #60]	; (8006380 <TIM_OC4_SetConfig+0x98>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d109      	bne.n	800635c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800634e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	695b      	ldr	r3, [r3, #20]
 8006354:	019b      	lsls	r3, r3, #6
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	4313      	orrs	r3, r2
 800635a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	685a      	ldr	r2, [r3, #4]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	693a      	ldr	r2, [r7, #16]
 8006374:	621a      	str	r2, [r3, #32]
}
 8006376:	bf00      	nop
 8006378:	371c      	adds	r7, #28
 800637a:	46bd      	mov	sp, r7
 800637c:	bc80      	pop	{r7}
 800637e:	4770      	bx	lr
 8006380:	40012c00 	.word	0x40012c00

08006384 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b086      	sub	sp, #24
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800638e:	2300      	movs	r3, #0
 8006390:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063a0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	f023 0307 	bic.w	r3, r3, #7
 80063b2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	2b70      	cmp	r3, #112	; 0x70
 80063cc:	d01a      	beq.n	8006404 <TIM_SlaveTimer_SetConfig+0x80>
 80063ce:	2b70      	cmp	r3, #112	; 0x70
 80063d0:	d860      	bhi.n	8006494 <TIM_SlaveTimer_SetConfig+0x110>
 80063d2:	2b60      	cmp	r3, #96	; 0x60
 80063d4:	d054      	beq.n	8006480 <TIM_SlaveTimer_SetConfig+0xfc>
 80063d6:	2b60      	cmp	r3, #96	; 0x60
 80063d8:	d85c      	bhi.n	8006494 <TIM_SlaveTimer_SetConfig+0x110>
 80063da:	2b50      	cmp	r3, #80	; 0x50
 80063dc:	d046      	beq.n	800646c <TIM_SlaveTimer_SetConfig+0xe8>
 80063de:	2b50      	cmp	r3, #80	; 0x50
 80063e0:	d858      	bhi.n	8006494 <TIM_SlaveTimer_SetConfig+0x110>
 80063e2:	2b40      	cmp	r3, #64	; 0x40
 80063e4:	d019      	beq.n	800641a <TIM_SlaveTimer_SetConfig+0x96>
 80063e6:	2b40      	cmp	r3, #64	; 0x40
 80063e8:	d854      	bhi.n	8006494 <TIM_SlaveTimer_SetConfig+0x110>
 80063ea:	2b30      	cmp	r3, #48	; 0x30
 80063ec:	d055      	beq.n	800649a <TIM_SlaveTimer_SetConfig+0x116>
 80063ee:	2b30      	cmp	r3, #48	; 0x30
 80063f0:	d850      	bhi.n	8006494 <TIM_SlaveTimer_SetConfig+0x110>
 80063f2:	2b20      	cmp	r3, #32
 80063f4:	d051      	beq.n	800649a <TIM_SlaveTimer_SetConfig+0x116>
 80063f6:	2b20      	cmp	r3, #32
 80063f8:	d84c      	bhi.n	8006494 <TIM_SlaveTimer_SetConfig+0x110>
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d04d      	beq.n	800649a <TIM_SlaveTimer_SetConfig+0x116>
 80063fe:	2b10      	cmp	r3, #16
 8006400:	d04b      	beq.n	800649a <TIM_SlaveTimer_SetConfig+0x116>
 8006402:	e047      	b.n	8006494 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6818      	ldr	r0, [r3, #0]
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	68d9      	ldr	r1, [r3, #12]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	689a      	ldr	r2, [r3, #8]
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	f000 f9cc 	bl	80067b0 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8006418:	e040      	b.n	800649c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2b05      	cmp	r3, #5
 8006420:	d101      	bne.n	8006426 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e03b      	b.n	800649e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	6a1b      	ldr	r3, [r3, #32]
 800642c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	6a1a      	ldr	r2, [r3, #32]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f022 0201 	bic.w	r2, r2, #1
 800643c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800644c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	011b      	lsls	r3, r3, #4
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	4313      	orrs	r3, r2
 8006458:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68ba      	ldr	r2, [r7, #8]
 8006460:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	621a      	str	r2, [r3, #32]
      break;
 800646a:	e017      	b.n	800649c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6818      	ldr	r0, [r3, #0]
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	6899      	ldr	r1, [r3, #8]
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	461a      	mov	r2, r3
 800647a:	f000 f86f 	bl	800655c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800647e:	e00d      	b.n	800649c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6818      	ldr	r0, [r3, #0]
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	6899      	ldr	r1, [r3, #8]
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	461a      	mov	r2, r3
 800648e:	f000 f8cf 	bl	8006630 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006492:	e003      	b.n	800649c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	75fb      	strb	r3, [r7, #23]
      break;
 8006498:	e000      	b.n	800649c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800649a:	bf00      	nop
  }

  return status;
 800649c:	7dfb      	ldrb	r3, [r7, #23]
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3718      	adds	r7, #24
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
	...

080064a8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b087      	sub	sp, #28
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]
 80064b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6a1b      	ldr	r3, [r3, #32]
 80064ba:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6a1b      	ldr	r3, [r3, #32]
 80064c0:	f023 0201 	bic.w	r2, r3, #1
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	4a1f      	ldr	r2, [pc, #124]	; (8006550 <TIM_TI1_SetConfig+0xa8>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d00b      	beq.n	80064ee <TIM_TI1_SetConfig+0x46>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064dc:	d007      	beq.n	80064ee <TIM_TI1_SetConfig+0x46>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	4a1c      	ldr	r2, [pc, #112]	; (8006554 <TIM_TI1_SetConfig+0xac>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d003      	beq.n	80064ee <TIM_TI1_SetConfig+0x46>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	4a1b      	ldr	r2, [pc, #108]	; (8006558 <TIM_TI1_SetConfig+0xb0>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d101      	bne.n	80064f2 <TIM_TI1_SetConfig+0x4a>
 80064ee:	2301      	movs	r3, #1
 80064f0:	e000      	b.n	80064f4 <TIM_TI1_SetConfig+0x4c>
 80064f2:	2300      	movs	r3, #0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d008      	beq.n	800650a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	f023 0303 	bic.w	r3, r3, #3
 80064fe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006500:	697a      	ldr	r2, [r7, #20]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4313      	orrs	r3, r2
 8006506:	617b      	str	r3, [r7, #20]
 8006508:	e003      	b.n	8006512 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	f043 0301 	orr.w	r3, r3, #1
 8006510:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006518:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	011b      	lsls	r3, r3, #4
 800651e:	b2db      	uxtb	r3, r3
 8006520:	697a      	ldr	r2, [r7, #20]
 8006522:	4313      	orrs	r3, r2
 8006524:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	f023 030a 	bic.w	r3, r3, #10
 800652c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	f003 030a 	and.w	r3, r3, #10
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	4313      	orrs	r3, r2
 8006538:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	621a      	str	r2, [r3, #32]
}
 8006546:	bf00      	nop
 8006548:	371c      	adds	r7, #28
 800654a:	46bd      	mov	sp, r7
 800654c:	bc80      	pop	{r7}
 800654e:	4770      	bx	lr
 8006550:	40012c00 	.word	0x40012c00
 8006554:	40000400 	.word	0x40000400
 8006558:	40000800 	.word	0x40000800

0800655c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800655c:	b480      	push	{r7}
 800655e:	b087      	sub	sp, #28
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6a1b      	ldr	r3, [r3, #32]
 800656c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	f023 0201 	bic.w	r2, r3, #1
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006586:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	011b      	lsls	r3, r3, #4
 800658c:	693a      	ldr	r2, [r7, #16]
 800658e:	4313      	orrs	r3, r2
 8006590:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	f023 030a 	bic.w	r3, r3, #10
 8006598:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	4313      	orrs	r3, r2
 80065a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	693a      	ldr	r2, [r7, #16]
 80065a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	697a      	ldr	r2, [r7, #20]
 80065ac:	621a      	str	r2, [r3, #32]
}
 80065ae:	bf00      	nop
 80065b0:	371c      	adds	r7, #28
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bc80      	pop	{r7}
 80065b6:	4770      	bx	lr

080065b8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b087      	sub	sp, #28
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
 80065c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6a1b      	ldr	r3, [r3, #32]
 80065d0:	f023 0210 	bic.w	r2, r3, #16
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	021b      	lsls	r3, r3, #8
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	031b      	lsls	r3, r3, #12
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	693a      	ldr	r2, [r7, #16]
 8006600:	4313      	orrs	r3, r2
 8006602:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800660a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	011b      	lsls	r3, r3, #4
 8006610:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006614:	697a      	ldr	r2, [r7, #20]
 8006616:	4313      	orrs	r3, r2
 8006618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	621a      	str	r2, [r3, #32]
}
 8006626:	bf00      	nop
 8006628:	371c      	adds	r7, #28
 800662a:	46bd      	mov	sp, r7
 800662c:	bc80      	pop	{r7}
 800662e:	4770      	bx	lr

08006630 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006630:	b480      	push	{r7}
 8006632:	b087      	sub	sp, #28
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6a1b      	ldr	r3, [r3, #32]
 8006640:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6a1b      	ldr	r3, [r3, #32]
 8006646:	f023 0210 	bic.w	r2, r3, #16
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800665a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	031b      	lsls	r3, r3, #12
 8006660:	693a      	ldr	r2, [r7, #16]
 8006662:	4313      	orrs	r3, r2
 8006664:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800666c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	011b      	lsls	r3, r3, #4
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	4313      	orrs	r3, r2
 8006676:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	621a      	str	r2, [r3, #32]
}
 8006684:	bf00      	nop
 8006686:	371c      	adds	r7, #28
 8006688:	46bd      	mov	sp, r7
 800668a:	bc80      	pop	{r7}
 800668c:	4770      	bx	lr

0800668e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800668e:	b480      	push	{r7}
 8006690:	b087      	sub	sp, #28
 8006692:	af00      	add	r7, sp, #0
 8006694:	60f8      	str	r0, [r7, #12]
 8006696:	60b9      	str	r1, [r7, #8]
 8006698:	607a      	str	r2, [r7, #4]
 800669a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6a1b      	ldr	r3, [r3, #32]
 80066a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6a1b      	ldr	r3, [r3, #32]
 80066a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	69db      	ldr	r3, [r3, #28]
 80066b2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	f023 0303 	bic.w	r3, r3, #3
 80066ba:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066ca:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	011b      	lsls	r3, r3, #4
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066de:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	021b      	lsls	r3, r3, #8
 80066e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066e8:	697a      	ldr	r2, [r7, #20]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	621a      	str	r2, [r3, #32]
}
 80066fa:	bf00      	nop
 80066fc:	371c      	adds	r7, #28
 80066fe:	46bd      	mov	sp, r7
 8006700:	bc80      	pop	{r7}
 8006702:	4770      	bx	lr

08006704 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006704:	b480      	push	{r7}
 8006706:	b087      	sub	sp, #28
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
 8006710:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6a1b      	ldr	r3, [r3, #32]
 800671c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	69db      	ldr	r3, [r3, #28]
 8006728:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006730:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	021b      	lsls	r3, r3, #8
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	4313      	orrs	r3, r2
 800673a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006742:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	031b      	lsls	r3, r3, #12
 8006748:	b29b      	uxth	r3, r3
 800674a:	693a      	ldr	r2, [r7, #16]
 800674c:	4313      	orrs	r3, r2
 800674e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006756:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	031b      	lsls	r3, r3, #12
 800675c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	4313      	orrs	r3, r2
 8006764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	693a      	ldr	r2, [r7, #16]
 800676a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	621a      	str	r2, [r3, #32]
}
 8006772:	bf00      	nop
 8006774:	371c      	adds	r7, #28
 8006776:	46bd      	mov	sp, r7
 8006778:	bc80      	pop	{r7}
 800677a:	4770      	bx	lr

0800677c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800677c:	b480      	push	{r7}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006792:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006794:	683a      	ldr	r2, [r7, #0]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	4313      	orrs	r3, r2
 800679a:	f043 0307 	orr.w	r3, r3, #7
 800679e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	609a      	str	r2, [r3, #8]
}
 80067a6:	bf00      	nop
 80067a8:	3714      	adds	r7, #20
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bc80      	pop	{r7}
 80067ae:	4770      	bx	lr

080067b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b087      	sub	sp, #28
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
 80067bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	021a      	lsls	r2, r3, #8
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	431a      	orrs	r2, r3
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	4313      	orrs	r3, r2
 80067dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	697a      	ldr	r2, [r7, #20]
 80067e2:	609a      	str	r2, [r3, #8]
}
 80067e4:	bf00      	nop
 80067e6:	371c      	adds	r7, #28
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bc80      	pop	{r7}
 80067ec:	4770      	bx	lr

080067ee <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b087      	sub	sp, #28
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	60f8      	str	r0, [r7, #12]
 80067f6:	60b9      	str	r1, [r7, #8]
 80067f8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	f003 031f 	and.w	r3, r3, #31
 8006800:	2201      	movs	r2, #1
 8006802:	fa02 f303 	lsl.w	r3, r2, r3
 8006806:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6a1a      	ldr	r2, [r3, #32]
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	43db      	mvns	r3, r3
 8006810:	401a      	ands	r2, r3
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6a1a      	ldr	r2, [r3, #32]
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	f003 031f 	and.w	r3, r3, #31
 8006820:	6879      	ldr	r1, [r7, #4]
 8006822:	fa01 f303 	lsl.w	r3, r1, r3
 8006826:	431a      	orrs	r2, r3
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	621a      	str	r2, [r3, #32]
}
 800682c:	bf00      	nop
 800682e:	371c      	adds	r7, #28
 8006830:	46bd      	mov	sp, r7
 8006832:	bc80      	pop	{r7}
 8006834:	4770      	bx	lr
	...

08006838 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006848:	2b01      	cmp	r3, #1
 800684a:	d101      	bne.n	8006850 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800684c:	2302      	movs	r3, #2
 800684e:	e046      	b.n	80068de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2202      	movs	r2, #2
 800685c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006876:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	4313      	orrs	r3, r2
 8006880:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a16      	ldr	r2, [pc, #88]	; (80068e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d00e      	beq.n	80068b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800689c:	d009      	beq.n	80068b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a12      	ldr	r2, [pc, #72]	; (80068ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d004      	beq.n	80068b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a10      	ldr	r2, [pc, #64]	; (80068f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d10c      	bne.n	80068cc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	68ba      	ldr	r2, [r7, #8]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3714      	adds	r7, #20
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bc80      	pop	{r7}
 80068e6:	4770      	bx	lr
 80068e8:	40012c00 	.word	0x40012c00
 80068ec:	40000400 	.word	0x40000400
 80068f0:	40000800 	.word	0x40000800

080068f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80068fe:	2300      	movs	r3, #0
 8006900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006908:	2b01      	cmp	r3, #1
 800690a:	d101      	bne.n	8006910 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800690c:	2302      	movs	r3, #2
 800690e:	e03d      	b.n	800698c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	4313      	orrs	r3, r2
 8006924:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	4313      	orrs	r3, r2
 8006932:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	4313      	orrs	r3, r2
 8006940:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4313      	orrs	r3, r2
 800694e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	4313      	orrs	r3, r2
 800695c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	695b      	ldr	r3, [r3, #20]
 8006968:	4313      	orrs	r3, r2
 800696a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	69db      	ldr	r3, [r3, #28]
 8006976:	4313      	orrs	r3, r2
 8006978:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3714      	adds	r7, #20
 8006990:	46bd      	mov	sp, r7
 8006992:	bc80      	pop	{r7}
 8006994:	4770      	bx	lr

08006996 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006996:	b480      	push	{r7}
 8006998:	b083      	sub	sp, #12
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800699e:	bf00      	nop
 80069a0:	370c      	adds	r7, #12
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bc80      	pop	{r7}
 80069a6:	4770      	bx	lr

080069a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069b0:	bf00      	nop
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bc80      	pop	{r7}
 80069b8:	4770      	bx	lr

080069ba <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b082      	sub	sp, #8
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d101      	bne.n	80069cc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e042      	b.n	8006a52 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d106      	bne.n	80069e6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f7fc f869 	bl	8002ab8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2224      	movs	r2, #36	; 0x24
 80069ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68da      	ldr	r2, [r3, #12]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069fc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 fcd4 	bl	80073ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	691a      	ldr	r2, [r3, #16]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a12:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	695a      	ldr	r2, [r3, #20]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a22:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68da      	ldr	r2, [r3, #12]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a32:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2220      	movs	r2, #32
 8006a3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2220      	movs	r2, #32
 8006a46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3708      	adds	r7, #8
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b084      	sub	sp, #16
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	60f8      	str	r0, [r7, #12]
 8006a62:	60b9      	str	r1, [r7, #8]
 8006a64:	4613      	mov	r3, r2
 8006a66:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	2b20      	cmp	r3, #32
 8006a72:	d112      	bne.n	8006a9a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d002      	beq.n	8006a80 <HAL_UART_Receive_IT+0x26>
 8006a7a:	88fb      	ldrh	r3, [r7, #6]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d101      	bne.n	8006a84 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e00b      	b.n	8006a9c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006a8a:	88fb      	ldrh	r3, [r7, #6]
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	68b9      	ldr	r1, [r7, #8]
 8006a90:	68f8      	ldr	r0, [r7, #12]
 8006a92:	f000 fab6 	bl	8007002 <UART_Start_Receive_IT>
 8006a96:	4603      	mov	r3, r0
 8006a98:	e000      	b.n	8006a9c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006a9a:	2302      	movs	r3, #2
  }
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3710      	adds	r7, #16
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b0ba      	sub	sp, #232	; 0xe8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	695b      	ldr	r3, [r3, #20]
 8006ac6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006aca:	2300      	movs	r3, #0
 8006acc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ada:	f003 030f 	and.w	r3, r3, #15
 8006ade:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006ae2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d10f      	bne.n	8006b0a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aee:	f003 0320 	and.w	r3, r3, #32
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d009      	beq.n	8006b0a <HAL_UART_IRQHandler+0x66>
 8006af6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006afa:	f003 0320 	and.w	r3, r3, #32
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d003      	beq.n	8006b0a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 fb93 	bl	800722e <UART_Receive_IT>
      return;
 8006b08:	e25b      	b.n	8006fc2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006b0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f000 80de 	beq.w	8006cd0 <HAL_UART_IRQHandler+0x22c>
 8006b14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b18:	f003 0301 	and.w	r3, r3, #1
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d106      	bne.n	8006b2e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b24:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f000 80d1 	beq.w	8006cd0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b32:	f003 0301 	and.w	r3, r3, #1
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00b      	beq.n	8006b52 <HAL_UART_IRQHandler+0xae>
 8006b3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d005      	beq.n	8006b52 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b4a:	f043 0201 	orr.w	r2, r3, #1
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b56:	f003 0304 	and.w	r3, r3, #4
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00b      	beq.n	8006b76 <HAL_UART_IRQHandler+0xd2>
 8006b5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b62:	f003 0301 	and.w	r3, r3, #1
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d005      	beq.n	8006b76 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b6e:	f043 0202 	orr.w	r2, r3, #2
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b7a:	f003 0302 	and.w	r3, r3, #2
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00b      	beq.n	8006b9a <HAL_UART_IRQHandler+0xf6>
 8006b82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b86:	f003 0301 	and.w	r3, r3, #1
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d005      	beq.n	8006b9a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b92:	f043 0204 	orr.w	r2, r3, #4
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b9e:	f003 0308 	and.w	r3, r3, #8
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d011      	beq.n	8006bca <HAL_UART_IRQHandler+0x126>
 8006ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006baa:	f003 0320 	and.w	r3, r3, #32
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d105      	bne.n	8006bbe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006bb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bb6:	f003 0301 	and.w	r3, r3, #1
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d005      	beq.n	8006bca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bc2:	f043 0208 	orr.w	r2, r3, #8
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	f000 81f2 	beq.w	8006fb8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bd8:	f003 0320 	and.w	r3, r3, #32
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d008      	beq.n	8006bf2 <HAL_UART_IRQHandler+0x14e>
 8006be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006be4:	f003 0320 	and.w	r3, r3, #32
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d002      	beq.n	8006bf2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 fb1e 	bl	800722e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	695b      	ldr	r3, [r3, #20]
 8006bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	bf14      	ite	ne
 8006c00:	2301      	movne	r3, #1
 8006c02:	2300      	moveq	r3, #0
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c0e:	f003 0308 	and.w	r3, r3, #8
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d103      	bne.n	8006c1e <HAL_UART_IRQHandler+0x17a>
 8006c16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d04f      	beq.n	8006cbe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 fa28 	bl	8007074 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d041      	beq.n	8006cb6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	3314      	adds	r3, #20
 8006c38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c40:	e853 3f00 	ldrex	r3, [r3]
 8006c44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006c48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	3314      	adds	r3, #20
 8006c5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006c5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006c62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006c6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006c6e:	e841 2300 	strex	r3, r2, [r1]
 8006c72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006c76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1d9      	bne.n	8006c32 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d013      	beq.n	8006cae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c8a:	4a7e      	ldr	r2, [pc, #504]	; (8006e84 <HAL_UART_IRQHandler+0x3e0>)
 8006c8c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7fc f9c2 	bl	800301c <HAL_DMA_Abort_IT>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d016      	beq.n	8006ccc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006ca8:	4610      	mov	r0, r2
 8006caa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cac:	e00e      	b.n	8006ccc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 f993 	bl	8006fda <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cb4:	e00a      	b.n	8006ccc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 f98f 	bl	8006fda <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cbc:	e006      	b.n	8006ccc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f98b 	bl	8006fda <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006cca:	e175      	b.n	8006fb8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ccc:	bf00      	nop
    return;
 8006cce:	e173      	b.n	8006fb8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	f040 814f 	bne.w	8006f78 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cde:	f003 0310 	and.w	r3, r3, #16
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f000 8148 	beq.w	8006f78 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cec:	f003 0310 	and.w	r3, r3, #16
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f000 8141 	beq.w	8006f78 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	60bb      	str	r3, [r7, #8]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	60bb      	str	r3, [r7, #8]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	60bb      	str	r3, [r7, #8]
 8006d0a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	695b      	ldr	r3, [r3, #20]
 8006d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	f000 80b6 	beq.w	8006e88 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f000 8145 	beq.w	8006fbc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	f080 813e 	bcs.w	8006fbc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d46:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	2b20      	cmp	r3, #32
 8006d50:	f000 8088 	beq.w	8006e64 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	330c      	adds	r3, #12
 8006d5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d62:	e853 3f00 	ldrex	r3, [r3]
 8006d66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006d6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	330c      	adds	r3, #12
 8006d7c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006d80:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006d84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d88:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006d8c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006d90:	e841 2300 	strex	r3, r2, [r1]
 8006d94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006d98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d1d9      	bne.n	8006d54 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	3314      	adds	r3, #20
 8006da6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006daa:	e853 3f00 	ldrex	r3, [r3]
 8006dae:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006db0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006db2:	f023 0301 	bic.w	r3, r3, #1
 8006db6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	3314      	adds	r3, #20
 8006dc0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006dc4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006dc8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dca:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006dcc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006dd0:	e841 2300 	strex	r3, r2, [r1]
 8006dd4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006dd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1e1      	bne.n	8006da0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	3314      	adds	r3, #20
 8006de2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006de6:	e853 3f00 	ldrex	r3, [r3]
 8006dea:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006dec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006df2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	3314      	adds	r3, #20
 8006dfc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006e00:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006e02:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e04:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006e06:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006e08:	e841 2300 	strex	r3, r2, [r1]
 8006e0c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006e0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d1e3      	bne.n	8006ddc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2220      	movs	r2, #32
 8006e18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	330c      	adds	r3, #12
 8006e28:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e2c:	e853 3f00 	ldrex	r3, [r3]
 8006e30:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e34:	f023 0310 	bic.w	r3, r3, #16
 8006e38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	330c      	adds	r3, #12
 8006e42:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006e46:	65ba      	str	r2, [r7, #88]	; 0x58
 8006e48:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e4e:	e841 2300 	strex	r3, r2, [r1]
 8006e52:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1e3      	bne.n	8006e22 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7fc f8a1 	bl	8002fa6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2202      	movs	r2, #2
 8006e68:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	4619      	mov	r1, r3
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 f8b6 	bl	8006fec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e80:	e09c      	b.n	8006fbc <HAL_UART_IRQHandler+0x518>
 8006e82:	bf00      	nop
 8006e84:	08007139 	.word	0x08007139
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	f000 808e 	beq.w	8006fc0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006ea4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	f000 8089 	beq.w	8006fc0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	330c      	adds	r3, #12
 8006eb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb8:	e853 3f00 	ldrex	r3, [r3]
 8006ebc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ec0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ec4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	330c      	adds	r3, #12
 8006ece:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006ed2:	647a      	str	r2, [r7, #68]	; 0x44
 8006ed4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ed8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006eda:	e841 2300 	strex	r3, r2, [r1]
 8006ede:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1e3      	bne.n	8006eae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	3314      	adds	r3, #20
 8006eec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef0:	e853 3f00 	ldrex	r3, [r3]
 8006ef4:	623b      	str	r3, [r7, #32]
   return(result);
 8006ef6:	6a3b      	ldr	r3, [r7, #32]
 8006ef8:	f023 0301 	bic.w	r3, r3, #1
 8006efc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	3314      	adds	r3, #20
 8006f06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006f0a:	633a      	str	r2, [r7, #48]	; 0x30
 8006f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f12:	e841 2300 	strex	r3, r2, [r1]
 8006f16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1e3      	bne.n	8006ee6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2220      	movs	r2, #32
 8006f22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	330c      	adds	r3, #12
 8006f32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	e853 3f00 	ldrex	r3, [r3]
 8006f3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f023 0310 	bic.w	r3, r3, #16
 8006f42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	330c      	adds	r3, #12
 8006f4c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006f50:	61fa      	str	r2, [r7, #28]
 8006f52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f54:	69b9      	ldr	r1, [r7, #24]
 8006f56:	69fa      	ldr	r2, [r7, #28]
 8006f58:	e841 2300 	strex	r3, r2, [r1]
 8006f5c:	617b      	str	r3, [r7, #20]
   return(result);
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1e3      	bne.n	8006f2c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2202      	movs	r2, #2
 8006f68:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f6e:	4619      	mov	r1, r3
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 f83b 	bl	8006fec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f76:	e023      	b.n	8006fc0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d009      	beq.n	8006f98 <HAL_UART_IRQHandler+0x4f4>
 8006f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d003      	beq.n	8006f98 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 f8e5 	bl	8007160 <UART_Transmit_IT>
    return;
 8006f96:	e014      	b.n	8006fc2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00e      	beq.n	8006fc2 <HAL_UART_IRQHandler+0x51e>
 8006fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d008      	beq.n	8006fc2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 f924 	bl	80071fe <UART_EndTransmit_IT>
    return;
 8006fb6:	e004      	b.n	8006fc2 <HAL_UART_IRQHandler+0x51e>
    return;
 8006fb8:	bf00      	nop
 8006fba:	e002      	b.n	8006fc2 <HAL_UART_IRQHandler+0x51e>
      return;
 8006fbc:	bf00      	nop
 8006fbe:	e000      	b.n	8006fc2 <HAL_UART_IRQHandler+0x51e>
      return;
 8006fc0:	bf00      	nop
  }
}
 8006fc2:	37e8      	adds	r7, #232	; 0xe8
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bc80      	pop	{r7}
 8006fd8:	4770      	bx	lr

08006fda <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b083      	sub	sp, #12
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006fe2:	bf00      	nop
 8006fe4:	370c      	adds	r7, #12
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bc80      	pop	{r7}
 8006fea:	4770      	bx	lr

08006fec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ff8:	bf00      	nop
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bc80      	pop	{r7}
 8007000:	4770      	bx	lr

08007002 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007002:	b480      	push	{r7}
 8007004:	b085      	sub	sp, #20
 8007006:	af00      	add	r7, sp, #0
 8007008:	60f8      	str	r0, [r7, #12]
 800700a:	60b9      	str	r1, [r7, #8]
 800700c:	4613      	mov	r3, r2
 800700e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	88fa      	ldrh	r2, [r7, #6]
 800701a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	88fa      	ldrh	r2, [r7, #6]
 8007020:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2222      	movs	r2, #34	; 0x22
 800702c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d007      	beq.n	8007048 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68da      	ldr	r2, [r3, #12]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007046:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	695a      	ldr	r2, [r3, #20]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f042 0201 	orr.w	r2, r2, #1
 8007056:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	68da      	ldr	r2, [r3, #12]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f042 0220 	orr.w	r2, r2, #32
 8007066:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3714      	adds	r7, #20
 800706e:	46bd      	mov	sp, r7
 8007070:	bc80      	pop	{r7}
 8007072:	4770      	bx	lr

08007074 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007074:	b480      	push	{r7}
 8007076:	b095      	sub	sp, #84	; 0x54
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	330c      	adds	r3, #12
 8007082:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007086:	e853 3f00 	ldrex	r3, [r3]
 800708a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800708c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007092:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	330c      	adds	r3, #12
 800709a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800709c:	643a      	str	r2, [r7, #64]	; 0x40
 800709e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80070a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80070a4:	e841 2300 	strex	r3, r2, [r1]
 80070a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d1e5      	bne.n	800707c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	3314      	adds	r3, #20
 80070b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b8:	6a3b      	ldr	r3, [r7, #32]
 80070ba:	e853 3f00 	ldrex	r3, [r3]
 80070be:	61fb      	str	r3, [r7, #28]
   return(result);
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	f023 0301 	bic.w	r3, r3, #1
 80070c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	3314      	adds	r3, #20
 80070ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070d8:	e841 2300 	strex	r3, r2, [r1]
 80070dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1e5      	bne.n	80070b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d119      	bne.n	8007120 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	330c      	adds	r3, #12
 80070f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	e853 3f00 	ldrex	r3, [r3]
 80070fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	f023 0310 	bic.w	r3, r3, #16
 8007102:	647b      	str	r3, [r7, #68]	; 0x44
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	330c      	adds	r3, #12
 800710a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800710c:	61ba      	str	r2, [r7, #24]
 800710e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007110:	6979      	ldr	r1, [r7, #20]
 8007112:	69ba      	ldr	r2, [r7, #24]
 8007114:	e841 2300 	strex	r3, r2, [r1]
 8007118:	613b      	str	r3, [r7, #16]
   return(result);
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d1e5      	bne.n	80070ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2220      	movs	r2, #32
 8007124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800712e:	bf00      	nop
 8007130:	3754      	adds	r7, #84	; 0x54
 8007132:	46bd      	mov	sp, r7
 8007134:	bc80      	pop	{r7}
 8007136:	4770      	bx	lr

08007138 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007144:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2200      	movs	r2, #0
 800714a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007152:	68f8      	ldr	r0, [r7, #12]
 8007154:	f7ff ff41 	bl	8006fda <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007158:	bf00      	nop
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007160:	b480      	push	{r7}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800716e:	b2db      	uxtb	r3, r3
 8007170:	2b21      	cmp	r3, #33	; 0x21
 8007172:	d13e      	bne.n	80071f2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800717c:	d114      	bne.n	80071a8 <UART_Transmit_IT+0x48>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	691b      	ldr	r3, [r3, #16]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d110      	bne.n	80071a8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a1b      	ldr	r3, [r3, #32]
 800718a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	881b      	ldrh	r3, [r3, #0]
 8007190:	461a      	mov	r2, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800719a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6a1b      	ldr	r3, [r3, #32]
 80071a0:	1c9a      	adds	r2, r3, #2
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	621a      	str	r2, [r3, #32]
 80071a6:	e008      	b.n	80071ba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6a1b      	ldr	r3, [r3, #32]
 80071ac:	1c59      	adds	r1, r3, #1
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	6211      	str	r1, [r2, #32]
 80071b2:	781a      	ldrb	r2, [r3, #0]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071be:	b29b      	uxth	r3, r3
 80071c0:	3b01      	subs	r3, #1
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	4619      	mov	r1, r3
 80071c8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10f      	bne.n	80071ee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68da      	ldr	r2, [r3, #12]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071dc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68da      	ldr	r2, [r3, #12]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071ec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80071ee:	2300      	movs	r3, #0
 80071f0:	e000      	b.n	80071f4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80071f2:	2302      	movs	r3, #2
  }
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3714      	adds	r7, #20
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bc80      	pop	{r7}
 80071fc:	4770      	bx	lr

080071fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b082      	sub	sp, #8
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68da      	ldr	r2, [r3, #12]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007214:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2220      	movs	r2, #32
 800721a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f7ff fed2 	bl	8006fc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3708      	adds	r7, #8
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800722e:	b580      	push	{r7, lr}
 8007230:	b08c      	sub	sp, #48	; 0x30
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b22      	cmp	r3, #34	; 0x22
 8007240:	f040 80ae 	bne.w	80073a0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800724c:	d117      	bne.n	800727e <UART_Receive_IT+0x50>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d113      	bne.n	800727e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007256:	2300      	movs	r3, #0
 8007258:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800725e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	b29b      	uxth	r3, r3
 8007268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800726c:	b29a      	uxth	r2, r3
 800726e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007270:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007276:	1c9a      	adds	r2, r3, #2
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	629a      	str	r2, [r3, #40]	; 0x28
 800727c:	e026      	b.n	80072cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007282:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007284:	2300      	movs	r3, #0
 8007286:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007290:	d007      	beq.n	80072a2 <UART_Receive_IT+0x74>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d10a      	bne.n	80072b0 <UART_Receive_IT+0x82>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d106      	bne.n	80072b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	b2da      	uxtb	r2, r3
 80072aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ac:	701a      	strb	r2, [r3, #0]
 80072ae:	e008      	b.n	80072c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072bc:	b2da      	uxtb	r2, r3
 80072be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c6:	1c5a      	adds	r2, r3, #1
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	3b01      	subs	r3, #1
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	4619      	mov	r1, r3
 80072da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d15d      	bne.n	800739c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68da      	ldr	r2, [r3, #12]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f022 0220 	bic.w	r2, r2, #32
 80072ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68da      	ldr	r2, [r3, #12]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	695a      	ldr	r2, [r3, #20]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f022 0201 	bic.w	r2, r2, #1
 800730e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2220      	movs	r2, #32
 8007314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007322:	2b01      	cmp	r3, #1
 8007324:	d135      	bne.n	8007392 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	330c      	adds	r3, #12
 8007332:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	e853 3f00 	ldrex	r3, [r3]
 800733a:	613b      	str	r3, [r7, #16]
   return(result);
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	f023 0310 	bic.w	r3, r3, #16
 8007342:	627b      	str	r3, [r7, #36]	; 0x24
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	330c      	adds	r3, #12
 800734a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800734c:	623a      	str	r2, [r7, #32]
 800734e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007350:	69f9      	ldr	r1, [r7, #28]
 8007352:	6a3a      	ldr	r2, [r7, #32]
 8007354:	e841 2300 	strex	r3, r2, [r1]
 8007358:	61bb      	str	r3, [r7, #24]
   return(result);
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1e5      	bne.n	800732c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f003 0310 	and.w	r3, r3, #16
 800736a:	2b10      	cmp	r3, #16
 800736c:	d10a      	bne.n	8007384 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800736e:	2300      	movs	r3, #0
 8007370:	60fb      	str	r3, [r7, #12]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	60fb      	str	r3, [r7, #12]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	60fb      	str	r3, [r7, #12]
 8007382:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007388:	4619      	mov	r1, r3
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f7ff fe2e 	bl	8006fec <HAL_UARTEx_RxEventCallback>
 8007390:	e002      	b.n	8007398 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f7fa fb92 	bl	8001abc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007398:	2300      	movs	r3, #0
 800739a:	e002      	b.n	80073a2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800739c:	2300      	movs	r3, #0
 800739e:	e000      	b.n	80073a2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80073a0:	2302      	movs	r3, #2
  }
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3730      	adds	r7, #48	; 0x30
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
	...

080073ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68da      	ldr	r2, [r3, #12]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	430a      	orrs	r2, r1
 80073c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	689a      	ldr	r2, [r3, #8]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	431a      	orrs	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	695b      	ldr	r3, [r3, #20]
 80073d8:	4313      	orrs	r3, r2
 80073da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80073e6:	f023 030c 	bic.w	r3, r3, #12
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	6812      	ldr	r2, [r2, #0]
 80073ee:	68b9      	ldr	r1, [r7, #8]
 80073f0:	430b      	orrs	r3, r1
 80073f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	699a      	ldr	r2, [r3, #24]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	430a      	orrs	r2, r1
 8007408:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a2c      	ldr	r2, [pc, #176]	; (80074c0 <UART_SetConfig+0x114>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d103      	bne.n	800741c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007414:	f7fd f8a8 	bl	8004568 <HAL_RCC_GetPCLK2Freq>
 8007418:	60f8      	str	r0, [r7, #12]
 800741a:	e002      	b.n	8007422 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800741c:	f7fd f890 	bl	8004540 <HAL_RCC_GetPCLK1Freq>
 8007420:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	4613      	mov	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	4413      	add	r3, r2
 800742a:	009a      	lsls	r2, r3, #2
 800742c:	441a      	add	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	fbb2 f3f3 	udiv	r3, r2, r3
 8007438:	4a22      	ldr	r2, [pc, #136]	; (80074c4 <UART_SetConfig+0x118>)
 800743a:	fba2 2303 	umull	r2, r3, r2, r3
 800743e:	095b      	lsrs	r3, r3, #5
 8007440:	0119      	lsls	r1, r3, #4
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	4613      	mov	r3, r2
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	4413      	add	r3, r2
 800744a:	009a      	lsls	r2, r3, #2
 800744c:	441a      	add	r2, r3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	fbb2 f2f3 	udiv	r2, r2, r3
 8007458:	4b1a      	ldr	r3, [pc, #104]	; (80074c4 <UART_SetConfig+0x118>)
 800745a:	fba3 0302 	umull	r0, r3, r3, r2
 800745e:	095b      	lsrs	r3, r3, #5
 8007460:	2064      	movs	r0, #100	; 0x64
 8007462:	fb00 f303 	mul.w	r3, r0, r3
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	011b      	lsls	r3, r3, #4
 800746a:	3332      	adds	r3, #50	; 0x32
 800746c:	4a15      	ldr	r2, [pc, #84]	; (80074c4 <UART_SetConfig+0x118>)
 800746e:	fba2 2303 	umull	r2, r3, r2, r3
 8007472:	095b      	lsrs	r3, r3, #5
 8007474:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007478:	4419      	add	r1, r3
 800747a:	68fa      	ldr	r2, [r7, #12]
 800747c:	4613      	mov	r3, r2
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	4413      	add	r3, r2
 8007482:	009a      	lsls	r2, r3, #2
 8007484:	441a      	add	r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007490:	4b0c      	ldr	r3, [pc, #48]	; (80074c4 <UART_SetConfig+0x118>)
 8007492:	fba3 0302 	umull	r0, r3, r3, r2
 8007496:	095b      	lsrs	r3, r3, #5
 8007498:	2064      	movs	r0, #100	; 0x64
 800749a:	fb00 f303 	mul.w	r3, r0, r3
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	011b      	lsls	r3, r3, #4
 80074a2:	3332      	adds	r3, #50	; 0x32
 80074a4:	4a07      	ldr	r2, [pc, #28]	; (80074c4 <UART_SetConfig+0x118>)
 80074a6:	fba2 2303 	umull	r2, r3, r2, r3
 80074aa:	095b      	lsrs	r3, r3, #5
 80074ac:	f003 020f 	and.w	r2, r3, #15
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	440a      	add	r2, r1
 80074b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80074b8:	bf00      	nop
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	40013800 	.word	0x40013800
 80074c4:	51eb851f 	.word	0x51eb851f

080074c8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80074cc:	4904      	ldr	r1, [pc, #16]	; (80074e0 <MX_FATFS_Init+0x18>)
 80074ce:	4805      	ldr	r0, [pc, #20]	; (80074e4 <MX_FATFS_Init+0x1c>)
 80074d0:	f002 fd6e 	bl	8009fb0 <FATFS_LinkDriver>
 80074d4:	4603      	mov	r3, r0
 80074d6:	461a      	mov	r2, r3
 80074d8:	4b03      	ldr	r3, [pc, #12]	; (80074e8 <MX_FATFS_Init+0x20>)
 80074da:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80074dc:	bf00      	nop
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	200009a4 	.word	0x200009a4
 80074e4:	20000020 	.word	0x20000020
 80074e8:	200009a8 	.word	0x200009a8

080074ec <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80074ec:	b480      	push	{r7}
 80074ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80074f0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bc80      	pop	{r7}
 80074f8:	4770      	bx	lr
	...

080074fc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	4603      	mov	r3, r0
 8007504:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = SD_disk_initialize(pdrv);
 8007506:	79fb      	ldrb	r3, [r7, #7]
 8007508:	4618      	mov	r0, r3
 800750a:	f7f9 fd63 	bl	8000fd4 <SD_disk_initialize>
 800750e:	4603      	mov	r3, r0
 8007510:	461a      	mov	r2, r3
 8007512:	4b04      	ldr	r3, [pc, #16]	; (8007524 <USER_initialize+0x28>)
 8007514:	701a      	strb	r2, [r3, #0]
    return Stat;
 8007516:	4b03      	ldr	r3, [pc, #12]	; (8007524 <USER_initialize+0x28>)
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800751c:	4618      	mov	r0, r3
 800751e:	3708      	adds	r7, #8
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	2000001d 	.word	0x2000001d

08007528 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	4603      	mov	r3, r0
 8007530:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8007532:	79fb      	ldrb	r3, [r7, #7]
 8007534:	4618      	mov	r0, r3
 8007536:	f7f9 fe37 	bl	80011a8 <SD_disk_status>
 800753a:	4603      	mov	r3, r0
    return Stat;
  /* USER CODE END STATUS */
}
 800753c:	4618      	mov	r0, r3
 800753e:	3708      	adds	r7, #8
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	60b9      	str	r1, [r7, #8]
 800754c:	607a      	str	r2, [r7, #4]
 800754e:	603b      	str	r3, [r7, #0]
 8007550:	4603      	mov	r3, r0
 8007552:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8007554:	7bf8      	ldrb	r0, [r7, #15]
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	68b9      	ldr	r1, [r7, #8]
 800755c:	f7f9 fe38 	bl	80011d0 <SD_disk_read>
 8007560:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007562:	4618      	mov	r0, r3
 8007564:	3710      	adds	r7, #16
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800756a:	b580      	push	{r7, lr}
 800756c:	b084      	sub	sp, #16
 800756e:	af00      	add	r7, sp, #0
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	607a      	str	r2, [r7, #4]
 8007574:	603b      	str	r3, [r7, #0]
 8007576:	4603      	mov	r3, r0
 8007578:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 800757a:	7bf8      	ldrb	r0, [r7, #15]
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	68b9      	ldr	r1, [r7, #8]
 8007582:	f7f9 fe8f 	bl	80012a4 <SD_disk_write>
 8007586:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007588:	4618      	mov	r0, r3
 800758a:	3710      	adds	r7, #16
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	4603      	mov	r3, r0
 8007598:	603a      	str	r2, [r7, #0]
 800759a:	71fb      	strb	r3, [r7, #7]
 800759c:	460b      	mov	r3, r1
 800759e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 80075a0:	79b9      	ldrb	r1, [r7, #6]
 80075a2:	79fb      	ldrb	r3, [r7, #7]
 80075a4:	683a      	ldr	r2, [r7, #0]
 80075a6:	4618      	mov	r0, r3
 80075a8:	f7f9 ff00 	bl	80013ac <SD_disk_ioctl>
 80075ac:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3708      	adds	r7, #8
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
	...

080075b8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	4603      	mov	r3, r0
 80075c0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80075c2:	79fb      	ldrb	r3, [r7, #7]
 80075c4:	4a08      	ldr	r2, [pc, #32]	; (80075e8 <disk_status+0x30>)
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	4413      	add	r3, r2
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	79fa      	ldrb	r2, [r7, #7]
 80075d0:	4905      	ldr	r1, [pc, #20]	; (80075e8 <disk_status+0x30>)
 80075d2:	440a      	add	r2, r1
 80075d4:	7a12      	ldrb	r2, [r2, #8]
 80075d6:	4610      	mov	r0, r2
 80075d8:	4798      	blx	r3
 80075da:	4603      	mov	r3, r0
 80075dc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80075de:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3710      	adds	r7, #16
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	200000e8 	.word	0x200000e8

080075ec <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	4603      	mov	r3, r0
 80075f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80075f6:	2300      	movs	r3, #0
 80075f8:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 80075fa:	79fb      	ldrb	r3, [r7, #7]
 80075fc:	4a0d      	ldr	r2, [pc, #52]	; (8007634 <disk_initialize+0x48>)
 80075fe:	5cd3      	ldrb	r3, [r2, r3]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d111      	bne.n	8007628 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8007604:	79fb      	ldrb	r3, [r7, #7]
 8007606:	4a0b      	ldr	r2, [pc, #44]	; (8007634 <disk_initialize+0x48>)
 8007608:	2101      	movs	r1, #1
 800760a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800760c:	79fb      	ldrb	r3, [r7, #7]
 800760e:	4a09      	ldr	r2, [pc, #36]	; (8007634 <disk_initialize+0x48>)
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	4413      	add	r3, r2
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	79fa      	ldrb	r2, [r7, #7]
 800761a:	4906      	ldr	r1, [pc, #24]	; (8007634 <disk_initialize+0x48>)
 800761c:	440a      	add	r2, r1
 800761e:	7a12      	ldrb	r2, [r2, #8]
 8007620:	4610      	mov	r0, r2
 8007622:	4798      	blx	r3
 8007624:	4603      	mov	r3, r0
 8007626:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007628:	7bfb      	ldrb	r3, [r7, #15]
}
 800762a:	4618      	mov	r0, r3
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	200000e8 	.word	0x200000e8

08007638 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007638:	b590      	push	{r4, r7, lr}
 800763a:	b087      	sub	sp, #28
 800763c:	af00      	add	r7, sp, #0
 800763e:	60b9      	str	r1, [r7, #8]
 8007640:	607a      	str	r2, [r7, #4]
 8007642:	603b      	str	r3, [r7, #0]
 8007644:	4603      	mov	r3, r0
 8007646:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007648:	7bfb      	ldrb	r3, [r7, #15]
 800764a:	4a0a      	ldr	r2, [pc, #40]	; (8007674 <disk_read+0x3c>)
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	4413      	add	r3, r2
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	689c      	ldr	r4, [r3, #8]
 8007654:	7bfb      	ldrb	r3, [r7, #15]
 8007656:	4a07      	ldr	r2, [pc, #28]	; (8007674 <disk_read+0x3c>)
 8007658:	4413      	add	r3, r2
 800765a:	7a18      	ldrb	r0, [r3, #8]
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	68b9      	ldr	r1, [r7, #8]
 8007662:	47a0      	blx	r4
 8007664:	4603      	mov	r3, r0
 8007666:	75fb      	strb	r3, [r7, #23]
  return res;
 8007668:	7dfb      	ldrb	r3, [r7, #23]
}
 800766a:	4618      	mov	r0, r3
 800766c:	371c      	adds	r7, #28
 800766e:	46bd      	mov	sp, r7
 8007670:	bd90      	pop	{r4, r7, pc}
 8007672:	bf00      	nop
 8007674:	200000e8 	.word	0x200000e8

08007678 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007678:	b590      	push	{r4, r7, lr}
 800767a:	b087      	sub	sp, #28
 800767c:	af00      	add	r7, sp, #0
 800767e:	60b9      	str	r1, [r7, #8]
 8007680:	607a      	str	r2, [r7, #4]
 8007682:	603b      	str	r3, [r7, #0]
 8007684:	4603      	mov	r3, r0
 8007686:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007688:	7bfb      	ldrb	r3, [r7, #15]
 800768a:	4a0a      	ldr	r2, [pc, #40]	; (80076b4 <disk_write+0x3c>)
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	4413      	add	r3, r2
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	68dc      	ldr	r4, [r3, #12]
 8007694:	7bfb      	ldrb	r3, [r7, #15]
 8007696:	4a07      	ldr	r2, [pc, #28]	; (80076b4 <disk_write+0x3c>)
 8007698:	4413      	add	r3, r2
 800769a:	7a18      	ldrb	r0, [r3, #8]
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	68b9      	ldr	r1, [r7, #8]
 80076a2:	47a0      	blx	r4
 80076a4:	4603      	mov	r3, r0
 80076a6:	75fb      	strb	r3, [r7, #23]
  return res;
 80076a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	371c      	adds	r7, #28
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd90      	pop	{r4, r7, pc}
 80076b2:	bf00      	nop
 80076b4:	200000e8 	.word	0x200000e8

080076b8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	4603      	mov	r3, r0
 80076c0:	603a      	str	r2, [r7, #0]
 80076c2:	71fb      	strb	r3, [r7, #7]
 80076c4:	460b      	mov	r3, r1
 80076c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80076c8:	79fb      	ldrb	r3, [r7, #7]
 80076ca:	4a09      	ldr	r2, [pc, #36]	; (80076f0 <disk_ioctl+0x38>)
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	4413      	add	r3, r2
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	79fa      	ldrb	r2, [r7, #7]
 80076d6:	4906      	ldr	r1, [pc, #24]	; (80076f0 <disk_ioctl+0x38>)
 80076d8:	440a      	add	r2, r1
 80076da:	7a10      	ldrb	r0, [r2, #8]
 80076dc:	79b9      	ldrb	r1, [r7, #6]
 80076de:	683a      	ldr	r2, [r7, #0]
 80076e0:	4798      	blx	r3
 80076e2:	4603      	mov	r3, r0
 80076e4:	73fb      	strb	r3, [r7, #15]
  return res;
 80076e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3710      	adds	r7, #16
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}
 80076f0:	200000e8 	.word	0x200000e8

080076f4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80076f4:	b480      	push	{r7}
 80076f6:	b087      	sub	sp, #28
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8007708:	e007      	b.n	800771a <mem_cpy+0x26>
		*d++ = *s++;
 800770a:	693a      	ldr	r2, [r7, #16]
 800770c:	1c53      	adds	r3, r2, #1
 800770e:	613b      	str	r3, [r7, #16]
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	1c59      	adds	r1, r3, #1
 8007714:	6179      	str	r1, [r7, #20]
 8007716:	7812      	ldrb	r2, [r2, #0]
 8007718:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	1e5a      	subs	r2, r3, #1
 800771e:	607a      	str	r2, [r7, #4]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1f2      	bne.n	800770a <mem_cpy+0x16>
}
 8007724:	bf00      	nop
 8007726:	bf00      	nop
 8007728:	371c      	adds	r7, #28
 800772a:	46bd      	mov	sp, r7
 800772c:	bc80      	pop	{r7}
 800772e:	4770      	bx	lr

08007730 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007730:	b480      	push	{r7}
 8007732:	b087      	sub	sp, #28
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8007740:	e005      	b.n	800774e <mem_set+0x1e>
		*d++ = (BYTE)val;
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	1c5a      	adds	r2, r3, #1
 8007746:	617a      	str	r2, [r7, #20]
 8007748:	68ba      	ldr	r2, [r7, #8]
 800774a:	b2d2      	uxtb	r2, r2
 800774c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	1e5a      	subs	r2, r3, #1
 8007752:	607a      	str	r2, [r7, #4]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d1f4      	bne.n	8007742 <mem_set+0x12>
}
 8007758:	bf00      	nop
 800775a:	bf00      	nop
 800775c:	371c      	adds	r7, #28
 800775e:	46bd      	mov	sp, r7
 8007760:	bc80      	pop	{r7}
 8007762:	4770      	bx	lr

08007764 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8007764:	b480      	push	{r7}
 8007766:	b089      	sub	sp, #36	; 0x24
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	61fb      	str	r3, [r7, #28]
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007778:	2300      	movs	r3, #0
 800777a:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800777c:	bf00      	nop
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	1e5a      	subs	r2, r3, #1
 8007782:	607a      	str	r2, [r7, #4]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d00d      	beq.n	80077a4 <mem_cmp+0x40>
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	1c5a      	adds	r2, r3, #1
 800778c:	61fa      	str	r2, [r7, #28]
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	4619      	mov	r1, r3
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	1c5a      	adds	r2, r3, #1
 8007796:	61ba      	str	r2, [r7, #24]
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	1acb      	subs	r3, r1, r3
 800779c:	617b      	str	r3, [r7, #20]
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d0ec      	beq.n	800777e <mem_cmp+0x1a>
	return r;
 80077a4:	697b      	ldr	r3, [r7, #20]
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3724      	adds	r7, #36	; 0x24
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bc80      	pop	{r7}
 80077ae:	4770      	bx	lr

080077b0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80077ba:	e002      	b.n	80077c2 <chk_chr+0x12>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	3301      	adds	r3, #1
 80077c0:	607b      	str	r3, [r7, #4]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d005      	beq.n	80077d6 <chk_chr+0x26>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	461a      	mov	r2, r3
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d1f2      	bne.n	80077bc <chk_chr+0xc>
	return *str;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	781b      	ldrb	r3, [r3, #0]
}
 80077da:	4618      	mov	r0, r3
 80077dc:	370c      	adds	r7, #12
 80077de:	46bd      	mov	sp, r7
 80077e0:	bc80      	pop	{r7}
 80077e2:	4770      	bx	lr

080077e4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80077ee:	2300      	movs	r3, #0
 80077f0:	60bb      	str	r3, [r7, #8]
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	60fb      	str	r3, [r7, #12]
 80077f6:	e038      	b.n	800786a <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 80077f8:	492f      	ldr	r1, [pc, #188]	; (80078b8 <chk_lock+0xd4>)
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	4613      	mov	r3, r2
 80077fe:	005b      	lsls	r3, r3, #1
 8007800:	4413      	add	r3, r2
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	440b      	add	r3, r1
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d029      	beq.n	8007860 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800780c:	492a      	ldr	r1, [pc, #168]	; (80078b8 <chk_lock+0xd4>)
 800780e:	68fa      	ldr	r2, [r7, #12]
 8007810:	4613      	mov	r3, r2
 8007812:	005b      	lsls	r3, r3, #1
 8007814:	4413      	add	r3, r2
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	440b      	add	r3, r1
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007822:	429a      	cmp	r2, r3
 8007824:	d11e      	bne.n	8007864 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8007826:	4924      	ldr	r1, [pc, #144]	; (80078b8 <chk_lock+0xd4>)
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	4613      	mov	r3, r2
 800782c:	005b      	lsls	r3, r3, #1
 800782e:	4413      	add	r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	440b      	add	r3, r1
 8007834:	3304      	adds	r3, #4
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800783e:	429a      	cmp	r2, r3
 8007840:	d110      	bne.n	8007864 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8007842:	491d      	ldr	r1, [pc, #116]	; (80078b8 <chk_lock+0xd4>)
 8007844:	68fa      	ldr	r2, [r7, #12]
 8007846:	4613      	mov	r3, r2
 8007848:	005b      	lsls	r3, r3, #1
 800784a:	4413      	add	r3, r2
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	440b      	add	r3, r1
 8007850:	3308      	adds	r3, #8
 8007852:	881a      	ldrh	r2, [r3, #0]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 800785a:	429a      	cmp	r2, r3
 800785c:	d102      	bne.n	8007864 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800785e:	e007      	b.n	8007870 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8007860:	2301      	movs	r3, #1
 8007862:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	3301      	adds	r3, #1
 8007868:	60fb      	str	r3, [r7, #12]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d9c3      	bls.n	80077f8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2b02      	cmp	r3, #2
 8007874:	d109      	bne.n	800788a <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d102      	bne.n	8007882 <chk_lock+0x9e>
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	2b02      	cmp	r3, #2
 8007880:	d101      	bne.n	8007886 <chk_lock+0xa2>
 8007882:	2300      	movs	r3, #0
 8007884:	e013      	b.n	80078ae <chk_lock+0xca>
 8007886:	2312      	movs	r3, #18
 8007888:	e011      	b.n	80078ae <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d10b      	bne.n	80078a8 <chk_lock+0xc4>
 8007890:	4909      	ldr	r1, [pc, #36]	; (80078b8 <chk_lock+0xd4>)
 8007892:	68fa      	ldr	r2, [r7, #12]
 8007894:	4613      	mov	r3, r2
 8007896:	005b      	lsls	r3, r3, #1
 8007898:	4413      	add	r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	440b      	add	r3, r1
 800789e:	330a      	adds	r3, #10
 80078a0:	881b      	ldrh	r3, [r3, #0]
 80078a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078a6:	d101      	bne.n	80078ac <chk_lock+0xc8>
 80078a8:	2310      	movs	r3, #16
 80078aa:	e000      	b.n	80078ae <chk_lock+0xca>
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3714      	adds	r7, #20
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bc80      	pop	{r7}
 80078b6:	4770      	bx	lr
 80078b8:	200000d0 	.word	0x200000d0

080078bc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80078c2:	2300      	movs	r3, #0
 80078c4:	607b      	str	r3, [r7, #4]
 80078c6:	e002      	b.n	80078ce <enq_lock+0x12>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	3301      	adds	r3, #1
 80078cc:	607b      	str	r3, [r7, #4]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d809      	bhi.n	80078e8 <enq_lock+0x2c>
 80078d4:	490a      	ldr	r1, [pc, #40]	; (8007900 <enq_lock+0x44>)
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	4613      	mov	r3, r2
 80078da:	005b      	lsls	r3, r3, #1
 80078dc:	4413      	add	r3, r2
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	440b      	add	r3, r1
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d1ef      	bne.n	80078c8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	bf14      	ite	ne
 80078ee:	2301      	movne	r3, #1
 80078f0:	2300      	moveq	r3, #0
 80078f2:	b2db      	uxtb	r3, r3
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bc80      	pop	{r7}
 80078fc:	4770      	bx	lr
 80078fe:	bf00      	nop
 8007900:	200000d0 	.word	0x200000d0

08007904 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007904:	b480      	push	{r7}
 8007906:	b085      	sub	sp, #20
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800790e:	2300      	movs	r3, #0
 8007910:	60fb      	str	r3, [r7, #12]
 8007912:	e02b      	b.n	800796c <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8007914:	4955      	ldr	r1, [pc, #340]	; (8007a6c <inc_lock+0x168>)
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	4613      	mov	r3, r2
 800791a:	005b      	lsls	r3, r3, #1
 800791c:	4413      	add	r3, r2
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	440b      	add	r3, r1
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800792a:	429a      	cmp	r2, r3
 800792c:	d11b      	bne.n	8007966 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 800792e:	494f      	ldr	r1, [pc, #316]	; (8007a6c <inc_lock+0x168>)
 8007930:	68fa      	ldr	r2, [r7, #12]
 8007932:	4613      	mov	r3, r2
 8007934:	005b      	lsls	r3, r3, #1
 8007936:	4413      	add	r3, r2
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	440b      	add	r3, r1
 800793c:	3304      	adds	r3, #4
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 8007946:	429a      	cmp	r2, r3
 8007948:	d10d      	bne.n	8007966 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 800794a:	4948      	ldr	r1, [pc, #288]	; (8007a6c <inc_lock+0x168>)
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	4613      	mov	r3, r2
 8007950:	005b      	lsls	r3, r3, #1
 8007952:	4413      	add	r3, r2
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	440b      	add	r3, r1
 8007958:	3308      	adds	r3, #8
 800795a:	881a      	ldrh	r2, [r3, #0]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 8007962:	429a      	cmp	r2, r3
 8007964:	d006      	beq.n	8007974 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	3301      	adds	r3, #1
 800796a:	60fb      	str	r3, [r7, #12]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2b01      	cmp	r3, #1
 8007970:	d9d0      	bls.n	8007914 <inc_lock+0x10>
 8007972:	e000      	b.n	8007976 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8007974:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2b02      	cmp	r3, #2
 800797a:	d145      	bne.n	8007a08 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800797c:	2300      	movs	r3, #0
 800797e:	60fb      	str	r3, [r7, #12]
 8007980:	e002      	b.n	8007988 <inc_lock+0x84>
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	3301      	adds	r3, #1
 8007986:	60fb      	str	r3, [r7, #12]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2b01      	cmp	r3, #1
 800798c:	d809      	bhi.n	80079a2 <inc_lock+0x9e>
 800798e:	4937      	ldr	r1, [pc, #220]	; (8007a6c <inc_lock+0x168>)
 8007990:	68fa      	ldr	r2, [r7, #12]
 8007992:	4613      	mov	r3, r2
 8007994:	005b      	lsls	r3, r3, #1
 8007996:	4413      	add	r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	440b      	add	r3, r1
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1ef      	bne.n	8007982 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d101      	bne.n	80079ac <inc_lock+0xa8>
 80079a8:	2300      	movs	r3, #0
 80079aa:	e05a      	b.n	8007a62 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 80079b2:	482e      	ldr	r0, [pc, #184]	; (8007a6c <inc_lock+0x168>)
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	4613      	mov	r3, r2
 80079b8:	005b      	lsls	r3, r3, #1
 80079ba:	4413      	add	r3, r2
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	4403      	add	r3, r0
 80079c0:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 80079c8:	4828      	ldr	r0, [pc, #160]	; (8007a6c <inc_lock+0x168>)
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	4613      	mov	r3, r2
 80079ce:	005b      	lsls	r3, r3, #1
 80079d0:	4413      	add	r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	4403      	add	r3, r0
 80079d6:	3304      	adds	r3, #4
 80079d8:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 80079e0:	4922      	ldr	r1, [pc, #136]	; (8007a6c <inc_lock+0x168>)
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	4613      	mov	r3, r2
 80079e6:	005b      	lsls	r3, r3, #1
 80079e8:	4413      	add	r3, r2
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	440b      	add	r3, r1
 80079ee:	3308      	adds	r3, #8
 80079f0:	4602      	mov	r2, r0
 80079f2:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80079f4:	491d      	ldr	r1, [pc, #116]	; (8007a6c <inc_lock+0x168>)
 80079f6:	68fa      	ldr	r2, [r7, #12]
 80079f8:	4613      	mov	r3, r2
 80079fa:	005b      	lsls	r3, r3, #1
 80079fc:	4413      	add	r3, r2
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	440b      	add	r3, r1
 8007a02:	330a      	adds	r3, #10
 8007a04:	2200      	movs	r2, #0
 8007a06:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00c      	beq.n	8007a28 <inc_lock+0x124>
 8007a0e:	4917      	ldr	r1, [pc, #92]	; (8007a6c <inc_lock+0x168>)
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	4613      	mov	r3, r2
 8007a14:	005b      	lsls	r3, r3, #1
 8007a16:	4413      	add	r3, r2
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	440b      	add	r3, r1
 8007a1c:	330a      	adds	r3, #10
 8007a1e:	881b      	ldrh	r3, [r3, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d001      	beq.n	8007a28 <inc_lock+0x124>
 8007a24:	2300      	movs	r3, #0
 8007a26:	e01c      	b.n	8007a62 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d10b      	bne.n	8007a46 <inc_lock+0x142>
 8007a2e:	490f      	ldr	r1, [pc, #60]	; (8007a6c <inc_lock+0x168>)
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	4613      	mov	r3, r2
 8007a34:	005b      	lsls	r3, r3, #1
 8007a36:	4413      	add	r3, r2
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	440b      	add	r3, r1
 8007a3c:	330a      	adds	r3, #10
 8007a3e:	881b      	ldrh	r3, [r3, #0]
 8007a40:	3301      	adds	r3, #1
 8007a42:	b299      	uxth	r1, r3
 8007a44:	e001      	b.n	8007a4a <inc_lock+0x146>
 8007a46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007a4a:	4808      	ldr	r0, [pc, #32]	; (8007a6c <inc_lock+0x168>)
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	4613      	mov	r3, r2
 8007a50:	005b      	lsls	r3, r3, #1
 8007a52:	4413      	add	r3, r2
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	4403      	add	r3, r0
 8007a58:	330a      	adds	r3, #10
 8007a5a:	460a      	mov	r2, r1
 8007a5c:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	3301      	adds	r3, #1
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3714      	adds	r7, #20
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bc80      	pop	{r7}
 8007a6a:	4770      	bx	lr
 8007a6c:	200000d0 	.word	0x200000d0

08007a70 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b085      	sub	sp, #20
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	607b      	str	r3, [r7, #4]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d82e      	bhi.n	8007ae2 <dec_lock+0x72>
		n = Files[i].ctr;
 8007a84:	491b      	ldr	r1, [pc, #108]	; (8007af4 <dec_lock+0x84>)
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	4613      	mov	r3, r2
 8007a8a:	005b      	lsls	r3, r3, #1
 8007a8c:	4413      	add	r3, r2
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	440b      	add	r3, r1
 8007a92:	330a      	adds	r3, #10
 8007a94:	881b      	ldrh	r3, [r3, #0]
 8007a96:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007a98:	89fb      	ldrh	r3, [r7, #14]
 8007a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a9e:	d101      	bne.n	8007aa4 <dec_lock+0x34>
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8007aa4:	89fb      	ldrh	r3, [r7, #14]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d002      	beq.n	8007ab0 <dec_lock+0x40>
 8007aaa:	89fb      	ldrh	r3, [r7, #14]
 8007aac:	3b01      	subs	r3, #1
 8007aae:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007ab0:	4910      	ldr	r1, [pc, #64]	; (8007af4 <dec_lock+0x84>)
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	005b      	lsls	r3, r3, #1
 8007ab8:	4413      	add	r3, r2
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	440b      	add	r3, r1
 8007abe:	330a      	adds	r3, #10
 8007ac0:	89fa      	ldrh	r2, [r7, #14]
 8007ac2:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007ac4:	89fb      	ldrh	r3, [r7, #14]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d108      	bne.n	8007adc <dec_lock+0x6c>
 8007aca:	490a      	ldr	r1, [pc, #40]	; (8007af4 <dec_lock+0x84>)
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	4613      	mov	r3, r2
 8007ad0:	005b      	lsls	r3, r3, #1
 8007ad2:	4413      	add	r3, r2
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	440b      	add	r3, r1
 8007ad8:	2200      	movs	r2, #0
 8007ada:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007adc:	2300      	movs	r3, #0
 8007ade:	737b      	strb	r3, [r7, #13]
 8007ae0:	e001      	b.n	8007ae6 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007ae2:	2302      	movs	r3, #2
 8007ae4:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007ae6:	7b7b      	ldrb	r3, [r7, #13]
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3714      	adds	r7, #20
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bc80      	pop	{r7}
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	200000d0 	.word	0x200000d0

08007af8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b085      	sub	sp, #20
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007b00:	2300      	movs	r3, #0
 8007b02:	60fb      	str	r3, [r7, #12]
 8007b04:	e016      	b.n	8007b34 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007b06:	4910      	ldr	r1, [pc, #64]	; (8007b48 <clear_lock+0x50>)
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	005b      	lsls	r3, r3, #1
 8007b0e:	4413      	add	r3, r2
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	440b      	add	r3, r1
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d108      	bne.n	8007b2e <clear_lock+0x36>
 8007b1c:	490a      	ldr	r1, [pc, #40]	; (8007b48 <clear_lock+0x50>)
 8007b1e:	68fa      	ldr	r2, [r7, #12]
 8007b20:	4613      	mov	r3, r2
 8007b22:	005b      	lsls	r3, r3, #1
 8007b24:	4413      	add	r3, r2
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	440b      	add	r3, r1
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	3301      	adds	r3, #1
 8007b32:	60fb      	str	r3, [r7, #12]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d9e5      	bls.n	8007b06 <clear_lock+0xe>
	}
}
 8007b3a:	bf00      	nop
 8007b3c:	bf00      	nop
 8007b3e:	3714      	adds	r7, #20
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bc80      	pop	{r7}
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	200000d0 	.word	0x200000d0

08007b4c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b086      	sub	sp, #24
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007b54:	2300      	movs	r3, #0
 8007b56:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d038      	beq.n	8007bd4 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8007b68:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007b70:	6879      	ldr	r1, [r7, #4]
 8007b72:	2301      	movs	r3, #1
 8007b74:	697a      	ldr	r2, [r7, #20]
 8007b76:	f7ff fd7f 	bl	8007678 <disk_write>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d002      	beq.n	8007b86 <sync_window+0x3a>
			res = FR_DISK_ERR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	73fb      	strb	r3, [r7, #15]
 8007b84:	e026      	b.n	8007bd4 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007b94:	697a      	ldr	r2, [r7, #20]
 8007b96:	1ad2      	subs	r2, r2, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d218      	bcs.n	8007bd4 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8007ba8:	613b      	str	r3, [r7, #16]
 8007baa:	e010      	b.n	8007bce <sync_window+0x82>
					wsect += fs->fsize;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007bb2:	697a      	ldr	r2, [r7, #20]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007bbe:	6879      	ldr	r1, [r7, #4]
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	697a      	ldr	r2, [r7, #20]
 8007bc4:	f7ff fd58 	bl	8007678 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	613b      	str	r3, [r7, #16]
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d8eb      	bhi.n	8007bac <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8007bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3718      	adds	r7, #24
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b084      	sub	sp, #16
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
 8007be6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007be8:	2300      	movs	r3, #0
 8007bea:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8007bf2:	683a      	ldr	r2, [r7, #0]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d01b      	beq.n	8007c30 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f7ff ffa7 	bl	8007b4c <sync_window>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007c02:	7bfb      	ldrb	r3, [r7, #15]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d113      	bne.n	8007c30 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007c0e:	6879      	ldr	r1, [r7, #4]
 8007c10:	2301      	movs	r3, #1
 8007c12:	683a      	ldr	r2, [r7, #0]
 8007c14:	f7ff fd10 	bl	8007638 <disk_read>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d004      	beq.n	8007c28 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c22:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	683a      	ldr	r2, [r7, #0]
 8007c2c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8007c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b084      	sub	sp, #16
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f7ff ff82 	bl	8007b4c <sync_window>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007c4c:	7bfb      	ldrb	r3, [r7, #15]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	f040 809b 	bne.w	8007d8a <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007c5a:	2b03      	cmp	r3, #3
 8007c5c:	f040 8088 	bne.w	8007d70 <sync_fs+0x136>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	f040 8082 	bne.w	8007d70 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c72:	2100      	movs	r1, #0
 8007c74:	4618      	mov	r0, r3
 8007c76:	f7ff fd5b 	bl	8007730 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2255      	movs	r2, #85	; 0x55
 8007c7e:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	22aa      	movs	r2, #170	; 0xaa
 8007c86:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2252      	movs	r2, #82	; 0x52
 8007c8e:	701a      	strb	r2, [r3, #0]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2252      	movs	r2, #82	; 0x52
 8007c94:	705a      	strb	r2, [r3, #1]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2261      	movs	r2, #97	; 0x61
 8007c9a:	709a      	strb	r2, [r3, #2]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2241      	movs	r2, #65	; 0x41
 8007ca0:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2272      	movs	r2, #114	; 0x72
 8007ca6:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2272      	movs	r2, #114	; 0x72
 8007cae:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2241      	movs	r2, #65	; 0x41
 8007cb6:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2261      	movs	r2, #97	; 0x61
 8007cbe:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007cc8:	b2da      	uxtb	r2, r3
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	0a1b      	lsrs	r3, r3, #8
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	b2da      	uxtb	r2, r3
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007cea:	0c1b      	lsrs	r3, r3, #16
 8007cec:	b2da      	uxtb	r2, r3
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007cfa:	0e1b      	lsrs	r3, r3, #24
 8007cfc:	b2da      	uxtb	r2, r3
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007d0a:	b2da      	uxtb	r2, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	0a1b      	lsrs	r3, r3, #8
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	b2da      	uxtb	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007d2c:	0c1b      	lsrs	r3, r3, #16
 8007d2e:	b2da      	uxtb	r2, r3
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007d3c:	0e1b      	lsrs	r3, r3, #24
 8007d3e:	b2da      	uxtb	r2, r3
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007d4c:	1c5a      	adds	r2, r3, #1
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007d5a:	6879      	ldr	r1, [r7, #4]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8007d62:	2301      	movs	r3, #1
 8007d64:	f7ff fc88 	bl	8007678 <disk_write>
			fs->fsi_flag = 0;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007d76:	2200      	movs	r2, #0
 8007d78:	2100      	movs	r1, #0
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7ff fc9c 	bl	80076b8 <disk_ioctl>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d001      	beq.n	8007d8a <sync_fs+0x150>
			res = FR_DISK_ERR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3710      	adds	r7, #16
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	3b02      	subs	r3, #2
 8007da2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007daa:	3b02      	subs	r3, #2
 8007dac:	683a      	ldr	r2, [r7, #0]
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d301      	bcc.n	8007db6 <clust2sect+0x22>
 8007db2:	2300      	movs	r3, #0
 8007db4:	e00a      	b.n	8007dcc <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	fb03 f202 	mul.w	r2, r3, r2
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8007dca:	4413      	add	r3, r2
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bc80      	pop	{r7}
 8007dd4:	4770      	bx	lr

08007dd6 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b086      	sub	sp, #24
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
 8007dde:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d905      	bls.n	8007df2 <get_fat+0x1c>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007dec:	683a      	ldr	r2, [r7, #0]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d302      	bcc.n	8007df8 <get_fat+0x22>
		val = 1;	/* Internal error */
 8007df2:	2301      	movs	r3, #1
 8007df4:	617b      	str	r3, [r7, #20]
 8007df6:	e0a3      	b.n	8007f40 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007df8:	f04f 33ff 	mov.w	r3, #4294967295
 8007dfc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007e04:	2b03      	cmp	r3, #3
 8007e06:	d068      	beq.n	8007eda <get_fat+0x104>
 8007e08:	2b03      	cmp	r3, #3
 8007e0a:	f300 808f 	bgt.w	8007f2c <get_fat+0x156>
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d002      	beq.n	8007e18 <get_fat+0x42>
 8007e12:	2b02      	cmp	r3, #2
 8007e14:	d040      	beq.n	8007e98 <get_fat+0xc2>
 8007e16:	e089      	b.n	8007f2c <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	60fb      	str	r3, [r7, #12]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	085b      	lsrs	r3, r3, #1
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	4413      	add	r3, r2
 8007e24:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	0a5b      	lsrs	r3, r3, #9
 8007e30:	4413      	add	r3, r2
 8007e32:	4619      	mov	r1, r3
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f7ff fed2 	bl	8007bde <move_window>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d178      	bne.n	8007f32 <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	1c5a      	adds	r2, r3, #1
 8007e44:	60fa      	str	r2, [r7, #12]
 8007e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	5cd3      	ldrb	r3, [r2, r3]
 8007e4e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	0a5b      	lsrs	r3, r3, #9
 8007e5a:	4413      	add	r3, r2
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f7ff febd 	bl	8007bde <move_window>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d165      	bne.n	8007f36 <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	5cd3      	ldrb	r3, [r2, r3]
 8007e74:	021b      	lsls	r3, r3, #8
 8007e76:	461a      	mov	r2, r3
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	f003 0301 	and.w	r3, r3, #1
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d002      	beq.n	8007e8e <get_fat+0xb8>
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	091b      	lsrs	r3, r3, #4
 8007e8c:	e002      	b.n	8007e94 <get_fat+0xbe>
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e94:	617b      	str	r3, [r7, #20]
			break;
 8007e96:	e053      	b.n	8007f40 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	0a1b      	lsrs	r3, r3, #8
 8007ea2:	4413      	add	r3, r2
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f7ff fe99 	bl	8007bde <move_window>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d143      	bne.n	8007f3a <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	005b      	lsls	r3, r3, #1
 8007eb6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	021b      	lsls	r3, r3, #8
 8007ec8:	b21a      	sxth	r2, r3
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	b21b      	sxth	r3, r3
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	b21b      	sxth	r3, r3
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	617b      	str	r3, [r7, #20]
			break;
 8007ed8:	e032      	b.n	8007f40 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	09db      	lsrs	r3, r3, #7
 8007ee4:	4413      	add	r3, r2
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f7ff fe78 	bl	8007bde <move_window>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d124      	bne.n	8007f3e <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	4413      	add	r3, r2
 8007f00:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	3303      	adds	r3, #3
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	061a      	lsls	r2, r3, #24
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	3302      	adds	r3, #2
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	041b      	lsls	r3, r3, #16
 8007f12:	4313      	orrs	r3, r2
 8007f14:	693a      	ldr	r2, [r7, #16]
 8007f16:	3201      	adds	r2, #1
 8007f18:	7812      	ldrb	r2, [r2, #0]
 8007f1a:	0212      	lsls	r2, r2, #8
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	693a      	ldr	r2, [r7, #16]
 8007f20:	7812      	ldrb	r2, [r2, #0]
 8007f22:	4313      	orrs	r3, r2
 8007f24:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007f28:	617b      	str	r3, [r7, #20]
			break;
 8007f2a:	e009      	b.n	8007f40 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	617b      	str	r3, [r7, #20]
 8007f30:	e006      	b.n	8007f40 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007f32:	bf00      	nop
 8007f34:	e004      	b.n	8007f40 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007f36:	bf00      	nop
 8007f38:	e002      	b.n	8007f40 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007f3a:	bf00      	nop
 8007f3c:	e000      	b.n	8007f40 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007f3e:	bf00      	nop
		}
	}

	return val;
 8007f40:	697b      	ldr	r3, [r7, #20]
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3718      	adds	r7, #24
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b088      	sub	sp, #32
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	60f8      	str	r0, [r7, #12]
 8007f52:	60b9      	str	r1, [r7, #8]
 8007f54:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d905      	bls.n	8007f68 <put_fat+0x1e>
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007f62:	68ba      	ldr	r2, [r7, #8]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d302      	bcc.n	8007f6e <put_fat+0x24>
		res = FR_INT_ERR;
 8007f68:	2302      	movs	r3, #2
 8007f6a:	77fb      	strb	r3, [r7, #31]
 8007f6c:	e0f6      	b.n	800815c <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007f74:	2b03      	cmp	r3, #3
 8007f76:	f000 809e 	beq.w	80080b6 <put_fat+0x16c>
 8007f7a:	2b03      	cmp	r3, #3
 8007f7c:	f300 80e4 	bgt.w	8008148 <put_fat+0x1fe>
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d002      	beq.n	8007f8a <put_fat+0x40>
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	d06f      	beq.n	8008068 <put_fat+0x11e>
 8007f88:	e0de      	b.n	8008148 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	617b      	str	r3, [r7, #20]
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	085b      	lsrs	r3, r3, #1
 8007f92:	697a      	ldr	r2, [r7, #20]
 8007f94:	4413      	add	r3, r2
 8007f96:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	0a5b      	lsrs	r3, r3, #9
 8007fa2:	4413      	add	r3, r2
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	f7ff fe19 	bl	8007bde <move_window>
 8007fac:	4603      	mov	r3, r0
 8007fae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007fb0:	7ffb      	ldrb	r3, [r7, #31]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	f040 80cb 	bne.w	800814e <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	1c5a      	adds	r2, r3, #1
 8007fbc:	617a      	str	r2, [r7, #20]
 8007fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fc2:	68fa      	ldr	r2, [r7, #12]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	f003 0301 	and.w	r3, r3, #1
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d00d      	beq.n	8007fee <put_fat+0xa4>
 8007fd2:	69bb      	ldr	r3, [r7, #24]
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	b25b      	sxtb	r3, r3
 8007fd8:	f003 030f 	and.w	r3, r3, #15
 8007fdc:	b25a      	sxtb	r2, r3
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	011b      	lsls	r3, r3, #4
 8007fe4:	b25b      	sxtb	r3, r3
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	b25b      	sxtb	r3, r3
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	e001      	b.n	8007ff2 <put_fat+0xa8>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	69ba      	ldr	r2, [r7, #24]
 8007ff4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	0a5b      	lsrs	r3, r3, #9
 8008008:	4413      	add	r3, r2
 800800a:	4619      	mov	r1, r3
 800800c:	68f8      	ldr	r0, [r7, #12]
 800800e:	f7ff fde6 	bl	8007bde <move_window>
 8008012:	4603      	mov	r3, r0
 8008014:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008016:	7ffb      	ldrb	r3, [r7, #31]
 8008018:	2b00      	cmp	r3, #0
 800801a:	f040 809a 	bne.w	8008152 <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	4413      	add	r3, r2
 8008028:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	f003 0301 	and.w	r3, r3, #1
 8008030:	2b00      	cmp	r3, #0
 8008032:	d003      	beq.n	800803c <put_fat+0xf2>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	091b      	lsrs	r3, r3, #4
 8008038:	b2db      	uxtb	r3, r3
 800803a:	e00e      	b.n	800805a <put_fat+0x110>
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	b25b      	sxtb	r3, r3
 8008042:	f023 030f 	bic.w	r3, r3, #15
 8008046:	b25a      	sxtb	r2, r3
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	0a1b      	lsrs	r3, r3, #8
 800804c:	b25b      	sxtb	r3, r3
 800804e:	f003 030f 	and.w	r3, r3, #15
 8008052:	b25b      	sxtb	r3, r3
 8008054:	4313      	orrs	r3, r2
 8008056:	b25b      	sxtb	r3, r3
 8008058:	b2db      	uxtb	r3, r3
 800805a:	69ba      	ldr	r2, [r7, #24]
 800805c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2201      	movs	r2, #1
 8008062:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8008066:	e079      	b.n	800815c <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	0a1b      	lsrs	r3, r3, #8
 8008072:	4413      	add	r3, r2
 8008074:	4619      	mov	r1, r3
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	f7ff fdb1 	bl	8007bde <move_window>
 800807c:	4603      	mov	r3, r0
 800807e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008080:	7ffb      	ldrb	r3, [r7, #31]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d167      	bne.n	8008156 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	005b      	lsls	r3, r3, #1
 800808a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	4413      	add	r3, r2
 8008092:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	b2da      	uxtb	r2, r3
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	701a      	strb	r2, [r3, #0]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	b29b      	uxth	r3, r3
 80080a0:	0a1b      	lsrs	r3, r3, #8
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	3301      	adds	r3, #1
 80080a8:	b2d2      	uxtb	r2, r2
 80080aa:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80080b4:	e052      	b.n	800815c <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	09db      	lsrs	r3, r3, #7
 80080c0:	4413      	add	r3, r2
 80080c2:	4619      	mov	r1, r3
 80080c4:	68f8      	ldr	r0, [r7, #12]
 80080c6:	f7ff fd8a 	bl	8007bde <move_window>
 80080ca:	4603      	mov	r3, r0
 80080cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80080ce:	7ffb      	ldrb	r3, [r7, #31]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d142      	bne.n	800815a <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	4413      	add	r3, r2
 80080e0:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 80080e2:	69bb      	ldr	r3, [r7, #24]
 80080e4:	3303      	adds	r3, #3
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	061a      	lsls	r2, r3, #24
 80080ea:	69bb      	ldr	r3, [r7, #24]
 80080ec:	3302      	adds	r3, #2
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	041b      	lsls	r3, r3, #16
 80080f2:	4313      	orrs	r3, r2
 80080f4:	69ba      	ldr	r2, [r7, #24]
 80080f6:	3201      	adds	r2, #1
 80080f8:	7812      	ldrb	r2, [r2, #0]
 80080fa:	0212      	lsls	r2, r2, #8
 80080fc:	4313      	orrs	r3, r2
 80080fe:	69ba      	ldr	r2, [r7, #24]
 8008100:	7812      	ldrb	r2, [r2, #0]
 8008102:	4313      	orrs	r3, r2
 8008104:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	4313      	orrs	r3, r2
 800810c:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	b2da      	uxtb	r2, r3
 8008112:	69bb      	ldr	r3, [r7, #24]
 8008114:	701a      	strb	r2, [r3, #0]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	b29b      	uxth	r3, r3
 800811a:	0a1b      	lsrs	r3, r3, #8
 800811c:	b29a      	uxth	r2, r3
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	3301      	adds	r3, #1
 8008122:	b2d2      	uxtb	r2, r2
 8008124:	701a      	strb	r2, [r3, #0]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	0c1a      	lsrs	r2, r3, #16
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	3302      	adds	r3, #2
 800812e:	b2d2      	uxtb	r2, r2
 8008130:	701a      	strb	r2, [r3, #0]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	0e1a      	lsrs	r2, r3, #24
 8008136:	69bb      	ldr	r3, [r7, #24]
 8008138:	3303      	adds	r3, #3
 800813a:	b2d2      	uxtb	r2, r2
 800813c:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2201      	movs	r2, #1
 8008142:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8008146:	e009      	b.n	800815c <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 8008148:	2302      	movs	r3, #2
 800814a:	77fb      	strb	r3, [r7, #31]
 800814c:	e006      	b.n	800815c <put_fat+0x212>
			if (res != FR_OK) break;
 800814e:	bf00      	nop
 8008150:	e004      	b.n	800815c <put_fat+0x212>
			if (res != FR_OK) break;
 8008152:	bf00      	nop
 8008154:	e002      	b.n	800815c <put_fat+0x212>
			if (res != FR_OK) break;
 8008156:	bf00      	nop
 8008158:	e000      	b.n	800815c <put_fat+0x212>
			if (res != FR_OK) break;
 800815a:	bf00      	nop
		}
	}

	return res;
 800815c:	7ffb      	ldrb	r3, [r7, #31]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3720      	adds	r7, #32
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b084      	sub	sp, #16
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
 800816e:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	2b01      	cmp	r3, #1
 8008174:	d905      	bls.n	8008182 <remove_chain+0x1c>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800817c:	683a      	ldr	r2, [r7, #0]
 800817e:	429a      	cmp	r2, r3
 8008180:	d302      	bcc.n	8008188 <remove_chain+0x22>
		res = FR_INT_ERR;
 8008182:	2302      	movs	r3, #2
 8008184:	73fb      	strb	r3, [r7, #15]
 8008186:	e043      	b.n	8008210 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8008188:	2300      	movs	r3, #0
 800818a:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800818c:	e036      	b.n	80081fc <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800818e:	6839      	ldr	r1, [r7, #0]
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f7ff fe20 	bl	8007dd6 <get_fat>
 8008196:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d035      	beq.n	800820a <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d102      	bne.n	80081aa <remove_chain+0x44>
 80081a4:	2302      	movs	r3, #2
 80081a6:	73fb      	strb	r3, [r7, #15]
 80081a8:	e032      	b.n	8008210 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081b0:	d102      	bne.n	80081b8 <remove_chain+0x52>
 80081b2:	2301      	movs	r3, #1
 80081b4:	73fb      	strb	r3, [r7, #15]
 80081b6:	e02b      	b.n	8008210 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80081b8:	2200      	movs	r2, #0
 80081ba:	6839      	ldr	r1, [r7, #0]
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f7ff fec4 	bl	8007f4a <put_fat>
 80081c2:	4603      	mov	r3, r0
 80081c4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80081c6:	7bfb      	ldrb	r3, [r7, #15]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d120      	bne.n	800820e <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80081d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d6:	d00f      	beq.n	80081f8 <remove_chain+0x92>
				fs->free_clust++;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80081de:	1c5a      	adds	r2, r3, #1
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80081ec:	f043 0301 	orr.w	r3, r3, #1
 80081f0:	b2da      	uxtb	r2, r3
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008202:	683a      	ldr	r2, [r7, #0]
 8008204:	429a      	cmp	r2, r3
 8008206:	d3c2      	bcc.n	800818e <remove_chain+0x28>
 8008208:	e002      	b.n	8008210 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800820a:	bf00      	nop
 800820c:	e000      	b.n	8008210 <remove_chain+0xaa>
			if (res != FR_OK) break;
 800820e:	bf00      	nop
		}
	}

	return res;
 8008210:	7bfb      	ldrb	r3, [r7, #15]
}
 8008212:	4618      	mov	r0, r3
 8008214:	3710      	adds	r7, #16
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800821a:	b580      	push	{r7, lr}
 800821c:	b086      	sub	sp, #24
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
 8008222:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d10f      	bne.n	800824a <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8008230:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d005      	beq.n	8008244 <create_chain+0x2a>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800823e:	693a      	ldr	r2, [r7, #16]
 8008240:	429a      	cmp	r2, r3
 8008242:	d31c      	bcc.n	800827e <create_chain+0x64>
 8008244:	2301      	movs	r3, #1
 8008246:	613b      	str	r3, [r7, #16]
 8008248:	e019      	b.n	800827e <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800824a:	6839      	ldr	r1, [r7, #0]
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f7ff fdc2 	bl	8007dd6 <get_fat>
 8008252:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	2b01      	cmp	r3, #1
 8008258:	d801      	bhi.n	800825e <create_chain+0x44>
 800825a:	2301      	movs	r3, #1
 800825c:	e076      	b.n	800834c <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008264:	d101      	bne.n	800826a <create_chain+0x50>
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	e070      	b.n	800834c <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008270:	68ba      	ldr	r2, [r7, #8]
 8008272:	429a      	cmp	r2, r3
 8008274:	d201      	bcs.n	800827a <create_chain+0x60>
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	e068      	b.n	800834c <create_chain+0x132>
		scl = clst;
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	3301      	adds	r3, #1
 8008286:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800828e:	697a      	ldr	r2, [r7, #20]
 8008290:	429a      	cmp	r2, r3
 8008292:	d307      	bcc.n	80082a4 <create_chain+0x8a>
			ncl = 2;
 8008294:	2302      	movs	r3, #2
 8008296:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8008298:	697a      	ldr	r2, [r7, #20]
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	429a      	cmp	r2, r3
 800829e:	d901      	bls.n	80082a4 <create_chain+0x8a>
 80082a0:	2300      	movs	r3, #0
 80082a2:	e053      	b.n	800834c <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80082a4:	6979      	ldr	r1, [r7, #20]
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f7ff fd95 	bl	8007dd6 <get_fat>
 80082ac:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00e      	beq.n	80082d2 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ba:	d002      	beq.n	80082c2 <create_chain+0xa8>
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d101      	bne.n	80082c6 <create_chain+0xac>
			return cs;
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	e042      	b.n	800834c <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 80082c6:	697a      	ldr	r2, [r7, #20]
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d1d9      	bne.n	8008282 <create_chain+0x68>
 80082ce:	2300      	movs	r3, #0
 80082d0:	e03c      	b.n	800834c <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 80082d2:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80082d4:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80082d8:	6979      	ldr	r1, [r7, #20]
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f7ff fe35 	bl	8007f4a <put_fat>
 80082e0:	4603      	mov	r3, r0
 80082e2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 80082e4:	7bfb      	ldrb	r3, [r7, #15]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d109      	bne.n	80082fe <create_chain+0xe4>
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d006      	beq.n	80082fe <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 80082f0:	697a      	ldr	r2, [r7, #20]
 80082f2:	6839      	ldr	r1, [r7, #0]
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f7ff fe28 	bl	8007f4a <put_fat>
 80082fa:	4603      	mov	r3, r0
 80082fc:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 80082fe:	7bfb      	ldrb	r3, [r7, #15]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d11a      	bne.n	800833a <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	697a      	ldr	r2, [r7, #20]
 8008308:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008316:	d018      	beq.n	800834a <create_chain+0x130>
			fs->free_clust--;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800831e:	1e5a      	subs	r2, r3, #1
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800832c:	f043 0301 	orr.w	r3, r3, #1
 8008330:	b2da      	uxtb	r2, r3
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8008338:	e007      	b.n	800834a <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800833a:	7bfb      	ldrb	r3, [r7, #15]
 800833c:	2b01      	cmp	r3, #1
 800833e:	d102      	bne.n	8008346 <create_chain+0x12c>
 8008340:	f04f 33ff 	mov.w	r3, #4294967295
 8008344:	e000      	b.n	8008348 <create_chain+0x12e>
 8008346:	2301      	movs	r3, #1
 8008348:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800834a:	697b      	ldr	r3, [r7, #20]
}
 800834c:	4618      	mov	r0, r3
 800834e:	3718      	adds	r7, #24
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8008354:	b480      	push	{r7}
 8008356:	b087      	sub	sp, #28
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8008364:	3304      	adds	r3, #4
 8008366:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	0a5b      	lsrs	r3, r3, #9
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8008372:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8008376:	fbb3 f3f2 	udiv	r3, r3, r2
 800837a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	1d1a      	adds	r2, r3, #4
 8008380:	613a      	str	r2, [r7, #16]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d101      	bne.n	8008390 <clmt_clust+0x3c>
 800838c:	2300      	movs	r3, #0
 800838e:	e010      	b.n	80083b2 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 8008390:	697a      	ldr	r2, [r7, #20]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	429a      	cmp	r2, r3
 8008396:	d307      	bcc.n	80083a8 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8008398:	697a      	ldr	r2, [r7, #20]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	1ad3      	subs	r3, r2, r3
 800839e:	617b      	str	r3, [r7, #20]
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	3304      	adds	r3, #4
 80083a4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80083a6:	e7e9      	b.n	800837c <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 80083a8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	4413      	add	r3, r2
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	371c      	adds	r7, #28
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bc80      	pop	{r7}
 80083ba:	4770      	bx	lr

080083bc <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b086      	sub	sp, #24
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	b29a      	uxth	r2, r3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80083d6:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d007      	beq.n	80083ee <dir_sdi+0x32>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80083e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80083e8:	697a      	ldr	r2, [r7, #20]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d301      	bcc.n	80083f2 <dir_sdi+0x36>
		return FR_INT_ERR;
 80083ee:	2302      	movs	r3, #2
 80083f0:	e074      	b.n	80084dc <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d10c      	bne.n	8008412 <dir_sdi+0x56>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80083fe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008402:	2b03      	cmp	r3, #3
 8008404:	d105      	bne.n	8008412 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800840c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8008410:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d111      	bne.n	800843c <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800841e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8008422:	461a      	mov	r2, r3
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	4293      	cmp	r3, r2
 8008428:	d301      	bcc.n	800842e <dir_sdi+0x72>
			return FR_INT_ERR;
 800842a:	2302      	movs	r3, #2
 800842c:	e056      	b.n	80084dc <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008434:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8008438:	613b      	str	r3, [r7, #16]
 800843a:	e032      	b.n	80084a2 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008442:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8008446:	011b      	lsls	r3, r3, #4
 8008448:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800844a:	e01e      	b.n	800848a <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008452:	6979      	ldr	r1, [r7, #20]
 8008454:	4618      	mov	r0, r3
 8008456:	f7ff fcbe 	bl	8007dd6 <get_fat>
 800845a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008462:	d101      	bne.n	8008468 <dir_sdi+0xac>
 8008464:	2301      	movs	r3, #1
 8008466:	e039      	b.n	80084dc <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	2b01      	cmp	r3, #1
 800846c:	d907      	bls.n	800847e <dir_sdi+0xc2>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008474:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008478:	697a      	ldr	r2, [r7, #20]
 800847a:	429a      	cmp	r2, r3
 800847c:	d301      	bcc.n	8008482 <dir_sdi+0xc6>
				return FR_INT_ERR;
 800847e:	2302      	movs	r3, #2
 8008480:	e02c      	b.n	80084dc <dir_sdi+0x120>
			idx -= ic;
 8008482:	683a      	ldr	r2, [r7, #0]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	1ad3      	subs	r3, r2, r3
 8008488:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800848a:	683a      	ldr	r2, [r7, #0]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	429a      	cmp	r2, r3
 8008490:	d2dc      	bcs.n	800844c <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008498:	6979      	ldr	r1, [r7, #20]
 800849a:	4618      	mov	r0, r3
 800849c:	f7ff fc7a 	bl	8007d94 <clust2sect>
 80084a0:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	697a      	ldr	r2, [r7, #20]
 80084a6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d101      	bne.n	80084b4 <dir_sdi+0xf8>
 80084b0:	2302      	movs	r3, #2
 80084b2:	e013      	b.n	80084dc <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	091a      	lsrs	r2, r3, #4
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	441a      	add	r2, r3
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80084c8:	461a      	mov	r2, r3
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	f003 030f 	and.w	r3, r3, #15
 80084d0:	015b      	lsls	r3, r3, #5
 80084d2:	441a      	add	r2, r3
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 80084da:	2300      	movs	r3, #0
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3718      	adds	r7, #24
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80084e4:	b590      	push	{r4, r7, lr}
 80084e6:	b087      	sub	sp, #28
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 80084f4:	3301      	adds	r3, #1
 80084f6:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d004      	beq.n	800850a <dir_next+0x26>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008506:	2b00      	cmp	r3, #0
 8008508:	d101      	bne.n	800850e <dir_next+0x2a>
		return FR_NO_FILE;
 800850a:	2304      	movs	r3, #4
 800850c:	e0dd      	b.n	80086ca <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f003 030f 	and.w	r3, r3, #15
 8008514:	2b00      	cmp	r3, #0
 8008516:	f040 80c6 	bne.w	80086a6 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008520:	1c5a      	adds	r2, r3, #1
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800852e:	2b00      	cmp	r3, #0
 8008530:	d10b      	bne.n	800854a <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008538:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800853c:	461a      	mov	r2, r3
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	4293      	cmp	r3, r2
 8008542:	f0c0 80b0 	bcc.w	80086a6 <dir_next+0x1c2>
				return FR_NO_FILE;
 8008546:	2304      	movs	r3, #4
 8008548:	e0bf      	b.n	80086ca <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	091b      	lsrs	r3, r3, #4
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8008554:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8008558:	3a01      	subs	r2, #1
 800855a:	4013      	ands	r3, r2
 800855c:	2b00      	cmp	r3, #0
 800855e:	f040 80a2 	bne.w	80086a6 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800856e:	4619      	mov	r1, r3
 8008570:	4610      	mov	r0, r2
 8008572:	f7ff fc30 	bl	8007dd6 <get_fat>
 8008576:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	2b01      	cmp	r3, #1
 800857c:	d801      	bhi.n	8008582 <dir_next+0x9e>
 800857e:	2302      	movs	r3, #2
 8008580:	e0a3      	b.n	80086ca <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008588:	d101      	bne.n	800858e <dir_next+0xaa>
 800858a:	2301      	movs	r3, #1
 800858c:	e09d      	b.n	80086ca <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008594:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008598:	697a      	ldr	r2, [r7, #20]
 800859a:	429a      	cmp	r2, r3
 800859c:	d374      	bcc.n	8008688 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d101      	bne.n	80085a8 <dir_next+0xc4>
 80085a4:	2304      	movs	r3, #4
 80085a6:	e090      	b.n	80086ca <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80085b4:	4619      	mov	r1, r3
 80085b6:	4610      	mov	r0, r2
 80085b8:	f7ff fe2f 	bl	800821a <create_chain>
 80085bc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d101      	bne.n	80085c8 <dir_next+0xe4>
 80085c4:	2307      	movs	r3, #7
 80085c6:	e080      	b.n	80086ca <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d101      	bne.n	80085d2 <dir_next+0xee>
 80085ce:	2302      	movs	r3, #2
 80085d0:	e07b      	b.n	80086ca <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d8:	d101      	bne.n	80085de <dir_next+0xfa>
 80085da:	2301      	movs	r3, #1
 80085dc:	e075      	b.n	80086ca <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80085e4:	4618      	mov	r0, r3
 80085e6:	f7ff fab1 	bl	8007b4c <sync_window>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d001      	beq.n	80085f4 <dir_next+0x110>
 80085f0:	2301      	movs	r3, #1
 80085f2:	e06a      	b.n	80086ca <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80085fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085fe:	2100      	movs	r1, #0
 8008600:	4618      	mov	r0, r3
 8008602:	f7ff f895 	bl	8007730 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 8008612:	6979      	ldr	r1, [r7, #20]
 8008614:	4610      	mov	r0, r2
 8008616:	f7ff fbbd 	bl	8007d94 <clust2sect>
 800861a:	4603      	mov	r3, r0
 800861c:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8008620:	2300      	movs	r3, #0
 8008622:	613b      	str	r3, [r7, #16]
 8008624:	e01b      	b.n	800865e <dir_next+0x17a>
						dp->fs->wflag = 1;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800862c:	2201      	movs	r2, #1
 800862e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008638:	4618      	mov	r0, r3
 800863a:	f7ff fa87 	bl	8007b4c <sync_window>
 800863e:	4603      	mov	r3, r0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d001      	beq.n	8008648 <dir_next+0x164>
 8008644:	2301      	movs	r3, #1
 8008646:	e040      	b.n	80086ca <dir_next+0x1e6>
						dp->fs->winsect++;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800864e:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8008652:	3201      	adds	r2, #1
 8008654:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	3301      	adds	r3, #1
 800865c:	613b      	str	r3, [r7, #16]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008664:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8008668:	461a      	mov	r2, r3
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	4293      	cmp	r3, r2
 800866e:	d3da      	bcc.n	8008626 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008676:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008680:	693a      	ldr	r2, [r7, #16]
 8008682:	1a8a      	subs	r2, r1, r2
 8008684:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	697a      	ldr	r2, [r7, #20]
 800868c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008696:	6979      	ldr	r1, [r7, #20]
 8008698:	4618      	mov	r0, r3
 800869a:	f7ff fb7b 	bl	8007d94 <clust2sect>
 800869e:	4602      	mov	r2, r0
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	b29a      	uxth	r2, r3
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80086b6:	461a      	mov	r2, r3
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f003 030f 	and.w	r3, r3, #15
 80086be:	015b      	lsls	r3, r3, #5
 80086c0:	441a      	add	r2, r3
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	371c      	adds	r7, #28
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd90      	pop	{r4, r7, pc}

080086d2 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 80086d2:	b580      	push	{r7, lr}
 80086d4:	b084      	sub	sp, #16
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
 80086da:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 80086dc:	2100      	movs	r1, #0
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f7ff fe6c 	bl	80083bc <dir_sdi>
 80086e4:	4603      	mov	r3, r0
 80086e6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80086e8:	7bfb      	ldrb	r3, [r7, #15]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d131      	bne.n	8008752 <dir_alloc+0x80>
		n = 0;
 80086ee:	2300      	movs	r3, #0
 80086f0:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80086fe:	4619      	mov	r1, r3
 8008700:	4610      	mov	r0, r2
 8008702:	f7ff fa6c 	bl	8007bde <move_window>
 8008706:	4603      	mov	r3, r0
 8008708:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800870a:	7bfb      	ldrb	r3, [r7, #15]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d11f      	bne.n	8008750 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	2be5      	cmp	r3, #229	; 0xe5
 800871a:	d005      	beq.n	8008728 <dir_alloc+0x56>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d107      	bne.n	8008738 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	3301      	adds	r3, #1
 800872c:	60bb      	str	r3, [r7, #8]
 800872e:	68ba      	ldr	r2, [r7, #8]
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	429a      	cmp	r2, r3
 8008734:	d102      	bne.n	800873c <dir_alloc+0x6a>
 8008736:	e00c      	b.n	8008752 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008738:	2300      	movs	r3, #0
 800873a:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800873c:	2101      	movs	r1, #1
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f7ff fed0 	bl	80084e4 <dir_next>
 8008744:	4603      	mov	r3, r0
 8008746:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8008748:	7bfb      	ldrb	r3, [r7, #15]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d0d1      	beq.n	80086f2 <dir_alloc+0x20>
 800874e:	e000      	b.n	8008752 <dir_alloc+0x80>
			if (res != FR_OK) break;
 8008750:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008752:	7bfb      	ldrb	r3, [r7, #15]
 8008754:	2b04      	cmp	r3, #4
 8008756:	d101      	bne.n	800875c <dir_alloc+0x8a>
 8008758:	2307      	movs	r3, #7
 800875a:	73fb      	strb	r3, [r7, #15]
	return res;
 800875c:	7bfb      	ldrb	r3, [r7, #15]
}
 800875e:	4618      	mov	r0, r3
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8008766:	b480      	push	{r7}
 8008768:	b085      	sub	sp, #20
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
 800876e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	331b      	adds	r3, #27
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	021b      	lsls	r3, r3, #8
 8008778:	b21a      	sxth	r2, r3
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	331a      	adds	r3, #26
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	b21b      	sxth	r3, r3
 8008782:	4313      	orrs	r3, r2
 8008784:	b21b      	sxth	r3, r3
 8008786:	b29b      	uxth	r3, r3
 8008788:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008790:	2b03      	cmp	r3, #3
 8008792:	d10f      	bne.n	80087b4 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	3315      	adds	r3, #21
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	021b      	lsls	r3, r3, #8
 800879c:	b21a      	sxth	r2, r3
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	3314      	adds	r3, #20
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	b21b      	sxth	r3, r3
 80087a6:	4313      	orrs	r3, r2
 80087a8:	b21b      	sxth	r3, r3
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	041b      	lsls	r3, r3, #16
 80087ae:	68fa      	ldr	r2, [r7, #12]
 80087b0:	4313      	orrs	r3, r2
 80087b2:	60fb      	str	r3, [r7, #12]

	return cl;
 80087b4:	68fb      	ldr	r3, [r7, #12]
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3714      	adds	r7, #20
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bc80      	pop	{r7}
 80087be:	4770      	bx	lr

080087c0 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b083      	sub	sp, #12
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	331a      	adds	r3, #26
 80087ce:	683a      	ldr	r2, [r7, #0]
 80087d0:	b2d2      	uxtb	r2, r2
 80087d2:	701a      	strb	r2, [r3, #0]
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	0a1b      	lsrs	r3, r3, #8
 80087da:	b29a      	uxth	r2, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	331b      	adds	r3, #27
 80087e0:	b2d2      	uxtb	r2, r2
 80087e2:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	0c1a      	lsrs	r2, r3, #16
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	3314      	adds	r3, #20
 80087ec:	b2d2      	uxtb	r2, r2
 80087ee:	701a      	strb	r2, [r3, #0]
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	0c1b      	lsrs	r3, r3, #16
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	0a1b      	lsrs	r3, r3, #8
 80087f8:	b29a      	uxth	r2, r3
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	3315      	adds	r3, #21
 80087fe:	b2d2      	uxtb	r2, r2
 8008800:	701a      	strb	r2, [r3, #0]
}
 8008802:	bf00      	nop
 8008804:	370c      	adds	r7, #12
 8008806:	46bd      	mov	sp, r7
 8008808:	bc80      	pop	{r7}
 800880a:	4770      	bx	lr

0800880c <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b086      	sub	sp, #24
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008814:	2100      	movs	r1, #0
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f7ff fdd0 	bl	80083bc <dir_sdi>
 800881c:	4603      	mov	r3, r0
 800881e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008820:	7dfb      	ldrb	r3, [r7, #23]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d001      	beq.n	800882a <dir_find+0x1e>
 8008826:	7dfb      	ldrb	r3, [r7, #23]
 8008828:	e03b      	b.n	80088a2 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008836:	4619      	mov	r1, r3
 8008838:	4610      	mov	r0, r2
 800883a:	f7ff f9d0 	bl	8007bde <move_window>
 800883e:	4603      	mov	r3, r0
 8008840:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008842:	7dfb      	ldrb	r3, [r7, #23]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d128      	bne.n	800889a <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800884e:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008856:	7bfb      	ldrb	r3, [r7, #15]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d102      	bne.n	8008862 <dir_find+0x56>
 800885c:	2304      	movs	r3, #4
 800885e:	75fb      	strb	r3, [r7, #23]
 8008860:	e01e      	b.n	80088a0 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	330b      	adds	r3, #11
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	f003 0308 	and.w	r3, r3, #8
 800886c:	2b00      	cmp	r3, #0
 800886e:	d10a      	bne.n	8008886 <dir_find+0x7a>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008876:	220b      	movs	r2, #11
 8008878:	4619      	mov	r1, r3
 800887a:	6938      	ldr	r0, [r7, #16]
 800887c:	f7fe ff72 	bl	8007764 <mem_cmp>
 8008880:	4603      	mov	r3, r0
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00b      	beq.n	800889e <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8008886:	2100      	movs	r1, #0
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f7ff fe2b 	bl	80084e4 <dir_next>
 800888e:	4603      	mov	r3, r0
 8008890:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008892:	7dfb      	ldrb	r3, [r7, #23]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d0c8      	beq.n	800882a <dir_find+0x1e>
 8008898:	e002      	b.n	80088a0 <dir_find+0x94>
		if (res != FR_OK) break;
 800889a:	bf00      	nop
 800889c:	e000      	b.n	80088a0 <dir_find+0x94>
			break;
 800889e:	bf00      	nop

	return res;
 80088a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3718      	adds	r7, #24
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}

080088aa <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80088aa:	b580      	push	{r7, lr}
 80088ac:	b084      	sub	sp, #16
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80088b2:	2101      	movs	r1, #1
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f7ff ff0c 	bl	80086d2 <dir_alloc>
 80088ba:	4603      	mov	r3, r0
 80088bc:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80088be:	7bfb      	ldrb	r3, [r7, #15]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d126      	bne.n	8008912 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80088d0:	4619      	mov	r1, r3
 80088d2:	4610      	mov	r0, r2
 80088d4:	f7ff f983 	bl	8007bde <move_window>
 80088d8:	4603      	mov	r3, r0
 80088da:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80088dc:	7bfb      	ldrb	r3, [r7, #15]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d117      	bne.n	8008912 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80088e8:	2220      	movs	r2, #32
 80088ea:	2100      	movs	r1, #0
 80088ec:	4618      	mov	r0, r3
 80088ee:	f7fe ff1f 	bl	8007730 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80088fe:	220b      	movs	r2, #11
 8008900:	4619      	mov	r1, r3
 8008902:	f7fe fef7 	bl	80076f4 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800890c:	2201      	movs	r2, #1
 800890e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 8008912:	7bfb      	ldrb	r3, [r7, #15]
}
 8008914:	4618      	mov	r0, r3
 8008916:	3710      	adds	r7, #16
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b088      	sub	sp, #32
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	60fb      	str	r3, [r7, #12]
 800892c:	e002      	b.n	8008934 <create_name+0x18>
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	3301      	adds	r3, #1
 8008932:	60fb      	str	r3, [r7, #12]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	2b2f      	cmp	r3, #47	; 0x2f
 800893a:	d0f8      	beq.n	800892e <create_name+0x12>
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	2b5c      	cmp	r3, #92	; 0x5c
 8008942:	d0f4      	beq.n	800892e <create_name+0x12>
	sfn = dp->fn;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800894a:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800894c:	220b      	movs	r2, #11
 800894e:	2120      	movs	r1, #32
 8008950:	68b8      	ldr	r0, [r7, #8]
 8008952:	f7fe feed 	bl	8007730 <mem_set>
	si = i = b = 0; ni = 8;
 8008956:	2300      	movs	r3, #0
 8008958:	77fb      	strb	r3, [r7, #31]
 800895a:	2300      	movs	r3, #0
 800895c:	613b      	str	r3, [r7, #16]
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	617b      	str	r3, [r7, #20]
 8008962:	2308      	movs	r3, #8
 8008964:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	1c5a      	adds	r2, r3, #1
 800896a:	617a      	str	r2, [r7, #20]
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	4413      	add	r3, r2
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8008974:	7fbb      	ldrb	r3, [r7, #30]
 8008976:	2b20      	cmp	r3, #32
 8008978:	d953      	bls.n	8008a22 <create_name+0x106>
 800897a:	7fbb      	ldrb	r3, [r7, #30]
 800897c:	2b2f      	cmp	r3, #47	; 0x2f
 800897e:	d050      	beq.n	8008a22 <create_name+0x106>
 8008980:	7fbb      	ldrb	r3, [r7, #30]
 8008982:	2b5c      	cmp	r3, #92	; 0x5c
 8008984:	d04d      	beq.n	8008a22 <create_name+0x106>
		if (c == '.' || i >= ni) {
 8008986:	7fbb      	ldrb	r3, [r7, #30]
 8008988:	2b2e      	cmp	r3, #46	; 0x2e
 800898a:	d003      	beq.n	8008994 <create_name+0x78>
 800898c:	693a      	ldr	r2, [r7, #16]
 800898e:	69bb      	ldr	r3, [r7, #24]
 8008990:	429a      	cmp	r2, r3
 8008992:	d30f      	bcc.n	80089b4 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8008994:	69bb      	ldr	r3, [r7, #24]
 8008996:	2b08      	cmp	r3, #8
 8008998:	d102      	bne.n	80089a0 <create_name+0x84>
 800899a:	7fbb      	ldrb	r3, [r7, #30]
 800899c:	2b2e      	cmp	r3, #46	; 0x2e
 800899e:	d001      	beq.n	80089a4 <create_name+0x88>
 80089a0:	2306      	movs	r3, #6
 80089a2:	e073      	b.n	8008a8c <create_name+0x170>
			i = 8; ni = 11;
 80089a4:	2308      	movs	r3, #8
 80089a6:	613b      	str	r3, [r7, #16]
 80089a8:	230b      	movs	r3, #11
 80089aa:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 80089ac:	7ffb      	ldrb	r3, [r7, #31]
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	77fb      	strb	r3, [r7, #31]
 80089b2:	e035      	b.n	8008a20 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 80089b4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	da08      	bge.n	80089ce <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 80089bc:	7ffb      	ldrb	r3, [r7, #31]
 80089be:	f043 0303 	orr.w	r3, r3, #3
 80089c2:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80089c4:	7fbb      	ldrb	r3, [r7, #30]
 80089c6:	3b80      	subs	r3, #128	; 0x80
 80089c8:	4a32      	ldr	r2, [pc, #200]	; (8008a94 <create_name+0x178>)
 80089ca:	5cd3      	ldrb	r3, [r2, r3]
 80089cc:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 80089ce:	7fbb      	ldrb	r3, [r7, #30]
 80089d0:	4619      	mov	r1, r3
 80089d2:	4831      	ldr	r0, [pc, #196]	; (8008a98 <create_name+0x17c>)
 80089d4:	f7fe feec 	bl	80077b0 <chk_chr>
 80089d8:	4603      	mov	r3, r0
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d001      	beq.n	80089e2 <create_name+0xc6>
				return FR_INVALID_NAME;
 80089de:	2306      	movs	r3, #6
 80089e0:	e054      	b.n	8008a8c <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 80089e2:	7fbb      	ldrb	r3, [r7, #30]
 80089e4:	2b40      	cmp	r3, #64	; 0x40
 80089e6:	d907      	bls.n	80089f8 <create_name+0xdc>
 80089e8:	7fbb      	ldrb	r3, [r7, #30]
 80089ea:	2b5a      	cmp	r3, #90	; 0x5a
 80089ec:	d804      	bhi.n	80089f8 <create_name+0xdc>
				b |= 2;
 80089ee:	7ffb      	ldrb	r3, [r7, #31]
 80089f0:	f043 0302 	orr.w	r3, r3, #2
 80089f4:	77fb      	strb	r3, [r7, #31]
 80089f6:	e00c      	b.n	8008a12 <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 80089f8:	7fbb      	ldrb	r3, [r7, #30]
 80089fa:	2b60      	cmp	r3, #96	; 0x60
 80089fc:	d909      	bls.n	8008a12 <create_name+0xf6>
 80089fe:	7fbb      	ldrb	r3, [r7, #30]
 8008a00:	2b7a      	cmp	r3, #122	; 0x7a
 8008a02:	d806      	bhi.n	8008a12 <create_name+0xf6>
					b |= 1; c -= 0x20;
 8008a04:	7ffb      	ldrb	r3, [r7, #31]
 8008a06:	f043 0301 	orr.w	r3, r3, #1
 8008a0a:	77fb      	strb	r3, [r7, #31]
 8008a0c:	7fbb      	ldrb	r3, [r7, #30]
 8008a0e:	3b20      	subs	r3, #32
 8008a10:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	1c5a      	adds	r2, r3, #1
 8008a16:	613a      	str	r2, [r7, #16]
 8008a18:	68ba      	ldr	r2, [r7, #8]
 8008a1a:	4413      	add	r3, r2
 8008a1c:	7fba      	ldrb	r2, [r7, #30]
 8008a1e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008a20:	e7a1      	b.n	8008966 <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	441a      	add	r2, r3
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8008a2c:	7fbb      	ldrb	r3, [r7, #30]
 8008a2e:	2b20      	cmp	r3, #32
 8008a30:	d801      	bhi.n	8008a36 <create_name+0x11a>
 8008a32:	2304      	movs	r3, #4
 8008a34:	e000      	b.n	8008a38 <create_name+0x11c>
 8008a36:	2300      	movs	r3, #0
 8008a38:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d101      	bne.n	8008a44 <create_name+0x128>
 8008a40:	2306      	movs	r3, #6
 8008a42:	e023      	b.n	8008a8c <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	2be5      	cmp	r3, #229	; 0xe5
 8008a4a:	d102      	bne.n	8008a52 <create_name+0x136>
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	2205      	movs	r2, #5
 8008a50:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	2b08      	cmp	r3, #8
 8008a56:	d102      	bne.n	8008a5e <create_name+0x142>
 8008a58:	7ffb      	ldrb	r3, [r7, #31]
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8008a5e:	7ffb      	ldrb	r3, [r7, #31]
 8008a60:	f003 0303 	and.w	r3, r3, #3
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d103      	bne.n	8008a70 <create_name+0x154>
 8008a68:	7fbb      	ldrb	r3, [r7, #30]
 8008a6a:	f043 0310 	orr.w	r3, r3, #16
 8008a6e:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8008a70:	7ffb      	ldrb	r3, [r7, #31]
 8008a72:	f003 030c 	and.w	r3, r3, #12
 8008a76:	2b04      	cmp	r3, #4
 8008a78:	d103      	bne.n	8008a82 <create_name+0x166>
 8008a7a:	7fbb      	ldrb	r3, [r7, #30]
 8008a7c:	f043 0308 	orr.w	r3, r3, #8
 8008a80:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	330b      	adds	r3, #11
 8008a86:	7fba      	ldrb	r2, [r7, #30]
 8008a88:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008a8a:	2300      	movs	r3, #0
#endif
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3720      	adds	r7, #32
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	0800db14 	.word	0x0800db14
 8008a98:	0800da8c 	.word	0x0800da8c

08008a9c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	2b2f      	cmp	r3, #47	; 0x2f
 8008aac:	d003      	beq.n	8008ab6 <follow_path+0x1a>
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	2b5c      	cmp	r3, #92	; 0x5c
 8008ab4:	d102      	bne.n	8008abc <follow_path+0x20>
		path++;
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	3301      	adds	r3, #1
 8008aba:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	2b1f      	cmp	r3, #31
 8008aca:	d80a      	bhi.n	8008ae2 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8008acc:	2100      	movs	r1, #0
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f7ff fc74 	bl	80083bc <dir_sdi>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8008ae0:	e045      	b.n	8008b6e <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008ae2:	463b      	mov	r3, r7
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f7ff ff18 	bl	800891c <create_name>
 8008aec:	4603      	mov	r3, r0
 8008aee:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8008af0:	7bfb      	ldrb	r3, [r7, #15]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d136      	bne.n	8008b64 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f7ff fe88 	bl	800880c <dir_find>
 8008afc:	4603      	mov	r3, r0
 8008afe:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008b06:	7adb      	ldrb	r3, [r3, #11]
 8008b08:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8008b0a:	7bfb      	ldrb	r3, [r7, #15]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d00a      	beq.n	8008b26 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008b10:	7bfb      	ldrb	r3, [r7, #15]
 8008b12:	2b04      	cmp	r3, #4
 8008b14:	d128      	bne.n	8008b68 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008b16:	7bbb      	ldrb	r3, [r7, #14]
 8008b18:	f003 0304 	and.w	r3, r3, #4
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d123      	bne.n	8008b68 <follow_path+0xcc>
 8008b20:	2305      	movs	r3, #5
 8008b22:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8008b24:	e020      	b.n	8008b68 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008b26:	7bbb      	ldrb	r3, [r7, #14]
 8008b28:	f003 0304 	and.w	r3, r3, #4
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d11d      	bne.n	8008b6c <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008b36:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	330b      	adds	r3, #11
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	f003 0310 	and.w	r3, r3, #16
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d102      	bne.n	8008b4c <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8008b46:	2305      	movs	r3, #5
 8008b48:	73fb      	strb	r3, [r7, #15]
 8008b4a:	e010      	b.n	8008b6e <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008b52:	68b9      	ldr	r1, [r7, #8]
 8008b54:	4618      	mov	r0, r3
 8008b56:	f7ff fe06 	bl	8008766 <ld_clust>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008b62:	e7be      	b.n	8008ae2 <follow_path+0x46>
			if (res != FR_OK) break;
 8008b64:	bf00      	nop
 8008b66:	e002      	b.n	8008b6e <follow_path+0xd2>
				break;
 8008b68:	bf00      	nop
 8008b6a:	e000      	b.n	8008b6e <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008b6c:	bf00      	nop
		}
	}

	return res;
 8008b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3710      	adds	r7, #16
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b087      	sub	sp, #28
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008b80:	f04f 33ff 	mov.w	r3, #4294967295
 8008b84:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d031      	beq.n	8008bf2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	617b      	str	r3, [r7, #20]
 8008b94:	e002      	b.n	8008b9c <get_ldnumber+0x24>
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	617b      	str	r3, [r7, #20]
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	2b20      	cmp	r3, #32
 8008ba2:	d903      	bls.n	8008bac <get_ldnumber+0x34>
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	2b3a      	cmp	r3, #58	; 0x3a
 8008baa:	d1f4      	bne.n	8008b96 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	2b3a      	cmp	r3, #58	; 0x3a
 8008bb2:	d11c      	bne.n	8008bee <get_ldnumber+0x76>
			tp = *path;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	1c5a      	adds	r2, r3, #1
 8008bbe:	60fa      	str	r2, [r7, #12]
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	3b30      	subs	r3, #48	; 0x30
 8008bc4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	2b09      	cmp	r3, #9
 8008bca:	d80e      	bhi.n	8008bea <get_ldnumber+0x72>
 8008bcc:	68fa      	ldr	r2, [r7, #12]
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d10a      	bne.n	8008bea <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d107      	bne.n	8008bea <get_ldnumber+0x72>
					vol = (int)i;
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	3301      	adds	r3, #1
 8008be2:	617b      	str	r3, [r7, #20]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	697a      	ldr	r2, [r7, #20]
 8008be8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	e002      	b.n	8008bf4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008bee:	2300      	movs	r3, #0
 8008bf0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008bf2:	693b      	ldr	r3, [r7, #16]
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	371c      	adds	r7, #28
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bc80      	pop	{r7}
 8008bfc:	4770      	bx	lr
	...

08008c00 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f04f 32ff 	mov.w	r2, #4294967295
 8008c18:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8008c1c:	6839      	ldr	r1, [r7, #0]
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f7fe ffdd 	bl	8007bde <move_window>
 8008c24:	4603      	mov	r3, r0
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d001      	beq.n	8008c2e <check_fs+0x2e>
		return 3;
 8008c2a:	2303      	movs	r3, #3
 8008c2c:	e04a      	b.n	8008cc4 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008c34:	3301      	adds	r3, #1
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	021b      	lsls	r3, r3, #8
 8008c3a:	b21a      	sxth	r2, r3
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8008c42:	b21b      	sxth	r3, r3
 8008c44:	4313      	orrs	r3, r2
 8008c46:	b21b      	sxth	r3, r3
 8008c48:	4a20      	ldr	r2, [pc, #128]	; (8008ccc <check_fs+0xcc>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d001      	beq.n	8008c52 <check_fs+0x52>
		return 2;
 8008c4e:	2302      	movs	r3, #2
 8008c50:	e038      	b.n	8008cc4 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	3336      	adds	r3, #54	; 0x36
 8008c56:	3303      	adds	r3, #3
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	061a      	lsls	r2, r3, #24
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	3336      	adds	r3, #54	; 0x36
 8008c60:	3302      	adds	r3, #2
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	041b      	lsls	r3, r3, #16
 8008c66:	4313      	orrs	r3, r2
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	3236      	adds	r2, #54	; 0x36
 8008c6c:	3201      	adds	r2, #1
 8008c6e:	7812      	ldrb	r2, [r2, #0]
 8008c70:	0212      	lsls	r2, r2, #8
 8008c72:	4313      	orrs	r3, r2
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008c80:	4a13      	ldr	r2, [pc, #76]	; (8008cd0 <check_fs+0xd0>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d101      	bne.n	8008c8a <check_fs+0x8a>
		return 0;
 8008c86:	2300      	movs	r3, #0
 8008c88:	e01c      	b.n	8008cc4 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	3352      	adds	r3, #82	; 0x52
 8008c8e:	3303      	adds	r3, #3
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	061a      	lsls	r2, r3, #24
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	3352      	adds	r3, #82	; 0x52
 8008c98:	3302      	adds	r3, #2
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	041b      	lsls	r3, r3, #16
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	3252      	adds	r2, #82	; 0x52
 8008ca4:	3201      	adds	r2, #1
 8008ca6:	7812      	ldrb	r2, [r2, #0]
 8008ca8:	0212      	lsls	r2, r2, #8
 8008caa:	4313      	orrs	r3, r2
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008cb8:	4a05      	ldr	r2, [pc, #20]	; (8008cd0 <check_fs+0xd0>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d101      	bne.n	8008cc2 <check_fs+0xc2>
		return 0;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	e000      	b.n	8008cc4 <check_fs+0xc4>

	return 1;
 8008cc2:	2301      	movs	r3, #1
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3708      	adds	r7, #8
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	ffffaa55 	.word	0xffffaa55
 8008cd0:	00544146 	.word	0x00544146

08008cd4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b096      	sub	sp, #88	; 0x58
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	60b9      	str	r1, [r7, #8]
 8008cde:	4613      	mov	r3, r2
 8008ce0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008ce8:	68b8      	ldr	r0, [r7, #8]
 8008cea:	f7ff ff45 	bl	8008b78 <get_ldnumber>
 8008cee:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	da01      	bge.n	8008cfa <find_volume+0x26>
 8008cf6:	230b      	movs	r3, #11
 8008cf8:	e2aa      	b.n	8009250 <find_volume+0x57c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008cfa:	4a9e      	ldr	r2, [pc, #632]	; (8008f74 <find_volume+0x2a0>)
 8008cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d02:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d101      	bne.n	8008d0e <find_volume+0x3a>
 8008d0a:	230c      	movs	r3, #12
 8008d0c:	e2a0      	b.n	8009250 <find_volume+0x57c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d12:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8008d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d16:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d01b      	beq.n	8008d56 <find_volume+0x82>
		stat = disk_status(fs->drv);
 8008d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d20:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008d24:	4618      	mov	r0, r3
 8008d26:	f7fe fc47 	bl	80075b8 <disk_status>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008d30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008d34:	f003 0301 	and.w	r3, r3, #1
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d10c      	bne.n	8008d56 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8008d3c:	79fb      	ldrb	r3, [r7, #7]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d007      	beq.n	8008d52 <find_volume+0x7e>
 8008d42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008d46:	f003 0304 	and.w	r3, r3, #4
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d001      	beq.n	8008d52 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 8008d4e:	230a      	movs	r3, #10
 8008d50:	e27e      	b.n	8009250 <find_volume+0x57c>
			return FR_OK;				/* The file system object is valid */
 8008d52:	2300      	movs	r3, #0
 8008d54:	e27c      	b.n	8009250 <find_volume+0x57c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d60:	b2da      	uxtb	r2, r3
 8008d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d64:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d6a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7fe fc3c 	bl	80075ec <disk_initialize>
 8008d74:	4603      	mov	r3, r0
 8008d76:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8008d7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008d7e:	f003 0301 	and.w	r3, r3, #1
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d001      	beq.n	8008d8a <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008d86:	2303      	movs	r3, #3
 8008d88:	e262      	b.n	8009250 <find_volume+0x57c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8008d8a:	79fb      	ldrb	r3, [r7, #7]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d007      	beq.n	8008da0 <find_volume+0xcc>
 8008d90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008d94:	f003 0304 	and.w	r3, r3, #4
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d001      	beq.n	8008da0 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8008d9c:	230a      	movs	r3, #10
 8008d9e:	e257      	b.n	8009250 <find_volume+0x57c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8008da0:	2300      	movs	r3, #0
 8008da2:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8008da4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008da6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008da8:	f7ff ff2a 	bl	8008c00 <check_fs>
 8008dac:	4603      	mov	r3, r0
 8008dae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8008db2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d155      	bne.n	8008e66 <find_volume+0x192>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8008dba:	2300      	movs	r3, #0
 8008dbc:	643b      	str	r3, [r7, #64]	; 0x40
 8008dbe:	e029      	b.n	8008e14 <find_volume+0x140>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8008dc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008dc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dc4:	011b      	lsls	r3, r3, #4
 8008dc6:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008dca:	4413      	add	r3, r2
 8008dcc:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8008dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd0:	3304      	adds	r3, #4
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d012      	beq.n	8008dfe <find_volume+0x12a>
 8008dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dda:	330b      	adds	r3, #11
 8008ddc:	781b      	ldrb	r3, [r3, #0]
 8008dde:	061a      	lsls	r2, r3, #24
 8008de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de2:	330a      	adds	r3, #10
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	041b      	lsls	r3, r3, #16
 8008de8:	4313      	orrs	r3, r2
 8008dea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dec:	3209      	adds	r2, #9
 8008dee:	7812      	ldrb	r2, [r2, #0]
 8008df0:	0212      	lsls	r2, r2, #8
 8008df2:	4313      	orrs	r3, r2
 8008df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008df6:	3208      	adds	r2, #8
 8008df8:	7812      	ldrb	r2, [r2, #0]
 8008dfa:	431a      	orrs	r2, r3
 8008dfc:	e000      	b.n	8008e00 <find_volume+0x12c>
 8008dfe:	2200      	movs	r2, #0
 8008e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8008e08:	440b      	add	r3, r1
 8008e0a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8008e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e10:	3301      	adds	r3, #1
 8008e12:	643b      	str	r3, [r7, #64]	; 0x40
 8008e14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e16:	2b03      	cmp	r3, #3
 8008e18:	d9d2      	bls.n	8008dc0 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008e1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d002      	beq.n	8008e2a <find_volume+0x156>
 8008e24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e26:	3b01      	subs	r3, #1
 8008e28:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8008e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008e32:	4413      	add	r3, r2
 8008e34:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008e38:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8008e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d005      	beq.n	8008e4c <find_volume+0x178>
 8008e40:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008e42:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008e44:	f7ff fedc 	bl	8008c00 <check_fs>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	e000      	b.n	8008e4e <find_volume+0x17a>
 8008e4c:	2302      	movs	r3, #2
 8008e4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8008e52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d005      	beq.n	8008e66 <find_volume+0x192>
 8008e5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	643b      	str	r3, [r7, #64]	; 0x40
 8008e60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e62:	2b03      	cmp	r3, #3
 8008e64:	d9e1      	bls.n	8008e2a <find_volume+0x156>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008e66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e6a:	2b03      	cmp	r3, #3
 8008e6c:	d101      	bne.n	8008e72 <find_volume+0x19e>
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e1ee      	b.n	8009250 <find_volume+0x57c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8008e72:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d001      	beq.n	8008e7e <find_volume+0x1aa>
 8008e7a:	230d      	movs	r3, #13
 8008e7c:	e1e8      	b.n	8009250 <find_volume+0x57c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e80:	7b1b      	ldrb	r3, [r3, #12]
 8008e82:	021b      	lsls	r3, r3, #8
 8008e84:	b21a      	sxth	r2, r3
 8008e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e88:	7adb      	ldrb	r3, [r3, #11]
 8008e8a:	b21b      	sxth	r3, r3
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	b21b      	sxth	r3, r3
 8008e90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e94:	d001      	beq.n	8008e9a <find_volume+0x1c6>
		return FR_NO_FILESYSTEM;
 8008e96:	230d      	movs	r3, #13
 8008e98:	e1da      	b.n	8009250 <find_volume+0x57c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8008e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9c:	7ddb      	ldrb	r3, [r3, #23]
 8008e9e:	021b      	lsls	r3, r3, #8
 8008ea0:	b21a      	sxth	r2, r3
 8008ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea4:	7d9b      	ldrb	r3, [r3, #22]
 8008ea6:	b21b      	sxth	r3, r3
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	b21b      	sxth	r3, r3
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8008eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d112      	bne.n	8008edc <find_volume+0x208>
 8008eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8008ebc:	061a      	lsls	r2, r3, #24
 8008ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8008ec4:	041b      	lsls	r3, r3, #16
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008eca:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8008ece:	0212      	lsls	r2, r2, #8
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ed4:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8008edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ede:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ee0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8008ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee6:	7c1a      	ldrb	r2, [r3, #16]
 8008ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eea:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8008eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef0:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d006      	beq.n	8008f06 <find_volume+0x232>
 8008ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008efa:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8008efe:	2b02      	cmp	r3, #2
 8008f00:	d001      	beq.n	8008f06 <find_volume+0x232>
		return FR_NO_FILESYSTEM;
 8008f02:	230d      	movs	r3, #13
 8008f04:	e1a4      	b.n	8009250 <find_volume+0x57c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8008f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f08:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f10:	fb02 f303 	mul.w	r3, r2, r3
 8008f14:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8008f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f18:	7b5a      	ldrb	r2, [r3, #13]
 8008f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f1c:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8008f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f22:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d00a      	beq.n	8008f40 <find_volume+0x26c>
 8008f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f2c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8008f30:	461a      	mov	r2, r3
 8008f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f34:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8008f38:	3b01      	subs	r3, #1
 8008f3a:	4013      	ands	r3, r2
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d001      	beq.n	8008f44 <find_volume+0x270>
		return FR_NO_FILESYSTEM;
 8008f40:	230d      	movs	r3, #13
 8008f42:	e185      	b.n	8009250 <find_volume+0x57c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8008f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f46:	7c9b      	ldrb	r3, [r3, #18]
 8008f48:	021b      	lsls	r3, r3, #8
 8008f4a:	b21a      	sxth	r2, r3
 8008f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f4e:	7c5b      	ldrb	r3, [r3, #17]
 8008f50:	b21b      	sxth	r3, r3
 8008f52:	4313      	orrs	r3, r2
 8008f54:	b21b      	sxth	r3, r3
 8008f56:	b29a      	uxth	r2, r3
 8008f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f5a:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8008f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f60:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8008f64:	f003 030f 	and.w	r3, r3, #15
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d004      	beq.n	8008f78 <find_volume+0x2a4>
		return FR_NO_FILESYSTEM;
 8008f6e:	230d      	movs	r3, #13
 8008f70:	e16e      	b.n	8009250 <find_volume+0x57c>
 8008f72:	bf00      	nop
 8008f74:	200000c8 	.word	0x200000c8

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8008f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f7a:	7d1b      	ldrb	r3, [r3, #20]
 8008f7c:	021b      	lsls	r3, r3, #8
 8008f7e:	b21a      	sxth	r2, r3
 8008f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f82:	7cdb      	ldrb	r3, [r3, #19]
 8008f84:	b21b      	sxth	r3, r3
 8008f86:	4313      	orrs	r3, r2
 8008f88:	b21b      	sxth	r3, r3
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8008f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d112      	bne.n	8008fba <find_volume+0x2e6>
 8008f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f96:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008f9a:	061a      	lsls	r2, r3, #24
 8008f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f9e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008fa2:	041b      	lsls	r3, r3, #16
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008fa8:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8008fac:	0212      	lsls	r2, r2, #8
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008fb2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8008fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fbc:	7bdb      	ldrb	r3, [r3, #15]
 8008fbe:	021b      	lsls	r3, r3, #8
 8008fc0:	b21a      	sxth	r2, r3
 8008fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc4:	7b9b      	ldrb	r3, [r3, #14]
 8008fc6:	b21b      	sxth	r3, r3
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	b21b      	sxth	r3, r3
 8008fcc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8008fce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d101      	bne.n	8008fd8 <find_volume+0x304>
 8008fd4:	230d      	movs	r3, #13
 8008fd6:	e13b      	b.n	8009250 <find_volume+0x57c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8008fd8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008fda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fdc:	4413      	add	r3, r2
 8008fde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008fe0:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8008fe4:	0912      	lsrs	r2, r2, #4
 8008fe6:	b292      	uxth	r2, r2
 8008fe8:	4413      	add	r3, r2
 8008fea:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008fec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d201      	bcs.n	8008ff8 <find_volume+0x324>
 8008ff4:	230d      	movs	r3, #13
 8008ff6:	e12b      	b.n	8009250 <find_volume+0x57c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8008ff8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffc:	1ad3      	subs	r3, r2, r3
 8008ffe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009000:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8009004:	fbb3 f3f2 	udiv	r3, r3, r2
 8009008:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800900a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900c:	2b00      	cmp	r3, #0
 800900e:	d101      	bne.n	8009014 <find_volume+0x340>
 8009010:	230d      	movs	r3, #13
 8009012:	e11d      	b.n	8009250 <find_volume+0x57c>
	fmt = FS_FAT12;
 8009014:	2301      	movs	r3, #1
 8009016:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800901a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009020:	4293      	cmp	r3, r2
 8009022:	d902      	bls.n	800902a <find_volume+0x356>
 8009024:	2302      	movs	r3, #2
 8009026:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800902a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009030:	4293      	cmp	r3, r2
 8009032:	d902      	bls.n	800903a <find_volume+0x366>
 8009034:	2303      	movs	r3, #3
 8009036:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800903a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903c:	1c9a      	adds	r2, r3, #2
 800903e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009040:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8009044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009046:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009048:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800904c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800904e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009050:	441a      	add	r2, r3
 8009052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009054:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8009058:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800905a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800905c:	441a      	add	r2, r3
 800905e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009060:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 8009064:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009068:	2b03      	cmp	r3, #3
 800906a:	d121      	bne.n	80090b0 <find_volume+0x3dc>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800906c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8009072:	2b00      	cmp	r3, #0
 8009074:	d001      	beq.n	800907a <find_volume+0x3a6>
 8009076:	230d      	movs	r3, #13
 8009078:	e0ea      	b.n	8009250 <find_volume+0x57c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800907a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800907c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009080:	061a      	lsls	r2, r3, #24
 8009082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009084:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8009088:	041b      	lsls	r3, r3, #16
 800908a:	4313      	orrs	r3, r2
 800908c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800908e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8009092:	0212      	lsls	r2, r2, #8
 8009094:	4313      	orrs	r3, r2
 8009096:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009098:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800909c:	431a      	orrs	r2, r3
 800909e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a0:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80090a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	647b      	str	r3, [r7, #68]	; 0x44
 80090ae:	e025      	b.n	80090fc <find_volume+0x428>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80090b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b2:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d101      	bne.n	80090be <find_volume+0x3ea>
 80090ba:	230d      	movs	r3, #13
 80090bc:	e0c8      	b.n	8009250 <find_volume+0x57c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80090be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c0:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80090c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090c6:	441a      	add	r2, r3
 80090c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ca:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80090ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d104      	bne.n	80090e0 <find_volume+0x40c>
 80090d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80090dc:	005b      	lsls	r3, r3, #1
 80090de:	e00c      	b.n	80090fa <find_volume+0x426>
 80090e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80090e6:	4613      	mov	r3, r2
 80090e8:	005b      	lsls	r3, r3, #1
 80090ea:	4413      	add	r3, r2
 80090ec:	085a      	lsrs	r2, r3, #1
 80090ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80090f4:	f003 0301 	and.w	r3, r3, #1
 80090f8:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 80090fa:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80090fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090fe:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8009102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009104:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009108:	0a5b      	lsrs	r3, r3, #9
 800910a:	429a      	cmp	r2, r3
 800910c:	d201      	bcs.n	8009112 <find_volume+0x43e>
		return FR_NO_FILESYSTEM;
 800910e:	230d      	movs	r3, #13
 8009110:	e09e      	b.n	8009250 <find_volume+0x57c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8009112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009114:	f04f 32ff 	mov.w	r2, #4294967295
 8009118:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 800911c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800911e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009124:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8009128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800912a:	2280      	movs	r2, #128	; 0x80
 800912c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8009130:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009134:	2b03      	cmp	r3, #3
 8009136:	d177      	bne.n	8009228 <find_volume+0x554>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8009138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800913a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800913e:	021b      	lsls	r3, r3, #8
 8009140:	b21a      	sxth	r2, r3
 8009142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009144:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009148:	b21b      	sxth	r3, r3
 800914a:	4313      	orrs	r3, r2
 800914c:	b21b      	sxth	r3, r3
 800914e:	2b01      	cmp	r3, #1
 8009150:	d16a      	bne.n	8009228 <find_volume+0x554>
		&& move_window(fs, bsect + 1) == FR_OK)
 8009152:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009154:	3301      	adds	r3, #1
 8009156:	4619      	mov	r1, r3
 8009158:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800915a:	f7fe fd40 	bl	8007bde <move_window>
 800915e:	4603      	mov	r3, r0
 8009160:	2b00      	cmp	r3, #0
 8009162:	d161      	bne.n	8009228 <find_volume+0x554>
	{
		fs->fsi_flag = 0;
 8009164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009166:	2200      	movs	r2, #0
 8009168:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800916c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800916e:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8009172:	021b      	lsls	r3, r3, #8
 8009174:	b21a      	sxth	r2, r3
 8009176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009178:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800917c:	b21b      	sxth	r3, r3
 800917e:	4313      	orrs	r3, r2
 8009180:	b21b      	sxth	r3, r3
 8009182:	4a35      	ldr	r2, [pc, #212]	; (8009258 <find_volume+0x584>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d14f      	bne.n	8009228 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8009188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918a:	78db      	ldrb	r3, [r3, #3]
 800918c:	061a      	lsls	r2, r3, #24
 800918e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009190:	789b      	ldrb	r3, [r3, #2]
 8009192:	041b      	lsls	r3, r3, #16
 8009194:	4313      	orrs	r3, r2
 8009196:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009198:	7852      	ldrb	r2, [r2, #1]
 800919a:	0212      	lsls	r2, r2, #8
 800919c:	4313      	orrs	r3, r2
 800919e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091a0:	7812      	ldrb	r2, [r2, #0]
 80091a2:	4313      	orrs	r3, r2
 80091a4:	4a2d      	ldr	r2, [pc, #180]	; (800925c <find_volume+0x588>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d13e      	bne.n	8009228 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80091aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ac:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 80091b0:	061a      	lsls	r2, r3, #24
 80091b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b4:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 80091b8:	041b      	lsls	r3, r3, #16
 80091ba:	4313      	orrs	r3, r2
 80091bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091be:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 80091c2:	0212      	lsls	r2, r2, #8
 80091c4:	4313      	orrs	r3, r2
 80091c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091c8:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 80091cc:	4313      	orrs	r3, r2
 80091ce:	4a24      	ldr	r2, [pc, #144]	; (8009260 <find_volume+0x58c>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d129      	bne.n	8009228 <find_volume+0x554>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80091d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d6:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 80091da:	061a      	lsls	r2, r3, #24
 80091dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091de:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 80091e2:	041b      	lsls	r3, r3, #16
 80091e4:	4313      	orrs	r3, r2
 80091e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091e8:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 80091ec:	0212      	lsls	r2, r2, #8
 80091ee:	4313      	orrs	r3, r2
 80091f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091f2:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 80091f6:	431a      	orrs	r2, r3
 80091f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091fa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80091fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009200:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8009204:	061a      	lsls	r2, r3, #24
 8009206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009208:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800920c:	041b      	lsls	r3, r3, #16
 800920e:	4313      	orrs	r3, r2
 8009210:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009212:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8009216:	0212      	lsls	r2, r2, #8
 8009218:	4313      	orrs	r3, r2
 800921a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800921c:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8009220:	431a      	orrs	r2, r3
 8009222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009224:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8009228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800922a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800922e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8009232:	4b0c      	ldr	r3, [pc, #48]	; (8009264 <find_volume+0x590>)
 8009234:	881b      	ldrh	r3, [r3, #0]
 8009236:	3301      	adds	r3, #1
 8009238:	b29a      	uxth	r2, r3
 800923a:	4b0a      	ldr	r3, [pc, #40]	; (8009264 <find_volume+0x590>)
 800923c:	801a      	strh	r2, [r3, #0]
 800923e:	4b09      	ldr	r3, [pc, #36]	; (8009264 <find_volume+0x590>)
 8009240:	881a      	ldrh	r2, [r3, #0]
 8009242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009244:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8009248:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800924a:	f7fe fc55 	bl	8007af8 <clear_lock>
#endif

	return FR_OK;
 800924e:	2300      	movs	r3, #0
}
 8009250:	4618      	mov	r0, r3
 8009252:	3758      	adds	r7, #88	; 0x58
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}
 8009258:	ffffaa55 	.word	0xffffaa55
 800925c:	41615252 	.word	0x41615252
 8009260:	61417272 	.word	0x61417272
 8009264:	200000cc 	.word	0x200000cc

08009268 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d022      	beq.n	80092c0 <validate+0x58>
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009280:	2b00      	cmp	r3, #0
 8009282:	d01d      	beq.n	80092c0 <validate+0x58>
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800928a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800928e:	2b00      	cmp	r3, #0
 8009290:	d016      	beq.n	80092c0 <validate+0x58>
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009298:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d10c      	bne.n	80092c0 <validate+0x58>
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80092ac:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80092b0:	4618      	mov	r0, r3
 80092b2:	f7fe f981 	bl	80075b8 <disk_status>
 80092b6:	4603      	mov	r3, r0
 80092b8:	f003 0301 	and.w	r3, r3, #1
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d001      	beq.n	80092c4 <validate+0x5c>
		return FR_INVALID_OBJECT;
 80092c0:	2309      	movs	r3, #9
 80092c2:	e000      	b.n	80092c6 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3710      	adds	r7, #16
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
	...

080092d0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b088      	sub	sp, #32
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	60f8      	str	r0, [r7, #12]
 80092d8:	60b9      	str	r1, [r7, #8]
 80092da:	4613      	mov	r3, r2
 80092dc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 80092e2:	f107 0310 	add.w	r3, r7, #16
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7ff fc46 	bl	8008b78 <get_ldnumber>
 80092ec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80092ee:	69fb      	ldr	r3, [r7, #28]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	da01      	bge.n	80092f8 <f_mount+0x28>
 80092f4:	230b      	movs	r3, #11
 80092f6:	e02d      	b.n	8009354 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80092f8:	4a18      	ldr	r2, [pc, #96]	; (800935c <f_mount+0x8c>)
 80092fa:	69fb      	ldr	r3, [r7, #28]
 80092fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009300:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009302:	69bb      	ldr	r3, [r7, #24]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d006      	beq.n	8009316 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8009308:	69b8      	ldr	r0, [r7, #24]
 800930a:	f7fe fbf5 	bl	8007af8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800930e:	69bb      	ldr	r3, [r7, #24]
 8009310:	2200      	movs	r2, #0
 8009312:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d003      	beq.n	8009324 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2200      	movs	r2, #0
 8009320:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009324:	68fa      	ldr	r2, [r7, #12]
 8009326:	490d      	ldr	r1, [pc, #52]	; (800935c <f_mount+0x8c>)
 8009328:	69fb      	ldr	r3, [r7, #28]
 800932a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d002      	beq.n	800933a <f_mount+0x6a>
 8009334:	79fb      	ldrb	r3, [r7, #7]
 8009336:	2b01      	cmp	r3, #1
 8009338:	d001      	beq.n	800933e <f_mount+0x6e>
 800933a:	2300      	movs	r3, #0
 800933c:	e00a      	b.n	8009354 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800933e:	f107 0108 	add.w	r1, r7, #8
 8009342:	f107 030c 	add.w	r3, r7, #12
 8009346:	2200      	movs	r2, #0
 8009348:	4618      	mov	r0, r3
 800934a:	f7ff fcc3 	bl	8008cd4 <find_volume>
 800934e:	4603      	mov	r3, r0
 8009350:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009352:	7dfb      	ldrb	r3, [r7, #23]
}
 8009354:	4618      	mov	r0, r3
 8009356:	3720      	adds	r7, #32
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}
 800935c:	200000c8 	.word	0x200000c8

08009360 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8009366:	af00      	add	r7, sp, #0
 8009368:	f107 030c 	add.w	r3, r7, #12
 800936c:	6018      	str	r0, [r3, #0]
 800936e:	f107 0308 	add.w	r3, r7, #8
 8009372:	6019      	str	r1, [r3, #0]
 8009374:	1dfb      	adds	r3, r7, #7
 8009376:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8009378:	f107 030c 	add.w	r3, r7, #12
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d101      	bne.n	8009386 <f_open+0x26>
 8009382:	2309      	movs	r3, #9
 8009384:	e1f2      	b.n	800976c <f_open+0x40c>
	fp->fs = 0;			/* Clear file object */
 8009386:	f107 030c 	add.w	r3, r7, #12
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2200      	movs	r2, #0
 800938e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8009392:	1dfb      	adds	r3, r7, #7
 8009394:	1dfa      	adds	r2, r7, #7
 8009396:	7812      	ldrb	r2, [r2, #0]
 8009398:	f002 021f 	and.w	r2, r2, #31
 800939c:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800939e:	1dfb      	adds	r3, r7, #7
 80093a0:	781b      	ldrb	r3, [r3, #0]
 80093a2:	f023 0301 	bic.w	r3, r3, #1
 80093a6:	b2da      	uxtb	r2, r3
 80093a8:	f107 0108 	add.w	r1, r7, #8
 80093ac:	f107 0320 	add.w	r3, r7, #32
 80093b0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80093b4:	4618      	mov	r0, r3
 80093b6:	f7ff fc8d 	bl	8008cd4 <find_volume>
 80093ba:	4603      	mov	r3, r0
 80093bc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 80093c0:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	f040 81cf 	bne.w	8009768 <f_open+0x408>
		INIT_BUF(dj);
 80093ca:	f107 0320 	add.w	r3, r7, #32
 80093ce:	f107 0214 	add.w	r2, r7, #20
 80093d2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 80093d6:	f107 0308 	add.w	r3, r7, #8
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	f107 0320 	add.w	r3, r7, #32
 80093e0:	4611      	mov	r1, r2
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7ff fb5a 	bl	8008a9c <follow_path>
 80093e8:	4603      	mov	r3, r0
 80093ea:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 80093ee:	f107 0320 	add.w	r3, r7, #32
 80093f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80093f6:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80093fa:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d11a      	bne.n	8009438 <f_open+0xd8>
			if (!dir)	/* Default directory itself */
 8009402:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009406:	2b00      	cmp	r3, #0
 8009408:	d103      	bne.n	8009412 <f_open+0xb2>
				res = FR_INVALID_NAME;
 800940a:	2306      	movs	r3, #6
 800940c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8009410:	e012      	b.n	8009438 <f_open+0xd8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009412:	1dfb      	adds	r3, r7, #7
 8009414:	781b      	ldrb	r3, [r3, #0]
 8009416:	f023 0301 	bic.w	r3, r3, #1
 800941a:	2b00      	cmp	r3, #0
 800941c:	bf14      	ite	ne
 800941e:	2301      	movne	r3, #1
 8009420:	2300      	moveq	r3, #0
 8009422:	b2db      	uxtb	r3, r3
 8009424:	461a      	mov	r2, r3
 8009426:	f107 0320 	add.w	r3, r7, #32
 800942a:	4611      	mov	r1, r2
 800942c:	4618      	mov	r0, r3
 800942e:	f7fe f9d9 	bl	80077e4 <chk_lock>
 8009432:	4603      	mov	r3, r0
 8009434:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009438:	1dfb      	adds	r3, r7, #7
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	f003 031c 	and.w	r3, r3, #28
 8009440:	2b00      	cmp	r3, #0
 8009442:	f000 80cc 	beq.w	80095de <f_open+0x27e>
			if (res != FR_OK) {					/* No file, create new */
 8009446:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800944a:	2b00      	cmp	r3, #0
 800944c:	d01f      	beq.n	800948e <f_open+0x12e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800944e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8009452:	2b04      	cmp	r3, #4
 8009454:	d10e      	bne.n	8009474 <f_open+0x114>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009456:	f7fe fa31 	bl	80078bc <enq_lock>
 800945a:	4603      	mov	r3, r0
 800945c:	2b00      	cmp	r3, #0
 800945e:	d006      	beq.n	800946e <f_open+0x10e>
 8009460:	f107 0320 	add.w	r3, r7, #32
 8009464:	4618      	mov	r0, r3
 8009466:	f7ff fa20 	bl	80088aa <dir_register>
 800946a:	4603      	mov	r3, r0
 800946c:	e000      	b.n	8009470 <f_open+0x110>
 800946e:	2312      	movs	r3, #18
 8009470:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009474:	1dfb      	adds	r3, r7, #7
 8009476:	1dfa      	adds	r2, r7, #7
 8009478:	7812      	ldrb	r2, [r2, #0]
 800947a:	f042 0208 	orr.w	r2, r2, #8
 800947e:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8009480:	f107 0320 	add.w	r3, r7, #32
 8009484:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009488:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800948c:	e014      	b.n	80094b8 <f_open+0x158>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800948e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009492:	330b      	adds	r3, #11
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	f003 0311 	and.w	r3, r3, #17
 800949a:	2b00      	cmp	r3, #0
 800949c:	d003      	beq.n	80094a6 <f_open+0x146>
					res = FR_DENIED;
 800949e:	2307      	movs	r3, #7
 80094a0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80094a4:	e008      	b.n	80094b8 <f_open+0x158>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80094a6:	1dfb      	adds	r3, r7, #7
 80094a8:	781b      	ldrb	r3, [r3, #0]
 80094aa:	f003 0304 	and.w	r3, r3, #4
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d002      	beq.n	80094b8 <f_open+0x158>
						res = FR_EXIST;
 80094b2:	2308      	movs	r3, #8
 80094b4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80094b8:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80094bc:	2b00      	cmp	r3, #0
 80094be:	f040 80af 	bne.w	8009620 <f_open+0x2c0>
 80094c2:	1dfb      	adds	r3, r7, #7
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	f003 0308 	and.w	r3, r3, #8
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	f000 80a8 	beq.w	8009620 <f_open+0x2c0>
				dw = GET_FATTIME();				/* Created time */
 80094d0:	f7fe f80c 	bl	80074ec <get_fattime>
 80094d4:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 80094d8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80094dc:	330e      	adds	r3, #14
 80094de:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 80094e2:	b2d2      	uxtb	r2, r2
 80094e4:	701a      	strb	r2, [r3, #0]
 80094e6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	0a1b      	lsrs	r3, r3, #8
 80094ee:	b29a      	uxth	r2, r3
 80094f0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80094f4:	330f      	adds	r3, #15
 80094f6:	b2d2      	uxtb	r2, r2
 80094f8:	701a      	strb	r2, [r3, #0]
 80094fa:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80094fe:	0c1a      	lsrs	r2, r3, #16
 8009500:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009504:	3310      	adds	r3, #16
 8009506:	b2d2      	uxtb	r2, r2
 8009508:	701a      	strb	r2, [r3, #0]
 800950a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800950e:	0e1a      	lsrs	r2, r3, #24
 8009510:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009514:	3311      	adds	r3, #17
 8009516:	b2d2      	uxtb	r2, r2
 8009518:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800951a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800951e:	330b      	adds	r3, #11
 8009520:	2200      	movs	r2, #0
 8009522:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8009524:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009528:	331c      	adds	r3, #28
 800952a:	2200      	movs	r2, #0
 800952c:	701a      	strb	r2, [r3, #0]
 800952e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009532:	331d      	adds	r3, #29
 8009534:	2200      	movs	r2, #0
 8009536:	701a      	strb	r2, [r3, #0]
 8009538:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800953c:	331e      	adds	r3, #30
 800953e:	2200      	movs	r2, #0
 8009540:	701a      	strb	r2, [r3, #0]
 8009542:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009546:	331f      	adds	r3, #31
 8009548:	2200      	movs	r2, #0
 800954a:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800954c:	f107 0320 	add.w	r3, r7, #32
 8009550:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009554:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8009558:	4618      	mov	r0, r3
 800955a:	f7ff f904 	bl	8008766 <ld_clust>
 800955e:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 8009562:	2100      	movs	r1, #0
 8009564:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8009568:	f7ff f92a 	bl	80087c0 <st_clust>
				dj.fs->wflag = 1;
 800956c:	f107 0320 	add.w	r3, r7, #32
 8009570:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009574:	2201      	movs	r2, #1
 8009576:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800957a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800957e:	2b00      	cmp	r3, #0
 8009580:	d04e      	beq.n	8009620 <f_open+0x2c0>
					dw = dj.fs->winsect;
 8009582:	f107 0320 	add.w	r3, r7, #32
 8009586:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800958a:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800958e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 8009592:	f107 0320 	add.w	r3, r7, #32
 8009596:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800959a:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 800959e:	4618      	mov	r0, r3
 80095a0:	f7fe fde1 	bl	8008166 <remove_chain>
 80095a4:	4603      	mov	r3, r0
 80095a6:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 80095aa:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d136      	bne.n	8009620 <f_open+0x2c0>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80095b2:	f107 0320 	add.w	r3, r7, #32
 80095b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80095ba:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 80095be:	3a01      	subs	r2, #1
 80095c0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 80095c4:	f107 0320 	add.w	r3, r7, #32
 80095c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80095cc:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7fe fb04 	bl	8007bde <move_window>
 80095d6:	4603      	mov	r3, r0
 80095d8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80095dc:	e020      	b.n	8009620 <f_open+0x2c0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80095de:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d11c      	bne.n	8009620 <f_open+0x2c0>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80095e6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80095ea:	330b      	adds	r3, #11
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	f003 0310 	and.w	r3, r3, #16
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d003      	beq.n	80095fe <f_open+0x29e>
					res = FR_NO_FILE;
 80095f6:	2304      	movs	r3, #4
 80095f8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80095fc:	e010      	b.n	8009620 <f_open+0x2c0>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80095fe:	1dfb      	adds	r3, r7, #7
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	f003 0302 	and.w	r3, r3, #2
 8009606:	2b00      	cmp	r3, #0
 8009608:	d00a      	beq.n	8009620 <f_open+0x2c0>
 800960a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800960e:	330b      	adds	r3, #11
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	f003 0301 	and.w	r3, r3, #1
 8009616:	2b00      	cmp	r3, #0
 8009618:	d002      	beq.n	8009620 <f_open+0x2c0>
						res = FR_DENIED;
 800961a:	2307      	movs	r3, #7
 800961c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 8009620:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8009624:	2b00      	cmp	r3, #0
 8009626:	d13d      	bne.n	80096a4 <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009628:	1dfb      	adds	r3, r7, #7
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	f003 0308 	and.w	r3, r3, #8
 8009630:	2b00      	cmp	r3, #0
 8009632:	d005      	beq.n	8009640 <f_open+0x2e0>
				mode |= FA__WRITTEN;
 8009634:	1dfb      	adds	r3, r7, #7
 8009636:	1dfa      	adds	r2, r7, #7
 8009638:	7812      	ldrb	r2, [r2, #0]
 800963a:	f042 0220 	orr.w	r2, r2, #32
 800963e:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8009640:	f107 0320 	add.w	r3, r7, #32
 8009644:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009648:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800964c:	f107 030c 	add.w	r3, r7, #12
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 8009656:	f107 030c 	add.w	r3, r7, #12
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8009660:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009664:	1dfb      	adds	r3, r7, #7
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	f023 0301 	bic.w	r3, r3, #1
 800966c:	2b00      	cmp	r3, #0
 800966e:	bf14      	ite	ne
 8009670:	2301      	movne	r3, #1
 8009672:	2300      	moveq	r3, #0
 8009674:	b2db      	uxtb	r3, r3
 8009676:	461a      	mov	r2, r3
 8009678:	f107 0320 	add.w	r3, r7, #32
 800967c:	4611      	mov	r1, r2
 800967e:	4618      	mov	r0, r3
 8009680:	f7fe f940 	bl	8007904 <inc_lock>
 8009684:	4602      	mov	r2, r0
 8009686:	f107 030c 	add.w	r3, r7, #12
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8009690:	f107 030c 	add.w	r3, r7, #12
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800969a:	2b00      	cmp	r3, #0
 800969c:	d102      	bne.n	80096a4 <f_open+0x344>
 800969e:	2302      	movs	r3, #2
 80096a0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 80096a4:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d15d      	bne.n	8009768 <f_open+0x408>
			fp->flag = mode;					/* File access mode */
 80096ac:	f107 030c 	add.w	r3, r7, #12
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	1dfa      	adds	r2, r7, #7
 80096b4:	7812      	ldrb	r2, [r2, #0]
 80096b6:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 80096ba:	f107 030c 	add.w	r3, r7, #12
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	2200      	movs	r2, #0
 80096c2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80096c6:	f107 0320 	add.w	r3, r7, #32
 80096ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80096ce:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7ff f847 	bl	8008766 <ld_clust>
 80096d8:	4602      	mov	r2, r0
 80096da:	f107 030c 	add.w	r3, r7, #12
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80096e4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80096e8:	331f      	adds	r3, #31
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	061a      	lsls	r2, r3, #24
 80096ee:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80096f2:	331e      	adds	r3, #30
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	041b      	lsls	r3, r3, #16
 80096f8:	4313      	orrs	r3, r2
 80096fa:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80096fe:	321d      	adds	r2, #29
 8009700:	7812      	ldrb	r2, [r2, #0]
 8009702:	0212      	lsls	r2, r2, #8
 8009704:	4313      	orrs	r3, r2
 8009706:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800970a:	321c      	adds	r2, #28
 800970c:	7812      	ldrb	r2, [r2, #0]
 800970e:	431a      	orrs	r2, r3
 8009710:	f107 030c 	add.w	r3, r7, #12
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 800971a:	f107 030c 	add.w	r3, r7, #12
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2200      	movs	r2, #0
 8009722:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 8009726:	f107 030c 	add.w	r3, r7, #12
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	2200      	movs	r2, #0
 800972e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8009732:	f107 030c 	add.w	r3, r7, #12
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	2200      	movs	r2, #0
 800973a:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800973e:	f107 0320 	add.w	r3, r7, #32
 8009742:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8009746:	f107 030c 	add.w	r3, r7, #12
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8009750:	f107 030c 	add.w	r3, r7, #12
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800975a:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800975e:	f107 030c 	add.w	r3, r7, #12
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8009768:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 800976c:	4618      	mov	r0, r3
 800976e:	f507 7714 	add.w	r7, r7, #592	; 0x250
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}

08009776 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009776:	b580      	push	{r7, lr}
 8009778:	b08a      	sub	sp, #40	; 0x28
 800977a:	af00      	add	r7, sp, #0
 800977c:	60f8      	str	r0, [r7, #12]
 800977e:	60b9      	str	r1, [r7, #8]
 8009780:	607a      	str	r2, [r7, #4]
 8009782:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	2200      	movs	r2, #0
 800978c:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800978e:	68f8      	ldr	r0, [r7, #12]
 8009790:	f7ff fd6a 	bl	8009268 <validate>
 8009794:	4603      	mov	r3, r0
 8009796:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8009798:	7dfb      	ldrb	r3, [r7, #23]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d001      	beq.n	80097a2 <f_write+0x2c>
 800979e:	7dfb      	ldrb	r3, [r7, #23]
 80097a0:	e192      	b.n	8009ac8 <f_write+0x352>
	if (fp->err)							/* Check error */
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d003      	beq.n	80097b4 <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80097b2:	e189      	b.n	8009ac8 <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80097ba:	f003 0302 	and.w	r3, r3, #2
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d101      	bne.n	80097c6 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 80097c2:	2307      	movs	r3, #7
 80097c4:	e180      	b.n	8009ac8 <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	441a      	add	r2, r3
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80097d6:	429a      	cmp	r2, r3
 80097d8:	f080 8158 	bcs.w	8009a8c <f_write+0x316>
 80097dc:	2300      	movs	r3, #0
 80097de:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 80097e0:	e154      	b.n	8009a8c <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80097e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	f040 8114 	bne.w	8009a1a <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80097f8:	0a5b      	lsrs	r3, r3, #9
 80097fa:	b2da      	uxtb	r2, r3
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009802:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8009806:	3b01      	subs	r3, #1
 8009808:	b2db      	uxtb	r3, r3
 800980a:	4013      	ands	r3, r2
 800980c:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800980e:	7dbb      	ldrb	r3, [r7, #22]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d151      	bne.n	80098b8 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800981a:	2b00      	cmp	r3, #0
 800981c:	d10f      	bne.n	800983e <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009824:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8009826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009828:	2b00      	cmp	r3, #0
 800982a:	d121      	bne.n	8009870 <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009832:	2100      	movs	r1, #0
 8009834:	4618      	mov	r0, r3
 8009836:	f7fe fcf0 	bl	800821a <create_chain>
 800983a:	6278      	str	r0, [r7, #36]	; 0x24
 800983c:	e018      	b.n	8009870 <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8009844:	2b00      	cmp	r3, #0
 8009846:	d008      	beq.n	800985a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800984e:	4619      	mov	r1, r3
 8009850:	68f8      	ldr	r0, [r7, #12]
 8009852:	f7fe fd7f 	bl	8008354 <clmt_clust>
 8009856:	6278      	str	r0, [r7, #36]	; 0x24
 8009858:	e00a      	b.n	8009870 <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009866:	4619      	mov	r1, r3
 8009868:	4610      	mov	r0, r2
 800986a:	f7fe fcd6 	bl	800821a <create_chain>
 800986e:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009872:	2b00      	cmp	r3, #0
 8009874:	f000 810f 	beq.w	8009a96 <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8009878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987a:	2b01      	cmp	r3, #1
 800987c:	d105      	bne.n	800988a <f_write+0x114>
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2202      	movs	r2, #2
 8009882:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8009886:	2302      	movs	r3, #2
 8009888:	e11e      	b.n	8009ac8 <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800988a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009890:	d105      	bne.n	800989e <f_write+0x128>
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2201      	movs	r2, #1
 8009896:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800989a:	2301      	movs	r3, #1
 800989c:	e114      	b.n	8009ac8 <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d103      	bne.n	80098b8 <f_write+0x142>
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098b4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80098be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d01d      	beq.n	8009902 <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80098cc:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80098d0:	68f9      	ldr	r1, [r7, #12]
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80098d8:	2301      	movs	r3, #1
 80098da:	f7fd fecd 	bl	8007678 <disk_write>
 80098de:	4603      	mov	r3, r0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d005      	beq.n	80098f0 <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2201      	movs	r2, #1
 80098e8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80098ec:	2301      	movs	r3, #1
 80098ee:	e0eb      	b.n	8009ac8 <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80098f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098fa:	b2da      	uxtb	r2, r3
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800990e:	4619      	mov	r1, r3
 8009910:	4610      	mov	r0, r2
 8009912:	f7fe fa3f 	bl	8007d94 <clust2sect>
 8009916:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d105      	bne.n	800992a <f_write+0x1b4>
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2202      	movs	r2, #2
 8009922:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8009926:	2302      	movs	r3, #2
 8009928:	e0ce      	b.n	8009ac8 <f_write+0x352>
			sect += csect;
 800992a:	7dbb      	ldrb	r3, [r7, #22]
 800992c:	693a      	ldr	r2, [r7, #16]
 800992e:	4413      	add	r3, r2
 8009930:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	0a5b      	lsrs	r3, r3, #9
 8009936:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009938:	69fb      	ldr	r3, [r7, #28]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d048      	beq.n	80099d0 <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800993e:	7dba      	ldrb	r2, [r7, #22]
 8009940:	69fb      	ldr	r3, [r7, #28]
 8009942:	4413      	add	r3, r2
 8009944:	68fa      	ldr	r2, [r7, #12]
 8009946:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800994a:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800994e:	4293      	cmp	r3, r2
 8009950:	d908      	bls.n	8009964 <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009958:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800995c:	461a      	mov	r2, r3
 800995e:	7dbb      	ldrb	r3, [r7, #22]
 8009960:	1ad3      	subs	r3, r2, r3
 8009962:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800996a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800996e:	69fb      	ldr	r3, [r7, #28]
 8009970:	693a      	ldr	r2, [r7, #16]
 8009972:	69b9      	ldr	r1, [r7, #24]
 8009974:	f7fd fe80 	bl	8007678 <disk_write>
 8009978:	4603      	mov	r3, r0
 800997a:	2b00      	cmp	r3, #0
 800997c:	d005      	beq.n	800998a <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2201      	movs	r2, #1
 8009982:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8009986:	2301      	movs	r3, #1
 8009988:	e09e      	b.n	8009ac8 <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	1ad3      	subs	r3, r2, r3
 8009994:	69fa      	ldr	r2, [r7, #28]
 8009996:	429a      	cmp	r2, r3
 8009998:	d916      	bls.n	80099c8 <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800999a:	68f8      	ldr	r0, [r7, #12]
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	1ad3      	subs	r3, r2, r3
 80099a6:	025b      	lsls	r3, r3, #9
 80099a8:	69ba      	ldr	r2, [r7, #24]
 80099aa:	4413      	add	r3, r2
 80099ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099b0:	4619      	mov	r1, r3
 80099b2:	f7fd fe9f 	bl	80076f4 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80099bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099c0:	b2da      	uxtb	r2, r3
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80099c8:	69fb      	ldr	r3, [r7, #28]
 80099ca:	025b      	lsls	r3, r3, #9
 80099cc:	623b      	str	r3, [r7, #32]
				continue;
 80099ce:	e047      	b.n	8009a60 <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80099d6:	693a      	ldr	r2, [r7, #16]
 80099d8:	429a      	cmp	r2, r3
 80099da:	d01a      	beq.n	8009a12 <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d212      	bcs.n	8009a12 <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80099f2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80099f6:	68f9      	ldr	r1, [r7, #12]
 80099f8:	2301      	movs	r3, #1
 80099fa:	693a      	ldr	r2, [r7, #16]
 80099fc:	f7fd fe1c 	bl	8007638 <disk_read>
 8009a00:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d005      	beq.n	8009a12 <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2201      	movs	r2, #1
 8009a0a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8009a0e:	2301      	movs	r3, #1
 8009a10:	e05a      	b.n	8009ac8 <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	693a      	ldr	r2, [r7, #16]
 8009a16:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8009a20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a24:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009a28:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8009a2a:	6a3a      	ldr	r2, [r7, #32]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d901      	bls.n	8009a36 <f_write+0x2c0>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8009a3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a40:	68fa      	ldr	r2, [r7, #12]
 8009a42:	4413      	add	r3, r2
 8009a44:	6a3a      	ldr	r2, [r7, #32]
 8009a46:	69b9      	ldr	r1, [r7, #24]
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f7fd fe53 	bl	80076f4 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a58:	b2da      	uxtb	r2, r3
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8009a60:	69ba      	ldr	r2, [r7, #24]
 8009a62:	6a3b      	ldr	r3, [r7, #32]
 8009a64:	4413      	add	r3, r2
 8009a66:	61bb      	str	r3, [r7, #24]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009a6e:	6a3b      	ldr	r3, [r7, #32]
 8009a70:	441a      	add	r2, r3
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	6a3b      	ldr	r3, [r7, #32]
 8009a7e:	441a      	add	r2, r3
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	601a      	str	r2, [r3, #0]
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	6a3b      	ldr	r3, [r7, #32]
 8009a88:	1ad3      	subs	r3, r2, r3
 8009a8a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	f47f aea7 	bne.w	80097e2 <f_write+0x6c>
 8009a94:	e000      	b.n	8009a98 <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009a96:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d905      	bls.n	8009ab4 <f_write+0x33e>
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009aba:	f043 0320 	orr.w	r3, r3, #32
 8009abe:	b2da      	uxtb	r2, r3
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 8009ac6:	2300      	movs	r3, #0
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3728      	adds	r7, #40	; 0x28
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b086      	sub	sp, #24
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f7ff fbc5 	bl	8009268 <validate>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009ae2:	7dfb      	ldrb	r3, [r7, #23]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	f040 80a8 	bne.w	8009c3a <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009af0:	f003 0320 	and.w	r3, r3, #32
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	f000 80a0 	beq.w	8009c3a <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d019      	beq.n	8009b3c <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009b0e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009b12:	6879      	ldr	r1, [r7, #4]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	f7fd fdac 	bl	8007678 <disk_write>
 8009b20:	4603      	mov	r3, r0
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d001      	beq.n	8009b2a <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8009b26:	2301      	movs	r3, #1
 8009b28:	e088      	b.n	8009c3c <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009b30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b34:	b2da      	uxtb	r2, r3
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8009b48:	4619      	mov	r1, r3
 8009b4a:	4610      	mov	r0, r2
 8009b4c:	f7fe f847 	bl	8007bde <move_window>
 8009b50:	4603      	mov	r3, r0
 8009b52:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8009b54:	7dfb      	ldrb	r3, [r7, #23]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d16f      	bne.n	8009c3a <f_sync+0x16a>
				dir = fp->dir_ptr;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8009b60:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	330b      	adds	r3, #11
 8009b66:	781a      	ldrb	r2, [r3, #0]
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	330b      	adds	r3, #11
 8009b6c:	f042 0220 	orr.w	r2, r2, #32
 8009b70:	b2d2      	uxtb	r2, r2
 8009b72:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	331c      	adds	r3, #28
 8009b7e:	b2d2      	uxtb	r2, r2
 8009b80:	701a      	strb	r2, [r3, #0]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	0a1b      	lsrs	r3, r3, #8
 8009b8c:	b29a      	uxth	r2, r3
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	331d      	adds	r3, #29
 8009b92:	b2d2      	uxtb	r2, r2
 8009b94:	701a      	strb	r2, [r3, #0]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009b9c:	0c1a      	lsrs	r2, r3, #16
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	331e      	adds	r3, #30
 8009ba2:	b2d2      	uxtb	r2, r2
 8009ba4:	701a      	strb	r2, [r3, #0]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009bac:	0e1a      	lsrs	r2, r3, #24
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	331f      	adds	r3, #31
 8009bb2:	b2d2      	uxtb	r2, r2
 8009bb4:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	6938      	ldr	r0, [r7, #16]
 8009bc0:	f7fe fdfe 	bl	80087c0 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8009bc4:	f7fd fc92 	bl	80074ec <get_fattime>
 8009bc8:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	3316      	adds	r3, #22
 8009bce:	68fa      	ldr	r2, [r7, #12]
 8009bd0:	b2d2      	uxtb	r2, r2
 8009bd2:	701a      	strb	r2, [r3, #0]
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	0a1b      	lsrs	r3, r3, #8
 8009bda:	b29a      	uxth	r2, r3
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	3317      	adds	r3, #23
 8009be0:	b2d2      	uxtb	r2, r2
 8009be2:	701a      	strb	r2, [r3, #0]
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	0c1a      	lsrs	r2, r3, #16
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	3318      	adds	r3, #24
 8009bec:	b2d2      	uxtb	r2, r2
 8009bee:	701a      	strb	r2, [r3, #0]
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	0e1a      	lsrs	r2, r3, #24
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	3319      	adds	r3, #25
 8009bf8:	b2d2      	uxtb	r2, r2
 8009bfa:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	3312      	adds	r3, #18
 8009c00:	2200      	movs	r2, #0
 8009c02:	701a      	strb	r2, [r3, #0]
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	3313      	adds	r3, #19
 8009c08:	2200      	movs	r2, #0
 8009c0a:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009c12:	f023 0320 	bic.w	r3, r3, #32
 8009c16:	b2da      	uxtb	r2, r3
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009c24:	2201      	movs	r2, #1
 8009c26:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009c30:	4618      	mov	r0, r3
 8009c32:	f7fe f802 	bl	8007c3a <sync_fs>
 8009c36:	4603      	mov	r3, r0
 8009c38:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8009c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3718      	adds	r7, #24
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f7ff ff3f 	bl	8009ad0 <f_sync>
 8009c52:	4603      	mov	r3, r0
 8009c54:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009c56:	7bfb      	ldrb	r3, [r7, #15]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d116      	bne.n	8009c8a <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f7ff fb03 	bl	8009268 <validate>
 8009c62:	4603      	mov	r3, r0
 8009c64:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009c66:	7bfb      	ldrb	r3, [r7, #15]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d10e      	bne.n	8009c8a <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7fd fefc 	bl	8007a70 <dec_lock>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009c7c:	7bfb      	ldrb	r3, [r7, #15]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d103      	bne.n	8009c8a <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2200      	movs	r2, #0
 8009c86:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3710      	adds	r7, #16
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b08e      	sub	sp, #56	; 0x38
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	60b9      	str	r1, [r7, #8]
 8009c9e:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 8009ca0:	f107 030c 	add.w	r3, r7, #12
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f7ff f813 	bl	8008cd4 <find_volume>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 8009cba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	f040 80af 	bne.w	8009e22 <f_getfree+0x18e>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 8009cc4:	69fb      	ldr	r3, [r7, #28]
 8009cc6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009cca:	69fb      	ldr	r3, [r7, #28]
 8009ccc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009cd0:	3b02      	subs	r3, #2
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d805      	bhi.n	8009ce2 <f_getfree+0x4e>
			*nclst = fs->free_clust;
 8009cd6:	69fb      	ldr	r3, [r7, #28]
 8009cd8:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	601a      	str	r2, [r3, #0]
 8009ce0:	e09f      	b.n	8009e22 <f_getfree+0x18e>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 8009ce2:	69fb      	ldr	r3, [r7, #28]
 8009ce4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009ce8:	76fb      	strb	r3, [r7, #27]
			n = 0;
 8009cea:	2300      	movs	r3, #0
 8009cec:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 8009cee:	7efb      	ldrb	r3, [r7, #27]
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d125      	bne.n	8009d40 <f_getfree+0xac>
				clst = 2;
 8009cf4:	2302      	movs	r3, #2
 8009cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 8009cf8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009cfa:	69f8      	ldr	r0, [r7, #28]
 8009cfc:	f7fe f86b 	bl	8007dd6 <get_fat>
 8009d00:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d08:	d103      	bne.n	8009d12 <f_getfree+0x7e>
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009d10:	e077      	b.n	8009e02 <f_getfree+0x16e>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d103      	bne.n	8009d20 <f_getfree+0x8c>
 8009d18:	2302      	movs	r3, #2
 8009d1a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009d1e:	e070      	b.n	8009e02 <f_getfree+0x16e>
					if (stat == 0) n++;
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d102      	bne.n	8009d2c <f_getfree+0x98>
 8009d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d28:	3301      	adds	r3, #1
 8009d2a:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 8009d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d2e:	3301      	adds	r3, #1
 8009d30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d32:	69fb      	ldr	r3, [r7, #28]
 8009d34:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009d38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d3dc      	bcc.n	8009cf8 <f_getfree+0x64>
 8009d3e:	e060      	b.n	8009e02 <f_getfree+0x16e>
			} else {
				clst = fs->n_fatent;
 8009d40:	69fb      	ldr	r3, [r7, #28]
 8009d42:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009d46:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8009d4e:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 8009d50:	2300      	movs	r3, #0
 8009d52:	627b      	str	r3, [r7, #36]	; 0x24
 8009d54:	2300      	movs	r3, #0
 8009d56:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 8009d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d112      	bne.n	8009d84 <f_getfree+0xf0>
						res = move_window(fs, sect++);
 8009d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d60:	1c5a      	adds	r2, r3, #1
 8009d62:	62ba      	str	r2, [r7, #40]	; 0x28
 8009d64:	4619      	mov	r1, r3
 8009d66:	69f8      	ldr	r0, [r7, #28]
 8009d68:	f7fd ff39 	bl	8007bde <move_window>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 8009d72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d142      	bne.n	8009e00 <f_getfree+0x16c>
						p = fs->win.d8;
 8009d7a:	69fb      	ldr	r3, [r7, #28]
 8009d7c:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 8009d7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d82:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 8009d84:	7efb      	ldrb	r3, [r7, #27]
 8009d86:	2b02      	cmp	r3, #2
 8009d88:	d115      	bne.n	8009db6 <f_getfree+0x122>
						if (LD_WORD(p) == 0) n++;
 8009d8a:	6a3b      	ldr	r3, [r7, #32]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	021b      	lsls	r3, r3, #8
 8009d92:	b21a      	sxth	r2, r3
 8009d94:	6a3b      	ldr	r3, [r7, #32]
 8009d96:	781b      	ldrb	r3, [r3, #0]
 8009d98:	b21b      	sxth	r3, r3
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	b21b      	sxth	r3, r3
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d102      	bne.n	8009da8 <f_getfree+0x114>
 8009da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da4:	3301      	adds	r3, #1
 8009da6:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 8009da8:	6a3b      	ldr	r3, [r7, #32]
 8009daa:	3302      	adds	r3, #2
 8009dac:	623b      	str	r3, [r7, #32]
 8009dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db0:	3b02      	subs	r3, #2
 8009db2:	627b      	str	r3, [r7, #36]	; 0x24
 8009db4:	e01d      	b.n	8009df2 <f_getfree+0x15e>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 8009db6:	6a3b      	ldr	r3, [r7, #32]
 8009db8:	3303      	adds	r3, #3
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	061a      	lsls	r2, r3, #24
 8009dbe:	6a3b      	ldr	r3, [r7, #32]
 8009dc0:	3302      	adds	r3, #2
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	041b      	lsls	r3, r3, #16
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	6a3a      	ldr	r2, [r7, #32]
 8009dca:	3201      	adds	r2, #1
 8009dcc:	7812      	ldrb	r2, [r2, #0]
 8009dce:	0212      	lsls	r2, r2, #8
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	6a3a      	ldr	r2, [r7, #32]
 8009dd4:	7812      	ldrb	r2, [r2, #0]
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d102      	bne.n	8009de6 <f_getfree+0x152>
 8009de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de2:	3301      	adds	r3, #1
 8009de4:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 8009de6:	6a3b      	ldr	r3, [r7, #32]
 8009de8:	3304      	adds	r3, #4
 8009dea:	623b      	str	r3, [r7, #32]
 8009dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dee:	3b04      	subs	r3, #4
 8009df0:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 8009df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df4:	3b01      	subs	r3, #1
 8009df6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d1ac      	bne.n	8009d58 <f_getfree+0xc4>
 8009dfe:	e000      	b.n	8009e02 <f_getfree+0x16e>
						if (res != FR_OK) break;
 8009e00:	bf00      	nop
			}
			fs->free_clust = n;
 8009e02:	69fb      	ldr	r3, [r7, #28]
 8009e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e06:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 8009e0a:	69fb      	ldr	r3, [r7, #28]
 8009e0c:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8009e10:	f043 0301 	orr.w	r3, r3, #1
 8009e14:	b2da      	uxtb	r2, r3
 8009e16:	69fb      	ldr	r3, [r7, #28]
 8009e18:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
			*nclst = n;
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e20:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 8009e22:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3738      	adds	r7, #56	; 0x38
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}

08009e2e <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8009e2e:	b580      	push	{r7, lr}
 8009e30:	b084      	sub	sp, #16
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	6078      	str	r0, [r7, #4]
 8009e36:	460b      	mov	r3, r1
 8009e38:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8009e3a:	78fb      	ldrb	r3, [r7, #3]
 8009e3c:	2b0a      	cmp	r3, #10
 8009e3e:	d103      	bne.n	8009e48 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8009e40:	210d      	movs	r1, #13
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f7ff fff3 	bl	8009e2e <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	db25      	blt.n	8009ea0 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	1c5a      	adds	r2, r3, #1
 8009e58:	60fa      	str	r2, [r7, #12]
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	4413      	add	r3, r2
 8009e5e:	78fa      	ldrb	r2, [r7, #3]
 8009e60:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2b3c      	cmp	r3, #60	; 0x3c
 8009e66:	dd12      	ble.n	8009e8e <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6818      	ldr	r0, [r3, #0]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f103 010c 	add.w	r1, r3, #12
 8009e72:	68fa      	ldr	r2, [r7, #12]
 8009e74:	f107 0308 	add.w	r3, r7, #8
 8009e78:	f7ff fc7d 	bl	8009776 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8009e7c:	68ba      	ldr	r2, [r7, #8]
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d101      	bne.n	8009e88 <putc_bfd+0x5a>
 8009e84:	2300      	movs	r3, #0
 8009e86:	e001      	b.n	8009e8c <putc_bfd+0x5e>
 8009e88:	f04f 33ff 	mov.w	r3, #4294967295
 8009e8c:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	68fa      	ldr	r2, [r7, #12]
 8009e92:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	1c5a      	adds	r2, r3, #1
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	609a      	str	r2, [r3, #8]
 8009e9e:	e000      	b.n	8009ea2 <putc_bfd+0x74>
	if (i < 0) return;
 8009ea0:	bf00      	nop
}
 8009ea2:	3710      	adds	r7, #16
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8009ea8:	b590      	push	{r4, r7, lr}
 8009eaa:	b097      	sub	sp, #92	; 0x5c
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	613b      	str	r3, [r7, #16]
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 8009ebe:	e009      	b.n	8009ed4 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	1c5a      	adds	r2, r3, #1
 8009ec4:	607a      	str	r2, [r7, #4]
 8009ec6:	781a      	ldrb	r2, [r3, #0]
 8009ec8:	f107 030c 	add.w	r3, r7, #12
 8009ecc:	4611      	mov	r1, r2
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f7ff ffad 	bl	8009e2e <putc_bfd>
	while (*str)			/* Put the string */
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d1f1      	bne.n	8009ec0 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	db15      	blt.n	8009f0e <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8009ee2:	68f8      	ldr	r0, [r7, #12]
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	461c      	mov	r4, r3
 8009ee8:	f107 0208 	add.w	r2, r7, #8
 8009eec:	f107 030c 	add.w	r3, r7, #12
 8009ef0:	f103 010c 	add.w	r1, r3, #12
 8009ef4:	4613      	mov	r3, r2
 8009ef6:	4622      	mov	r2, r4
 8009ef8:	f7ff fc3d 	bl	8009776 <f_write>
 8009efc:	4603      	mov	r3, r0
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d105      	bne.n	8009f0e <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	68ba      	ldr	r2, [r7, #8]
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d101      	bne.n	8009f0e <f_puts+0x66>
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	e001      	b.n	8009f12 <f_puts+0x6a>
	return EOF;
 8009f0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	375c      	adds	r7, #92	; 0x5c
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd90      	pop	{r4, r7, pc}
	...

08009f1c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b087      	sub	sp, #28
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	60b9      	str	r1, [r7, #8]
 8009f26:	4613      	mov	r3, r2
 8009f28:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8009f32:	4b1e      	ldr	r3, [pc, #120]	; (8009fac <FATFS_LinkDriverEx+0x90>)
 8009f34:	7a5b      	ldrb	r3, [r3, #9]
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	d831      	bhi.n	8009fa0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009f3c:	4b1b      	ldr	r3, [pc, #108]	; (8009fac <FATFS_LinkDriverEx+0x90>)
 8009f3e:	7a5b      	ldrb	r3, [r3, #9]
 8009f40:	b2db      	uxtb	r3, r3
 8009f42:	461a      	mov	r2, r3
 8009f44:	4b19      	ldr	r3, [pc, #100]	; (8009fac <FATFS_LinkDriverEx+0x90>)
 8009f46:	2100      	movs	r1, #0
 8009f48:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8009f4a:	4b18      	ldr	r3, [pc, #96]	; (8009fac <FATFS_LinkDriverEx+0x90>)
 8009f4c:	7a5b      	ldrb	r3, [r3, #9]
 8009f4e:	b2db      	uxtb	r3, r3
 8009f50:	4a16      	ldr	r2, [pc, #88]	; (8009fac <FATFS_LinkDriverEx+0x90>)
 8009f52:	009b      	lsls	r3, r3, #2
 8009f54:	4413      	add	r3, r2
 8009f56:	68fa      	ldr	r2, [r7, #12]
 8009f58:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8009f5a:	4b14      	ldr	r3, [pc, #80]	; (8009fac <FATFS_LinkDriverEx+0x90>)
 8009f5c:	7a5b      	ldrb	r3, [r3, #9]
 8009f5e:	b2db      	uxtb	r3, r3
 8009f60:	461a      	mov	r2, r3
 8009f62:	4b12      	ldr	r3, [pc, #72]	; (8009fac <FATFS_LinkDriverEx+0x90>)
 8009f64:	4413      	add	r3, r2
 8009f66:	79fa      	ldrb	r2, [r7, #7]
 8009f68:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009f6a:	4b10      	ldr	r3, [pc, #64]	; (8009fac <FATFS_LinkDriverEx+0x90>)
 8009f6c:	7a5b      	ldrb	r3, [r3, #9]
 8009f6e:	b2db      	uxtb	r3, r3
 8009f70:	1c5a      	adds	r2, r3, #1
 8009f72:	b2d1      	uxtb	r1, r2
 8009f74:	4a0d      	ldr	r2, [pc, #52]	; (8009fac <FATFS_LinkDriverEx+0x90>)
 8009f76:	7251      	strb	r1, [r2, #9]
 8009f78:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009f7a:	7dbb      	ldrb	r3, [r7, #22]
 8009f7c:	3330      	adds	r3, #48	; 0x30
 8009f7e:	b2da      	uxtb	r2, r3
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	3301      	adds	r3, #1
 8009f88:	223a      	movs	r2, #58	; 0x3a
 8009f8a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	3302      	adds	r3, #2
 8009f90:	222f      	movs	r2, #47	; 0x2f
 8009f92:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	3303      	adds	r3, #3
 8009f98:	2200      	movs	r2, #0
 8009f9a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8009fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	371c      	adds	r7, #28
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bc80      	pop	{r7}
 8009faa:	4770      	bx	lr
 8009fac:	200000e8 	.word	0x200000e8

08009fb0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b082      	sub	sp, #8
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009fba:	2200      	movs	r2, #0
 8009fbc:	6839      	ldr	r1, [r7, #0]
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f7ff ffac 	bl	8009f1c <FATFS_LinkDriverEx>
 8009fc4:	4603      	mov	r3, r0
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3708      	adds	r7, #8
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
	...

08009fd0 <xQueueGenericReset>:
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b086      	sub	sp, #24
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	6039      	str	r1, [r7, #0]
 8009fda:	2301      	movs	r3, #1
 8009fdc:	617b      	str	r3, [r7, #20]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	613b      	str	r3, [r7, #16]
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d10a      	bne.n	8009ffe <xQueueGenericReset+0x2e>
 8009fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fec:	f383 8811 	msr	BASEPRI, r3
 8009ff0:	f3bf 8f6f 	isb	sy
 8009ff4:	f3bf 8f4f 	dsb	sy
 8009ff8:	60fb      	str	r3, [r7, #12]
 8009ffa:	bf00      	nop
 8009ffc:	e7fe      	b.n	8009ffc <xQueueGenericReset+0x2c>
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d05d      	beq.n	800a0c0 <xQueueGenericReset+0xf0>
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d059      	beq.n	800a0c0 <xQueueGenericReset+0xf0>
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a014:	2100      	movs	r1, #0
 800a016:	fba3 2302 	umull	r2, r3, r3, r2
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d000      	beq.n	800a020 <xQueueGenericReset+0x50>
 800a01e:	2101      	movs	r1, #1
 800a020:	460b      	mov	r3, r1
 800a022:	2b00      	cmp	r3, #0
 800a024:	d14c      	bne.n	800a0c0 <xQueueGenericReset+0xf0>
 800a026:	f002 fd6b 	bl	800cb00 <vPortEnterCritical>
 800a02a:	693b      	ldr	r3, [r7, #16]
 800a02c:	681a      	ldr	r2, [r3, #0]
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a032:	6939      	ldr	r1, [r7, #16]
 800a034:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a036:	fb01 f303 	mul.w	r3, r1, r3
 800a03a:	441a      	add	r2, r3
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	609a      	str	r2, [r3, #8]
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	2200      	movs	r2, #0
 800a044:	639a      	str	r2, [r3, #56]	; 0x38
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	605a      	str	r2, [r3, #4]
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a056:	3b01      	subs	r3, #1
 800a058:	6939      	ldr	r1, [r7, #16]
 800a05a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a05c:	fb01 f303 	mul.w	r3, r1, r3
 800a060:	441a      	add	r2, r3
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	60da      	str	r2, [r3, #12]
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	22ff      	movs	r2, #255	; 0xff
 800a06a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	22ff      	movs	r2, #255	; 0xff
 800a072:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d114      	bne.n	800a0a6 <xQueueGenericReset+0xd6>
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	691b      	ldr	r3, [r3, #16]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d01a      	beq.n	800a0ba <xQueueGenericReset+0xea>
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	3310      	adds	r3, #16
 800a088:	4618      	mov	r0, r3
 800a08a:	f001 fc33 	bl	800b8f4 <xTaskRemoveFromEventList>
 800a08e:	4603      	mov	r3, r0
 800a090:	2b00      	cmp	r3, #0
 800a092:	d012      	beq.n	800a0ba <xQueueGenericReset+0xea>
 800a094:	4b15      	ldr	r3, [pc, #84]	; (800a0ec <xQueueGenericReset+0x11c>)
 800a096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a09a:	601a      	str	r2, [r3, #0]
 800a09c:	f3bf 8f4f 	dsb	sy
 800a0a0:	f3bf 8f6f 	isb	sy
 800a0a4:	e009      	b.n	800a0ba <xQueueGenericReset+0xea>
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	3310      	adds	r3, #16
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f002 fba6 	bl	800c7fc <vListInitialise>
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	3324      	adds	r3, #36	; 0x24
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f002 fba1 	bl	800c7fc <vListInitialise>
 800a0ba:	f002 fd51 	bl	800cb60 <vPortExitCritical>
 800a0be:	e001      	b.n	800a0c4 <xQueueGenericReset+0xf4>
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	617b      	str	r3, [r7, #20]
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d10a      	bne.n	800a0e0 <xQueueGenericReset+0x110>
 800a0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ce:	f383 8811 	msr	BASEPRI, r3
 800a0d2:	f3bf 8f6f 	isb	sy
 800a0d6:	f3bf 8f4f 	dsb	sy
 800a0da:	60bb      	str	r3, [r7, #8]
 800a0dc:	bf00      	nop
 800a0de:	e7fe      	b.n	800a0de <xQueueGenericReset+0x10e>
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3718      	adds	r7, #24
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
 800a0ea:	bf00      	nop
 800a0ec:	e000ed04 	.word	0xe000ed04

0800a0f0 <xQueueGenericCreate>:
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b08a      	sub	sp, #40	; 0x28
 800a0f4:	af02      	add	r7, sp, #8
 800a0f6:	60f8      	str	r0, [r7, #12]
 800a0f8:	60b9      	str	r1, [r7, #8]
 800a0fa:	4613      	mov	r3, r2
 800a0fc:	71fb      	strb	r3, [r7, #7]
 800a0fe:	2300      	movs	r3, #0
 800a100:	61fb      	str	r3, [r7, #28]
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d02e      	beq.n	800a166 <xQueueGenericCreate+0x76>
 800a108:	2100      	movs	r1, #0
 800a10a:	68ba      	ldr	r2, [r7, #8]
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	fba3 2302 	umull	r2, r3, r3, r2
 800a112:	2b00      	cmp	r3, #0
 800a114:	d000      	beq.n	800a118 <xQueueGenericCreate+0x28>
 800a116:	2101      	movs	r1, #1
 800a118:	460b      	mov	r3, r1
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d123      	bne.n	800a166 <xQueueGenericCreate+0x76>
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	68ba      	ldr	r2, [r7, #8]
 800a122:	fb02 f303 	mul.w	r3, r2, r3
 800a126:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800a12a:	d81c      	bhi.n	800a166 <xQueueGenericCreate+0x76>
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	68ba      	ldr	r2, [r7, #8]
 800a130:	fb02 f303 	mul.w	r3, r2, r3
 800a134:	61bb      	str	r3, [r7, #24]
 800a136:	69bb      	ldr	r3, [r7, #24]
 800a138:	3350      	adds	r3, #80	; 0x50
 800a13a:	4618      	mov	r0, r3
 800a13c:	f002 fb3a 	bl	800c7b4 <pvPortMalloc>
 800a140:	61f8      	str	r0, [r7, #28]
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d01c      	beq.n	800a182 <xQueueGenericCreate+0x92>
 800a148:	69fb      	ldr	r3, [r7, #28]
 800a14a:	617b      	str	r3, [r7, #20]
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	3350      	adds	r3, #80	; 0x50
 800a150:	617b      	str	r3, [r7, #20]
 800a152:	79fa      	ldrb	r2, [r7, #7]
 800a154:	69fb      	ldr	r3, [r7, #28]
 800a156:	9300      	str	r3, [sp, #0]
 800a158:	4613      	mov	r3, r2
 800a15a:	697a      	ldr	r2, [r7, #20]
 800a15c:	68b9      	ldr	r1, [r7, #8]
 800a15e:	68f8      	ldr	r0, [r7, #12]
 800a160:	f000 f814 	bl	800a18c <prvInitialiseNewQueue>
 800a164:	e00d      	b.n	800a182 <xQueueGenericCreate+0x92>
 800a166:	69fb      	ldr	r3, [r7, #28]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d10a      	bne.n	800a182 <xQueueGenericCreate+0x92>
 800a16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a170:	f383 8811 	msr	BASEPRI, r3
 800a174:	f3bf 8f6f 	isb	sy
 800a178:	f3bf 8f4f 	dsb	sy
 800a17c:	613b      	str	r3, [r7, #16]
 800a17e:	bf00      	nop
 800a180:	e7fe      	b.n	800a180 <xQueueGenericCreate+0x90>
 800a182:	69fb      	ldr	r3, [r7, #28]
 800a184:	4618      	mov	r0, r3
 800a186:	3720      	adds	r7, #32
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <prvInitialiseNewQueue>:
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b084      	sub	sp, #16
 800a190:	af00      	add	r7, sp, #0
 800a192:	60f8      	str	r0, [r7, #12]
 800a194:	60b9      	str	r1, [r7, #8]
 800a196:	607a      	str	r2, [r7, #4]
 800a198:	70fb      	strb	r3, [r7, #3]
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d103      	bne.n	800a1a8 <prvInitialiseNewQueue+0x1c>
 800a1a0:	69bb      	ldr	r3, [r7, #24]
 800a1a2:	69ba      	ldr	r2, [r7, #24]
 800a1a4:	601a      	str	r2, [r3, #0]
 800a1a6:	e002      	b.n	800a1ae <prvInitialiseNewQueue+0x22>
 800a1a8:	69bb      	ldr	r3, [r7, #24]
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	601a      	str	r2, [r3, #0]
 800a1ae:	69bb      	ldr	r3, [r7, #24]
 800a1b0:	68fa      	ldr	r2, [r7, #12]
 800a1b2:	63da      	str	r2, [r3, #60]	; 0x3c
 800a1b4:	69bb      	ldr	r3, [r7, #24]
 800a1b6:	68ba      	ldr	r2, [r7, #8]
 800a1b8:	641a      	str	r2, [r3, #64]	; 0x40
 800a1ba:	2101      	movs	r1, #1
 800a1bc:	69b8      	ldr	r0, [r7, #24]
 800a1be:	f7ff ff07 	bl	8009fd0 <xQueueGenericReset>
 800a1c2:	69bb      	ldr	r3, [r7, #24]
 800a1c4:	78fa      	ldrb	r2, [r7, #3]
 800a1c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800a1ca:	bf00      	nop
 800a1cc:	3710      	adds	r7, #16
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}

0800a1d2 <prvInitialiseMutex>:
 800a1d2:	b580      	push	{r7, lr}
 800a1d4:	b082      	sub	sp, #8
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	6078      	str	r0, [r7, #4]
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d00e      	beq.n	800a1fe <prvInitialiseMutex+0x2c>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	609a      	str	r2, [r3, #8]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	601a      	str	r2, [r3, #0]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	60da      	str	r2, [r3, #12]
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	2100      	movs	r1, #0
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f000 f81d 	bl	800a238 <xQueueGenericSend>
 800a1fe:	bf00      	nop
 800a200:	3708      	adds	r7, #8
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}

0800a206 <xQueueCreateMutex>:
 800a206:	b580      	push	{r7, lr}
 800a208:	b086      	sub	sp, #24
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	4603      	mov	r3, r0
 800a20e:	71fb      	strb	r3, [r7, #7]
 800a210:	2301      	movs	r3, #1
 800a212:	617b      	str	r3, [r7, #20]
 800a214:	2300      	movs	r3, #0
 800a216:	613b      	str	r3, [r7, #16]
 800a218:	79fb      	ldrb	r3, [r7, #7]
 800a21a:	461a      	mov	r2, r3
 800a21c:	6939      	ldr	r1, [r7, #16]
 800a21e:	6978      	ldr	r0, [r7, #20]
 800a220:	f7ff ff66 	bl	800a0f0 <xQueueGenericCreate>
 800a224:	60f8      	str	r0, [r7, #12]
 800a226:	68f8      	ldr	r0, [r7, #12]
 800a228:	f7ff ffd3 	bl	800a1d2 <prvInitialiseMutex>
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	4618      	mov	r0, r3
 800a230:	3718      	adds	r7, #24
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
	...

0800a238 <xQueueGenericSend>:
 800a238:	b580      	push	{r7, lr}
 800a23a:	b08e      	sub	sp, #56	; 0x38
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	60b9      	str	r1, [r7, #8]
 800a242:	607a      	str	r2, [r7, #4]
 800a244:	603b      	str	r3, [r7, #0]
 800a246:	2300      	movs	r3, #0
 800a248:	637b      	str	r3, [r7, #52]	; 0x34
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	633b      	str	r3, [r7, #48]	; 0x30
 800a24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a250:	2b00      	cmp	r3, #0
 800a252:	d10a      	bne.n	800a26a <xQueueGenericSend+0x32>
 800a254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a258:	f383 8811 	msr	BASEPRI, r3
 800a25c:	f3bf 8f6f 	isb	sy
 800a260:	f3bf 8f4f 	dsb	sy
 800a264:	62bb      	str	r3, [r7, #40]	; 0x28
 800a266:	bf00      	nop
 800a268:	e7fe      	b.n	800a268 <xQueueGenericSend+0x30>
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d103      	bne.n	800a278 <xQueueGenericSend+0x40>
 800a270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a274:	2b00      	cmp	r3, #0
 800a276:	d101      	bne.n	800a27c <xQueueGenericSend+0x44>
 800a278:	2301      	movs	r3, #1
 800a27a:	e000      	b.n	800a27e <xQueueGenericSend+0x46>
 800a27c:	2300      	movs	r3, #0
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d10a      	bne.n	800a298 <xQueueGenericSend+0x60>
 800a282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a286:	f383 8811 	msr	BASEPRI, r3
 800a28a:	f3bf 8f6f 	isb	sy
 800a28e:	f3bf 8f4f 	dsb	sy
 800a292:	627b      	str	r3, [r7, #36]	; 0x24
 800a294:	bf00      	nop
 800a296:	e7fe      	b.n	800a296 <xQueueGenericSend+0x5e>
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	2b02      	cmp	r3, #2
 800a29c:	d103      	bne.n	800a2a6 <xQueueGenericSend+0x6e>
 800a29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	d101      	bne.n	800a2aa <xQueueGenericSend+0x72>
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	e000      	b.n	800a2ac <xQueueGenericSend+0x74>
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d10a      	bne.n	800a2c6 <xQueueGenericSend+0x8e>
 800a2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b4:	f383 8811 	msr	BASEPRI, r3
 800a2b8:	f3bf 8f6f 	isb	sy
 800a2bc:	f3bf 8f4f 	dsb	sy
 800a2c0:	623b      	str	r3, [r7, #32]
 800a2c2:	bf00      	nop
 800a2c4:	e7fe      	b.n	800a2c4 <xQueueGenericSend+0x8c>
 800a2c6:	f001 fd83 	bl	800bdd0 <xTaskGetSchedulerState>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d102      	bne.n	800a2d6 <xQueueGenericSend+0x9e>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d101      	bne.n	800a2da <xQueueGenericSend+0xa2>
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	e000      	b.n	800a2dc <xQueueGenericSend+0xa4>
 800a2da:	2300      	movs	r3, #0
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d10a      	bne.n	800a2f6 <xQueueGenericSend+0xbe>
 800a2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e4:	f383 8811 	msr	BASEPRI, r3
 800a2e8:	f3bf 8f6f 	isb	sy
 800a2ec:	f3bf 8f4f 	dsb	sy
 800a2f0:	61fb      	str	r3, [r7, #28]
 800a2f2:	bf00      	nop
 800a2f4:	e7fe      	b.n	800a2f4 <xQueueGenericSend+0xbc>
 800a2f6:	f002 fc03 	bl	800cb00 <vPortEnterCritical>
 800a2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a302:	429a      	cmp	r2, r3
 800a304:	d302      	bcc.n	800a30c <xQueueGenericSend+0xd4>
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	2b02      	cmp	r3, #2
 800a30a:	d129      	bne.n	800a360 <xQueueGenericSend+0x128>
 800a30c:	683a      	ldr	r2, [r7, #0]
 800a30e:	68b9      	ldr	r1, [r7, #8]
 800a310:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a312:	f000 fbda 	bl	800aaca <prvCopyDataToQueue>
 800a316:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d010      	beq.n	800a342 <xQueueGenericSend+0x10a>
 800a320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a322:	3324      	adds	r3, #36	; 0x24
 800a324:	4618      	mov	r0, r3
 800a326:	f001 fae5 	bl	800b8f4 <xTaskRemoveFromEventList>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d013      	beq.n	800a358 <xQueueGenericSend+0x120>
 800a330:	4b3f      	ldr	r3, [pc, #252]	; (800a430 <xQueueGenericSend+0x1f8>)
 800a332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a336:	601a      	str	r2, [r3, #0]
 800a338:	f3bf 8f4f 	dsb	sy
 800a33c:	f3bf 8f6f 	isb	sy
 800a340:	e00a      	b.n	800a358 <xQueueGenericSend+0x120>
 800a342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a344:	2b00      	cmp	r3, #0
 800a346:	d007      	beq.n	800a358 <xQueueGenericSend+0x120>
 800a348:	4b39      	ldr	r3, [pc, #228]	; (800a430 <xQueueGenericSend+0x1f8>)
 800a34a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a34e:	601a      	str	r2, [r3, #0]
 800a350:	f3bf 8f4f 	dsb	sy
 800a354:	f3bf 8f6f 	isb	sy
 800a358:	f002 fc02 	bl	800cb60 <vPortExitCritical>
 800a35c:	2301      	movs	r3, #1
 800a35e:	e063      	b.n	800a428 <xQueueGenericSend+0x1f0>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d103      	bne.n	800a36e <xQueueGenericSend+0x136>
 800a366:	f002 fbfb 	bl	800cb60 <vPortExitCritical>
 800a36a:	2300      	movs	r3, #0
 800a36c:	e05c      	b.n	800a428 <xQueueGenericSend+0x1f0>
 800a36e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a370:	2b00      	cmp	r3, #0
 800a372:	d106      	bne.n	800a382 <xQueueGenericSend+0x14a>
 800a374:	f107 0314 	add.w	r3, r7, #20
 800a378:	4618      	mov	r0, r3
 800a37a:	f001 fb93 	bl	800baa4 <vTaskInternalSetTimeOutState>
 800a37e:	2301      	movs	r3, #1
 800a380:	637b      	str	r3, [r7, #52]	; 0x34
 800a382:	f002 fbed 	bl	800cb60 <vPortExitCritical>
 800a386:	f000 ff25 	bl	800b1d4 <vTaskSuspendAll>
 800a38a:	f002 fbb9 	bl	800cb00 <vPortEnterCritical>
 800a38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a390:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a394:	b25b      	sxtb	r3, r3
 800a396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a39a:	d103      	bne.n	800a3a4 <xQueueGenericSend+0x16c>
 800a39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a39e:	2200      	movs	r2, #0
 800a3a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3aa:	b25b      	sxtb	r3, r3
 800a3ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3b0:	d103      	bne.n	800a3ba <xQueueGenericSend+0x182>
 800a3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3ba:	f002 fbd1 	bl	800cb60 <vPortExitCritical>
 800a3be:	1d3a      	adds	r2, r7, #4
 800a3c0:	f107 0314 	add.w	r3, r7, #20
 800a3c4:	4611      	mov	r1, r2
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f001 fb82 	bl	800bad0 <xTaskCheckForTimeOut>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d124      	bne.n	800a41c <xQueueGenericSend+0x1e4>
 800a3d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3d4:	f000 fc71 	bl	800acba <prvIsQueueFull>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d018      	beq.n	800a410 <xQueueGenericSend+0x1d8>
 800a3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e0:	3310      	adds	r3, #16
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	4611      	mov	r1, r2
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f001 fa1a 	bl	800b820 <vTaskPlaceOnEventList>
 800a3ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3ee:	f000 fbfc 	bl	800abea <prvUnlockQueue>
 800a3f2:	f000 ff33 	bl	800b25c <xTaskResumeAll>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	f47f af7c 	bne.w	800a2f6 <xQueueGenericSend+0xbe>
 800a3fe:	4b0c      	ldr	r3, [pc, #48]	; (800a430 <xQueueGenericSend+0x1f8>)
 800a400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a404:	601a      	str	r2, [r3, #0]
 800a406:	f3bf 8f4f 	dsb	sy
 800a40a:	f3bf 8f6f 	isb	sy
 800a40e:	e772      	b.n	800a2f6 <xQueueGenericSend+0xbe>
 800a410:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a412:	f000 fbea 	bl	800abea <prvUnlockQueue>
 800a416:	f000 ff21 	bl	800b25c <xTaskResumeAll>
 800a41a:	e76c      	b.n	800a2f6 <xQueueGenericSend+0xbe>
 800a41c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a41e:	f000 fbe4 	bl	800abea <prvUnlockQueue>
 800a422:	f000 ff1b 	bl	800b25c <xTaskResumeAll>
 800a426:	2300      	movs	r3, #0
 800a428:	4618      	mov	r0, r3
 800a42a:	3738      	adds	r7, #56	; 0x38
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}
 800a430:	e000ed04 	.word	0xe000ed04

0800a434 <xQueueGenericSendFromISR>:
 800a434:	b580      	push	{r7, lr}
 800a436:	b092      	sub	sp, #72	; 0x48
 800a438:	af00      	add	r7, sp, #0
 800a43a:	60f8      	str	r0, [r7, #12]
 800a43c:	60b9      	str	r1, [r7, #8]
 800a43e:	607a      	str	r2, [r7, #4]
 800a440:	603b      	str	r3, [r7, #0]
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	643b      	str	r3, [r7, #64]	; 0x40
 800a446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d10a      	bne.n	800a462 <xQueueGenericSendFromISR+0x2e>
 800a44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a450:	f383 8811 	msr	BASEPRI, r3
 800a454:	f3bf 8f6f 	isb	sy
 800a458:	f3bf 8f4f 	dsb	sy
 800a45c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a45e:	bf00      	nop
 800a460:	e7fe      	b.n	800a460 <xQueueGenericSendFromISR+0x2c>
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d103      	bne.n	800a470 <xQueueGenericSendFromISR+0x3c>
 800a468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a46a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d101      	bne.n	800a474 <xQueueGenericSendFromISR+0x40>
 800a470:	2301      	movs	r3, #1
 800a472:	e000      	b.n	800a476 <xQueueGenericSendFromISR+0x42>
 800a474:	2300      	movs	r3, #0
 800a476:	2b00      	cmp	r3, #0
 800a478:	d10a      	bne.n	800a490 <xQueueGenericSendFromISR+0x5c>
 800a47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a47e:	f383 8811 	msr	BASEPRI, r3
 800a482:	f3bf 8f6f 	isb	sy
 800a486:	f3bf 8f4f 	dsb	sy
 800a48a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a48c:	bf00      	nop
 800a48e:	e7fe      	b.n	800a48e <xQueueGenericSendFromISR+0x5a>
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	2b02      	cmp	r3, #2
 800a494:	d103      	bne.n	800a49e <xQueueGenericSendFromISR+0x6a>
 800a496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	d101      	bne.n	800a4a2 <xQueueGenericSendFromISR+0x6e>
 800a49e:	2301      	movs	r3, #1
 800a4a0:	e000      	b.n	800a4a4 <xQueueGenericSendFromISR+0x70>
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d10a      	bne.n	800a4be <xQueueGenericSendFromISR+0x8a>
 800a4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ac:	f383 8811 	msr	BASEPRI, r3
 800a4b0:	f3bf 8f6f 	isb	sy
 800a4b4:	f3bf 8f4f 	dsb	sy
 800a4b8:	627b      	str	r3, [r7, #36]	; 0x24
 800a4ba:	bf00      	nop
 800a4bc:	e7fe      	b.n	800a4bc <xQueueGenericSendFromISR+0x88>
 800a4be:	f002 fcc3 	bl	800ce48 <vPortValidateInterruptPriority>
 800a4c2:	f3ef 8211 	mrs	r2, BASEPRI
 800a4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ca:	f383 8811 	msr	BASEPRI, r3
 800a4ce:	f3bf 8f6f 	isb	sy
 800a4d2:	f3bf 8f4f 	dsb	sy
 800a4d6:	623a      	str	r2, [r7, #32]
 800a4d8:	61fb      	str	r3, [r7, #28]
 800a4da:	6a3b      	ldr	r3, [r7, #32]
 800a4dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d302      	bcc.n	800a4f0 <xQueueGenericSendFromISR+0xbc>
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	2b02      	cmp	r3, #2
 800a4ee:	d146      	bne.n	800a57e <xQueueGenericSendFromISR+0x14a>
 800a4f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4f6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4fe:	637b      	str	r3, [r7, #52]	; 0x34
 800a500:	683a      	ldr	r2, [r7, #0]
 800a502:	68b9      	ldr	r1, [r7, #8]
 800a504:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a506:	f000 fae0 	bl	800aaca <prvCopyDataToQueue>
 800a50a:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 800a50e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a512:	d112      	bne.n	800a53a <xQueueGenericSendFromISR+0x106>
 800a514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d02d      	beq.n	800a578 <xQueueGenericSendFromISR+0x144>
 800a51c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a51e:	3324      	adds	r3, #36	; 0x24
 800a520:	4618      	mov	r0, r3
 800a522:	f001 f9e7 	bl	800b8f4 <xTaskRemoveFromEventList>
 800a526:	4603      	mov	r3, r0
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d025      	beq.n	800a578 <xQueueGenericSendFromISR+0x144>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d022      	beq.n	800a578 <xQueueGenericSendFromISR+0x144>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2201      	movs	r2, #1
 800a536:	601a      	str	r2, [r3, #0]
 800a538:	e01e      	b.n	800a578 <xQueueGenericSendFromISR+0x144>
 800a53a:	f000 ff99 	bl	800b470 <uxTaskGetNumberOfTasks>
 800a53e:	6338      	str	r0, [r7, #48]	; 0x30
 800a540:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 800a544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a546:	429a      	cmp	r2, r3
 800a548:	d916      	bls.n	800a578 <xQueueGenericSendFromISR+0x144>
 800a54a:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 800a54e:	2b7f      	cmp	r3, #127	; 0x7f
 800a550:	d10a      	bne.n	800a568 <xQueueGenericSendFromISR+0x134>
 800a552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a556:	f383 8811 	msr	BASEPRI, r3
 800a55a:	f3bf 8f6f 	isb	sy
 800a55e:	f3bf 8f4f 	dsb	sy
 800a562:	61bb      	str	r3, [r7, #24]
 800a564:	bf00      	nop
 800a566:	e7fe      	b.n	800a566 <xQueueGenericSendFromISR+0x132>
 800a568:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a56c:	3301      	adds	r3, #1
 800a56e:	b2db      	uxtb	r3, r3
 800a570:	b25a      	sxtb	r2, r3
 800a572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a578:	2301      	movs	r3, #1
 800a57a:	647b      	str	r3, [r7, #68]	; 0x44
 800a57c:	e001      	b.n	800a582 <xQueueGenericSendFromISR+0x14e>
 800a57e:	2300      	movs	r3, #0
 800a580:	647b      	str	r3, [r7, #68]	; 0x44
 800a582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a584:	617b      	str	r3, [r7, #20]
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	f383 8811 	msr	BASEPRI, r3
 800a58c:	bf00      	nop
 800a58e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a590:	4618      	mov	r0, r3
 800a592:	3748      	adds	r7, #72	; 0x48
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}

0800a598 <xQueueGiveFromISR>:
 800a598:	b580      	push	{r7, lr}
 800a59a:	b090      	sub	sp, #64	; 0x40
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	6039      	str	r1, [r7, #0]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	63bb      	str	r3, [r7, #56]	; 0x38
 800a5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d10a      	bne.n	800a5c2 <xQueueGiveFromISR+0x2a>
 800a5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b0:	f383 8811 	msr	BASEPRI, r3
 800a5b4:	f3bf 8f6f 	isb	sy
 800a5b8:	f3bf 8f4f 	dsb	sy
 800a5bc:	627b      	str	r3, [r7, #36]	; 0x24
 800a5be:	bf00      	nop
 800a5c0:	e7fe      	b.n	800a5c0 <xQueueGiveFromISR+0x28>
 800a5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00a      	beq.n	800a5e0 <xQueueGiveFromISR+0x48>
 800a5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ce:	f383 8811 	msr	BASEPRI, r3
 800a5d2:	f3bf 8f6f 	isb	sy
 800a5d6:	f3bf 8f4f 	dsb	sy
 800a5da:	623b      	str	r3, [r7, #32]
 800a5dc:	bf00      	nop
 800a5de:	e7fe      	b.n	800a5de <xQueueGiveFromISR+0x46>
 800a5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d103      	bne.n	800a5f0 <xQueueGiveFromISR+0x58>
 800a5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ea:	689b      	ldr	r3, [r3, #8]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d101      	bne.n	800a5f4 <xQueueGiveFromISR+0x5c>
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	e000      	b.n	800a5f6 <xQueueGiveFromISR+0x5e>
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d10a      	bne.n	800a610 <xQueueGiveFromISR+0x78>
 800a5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5fe:	f383 8811 	msr	BASEPRI, r3
 800a602:	f3bf 8f6f 	isb	sy
 800a606:	f3bf 8f4f 	dsb	sy
 800a60a:	61fb      	str	r3, [r7, #28]
 800a60c:	bf00      	nop
 800a60e:	e7fe      	b.n	800a60e <xQueueGiveFromISR+0x76>
 800a610:	f002 fc1a 	bl	800ce48 <vPortValidateInterruptPriority>
 800a614:	f3ef 8211 	mrs	r2, BASEPRI
 800a618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a61c:	f383 8811 	msr	BASEPRI, r3
 800a620:	f3bf 8f6f 	isb	sy
 800a624:	f3bf 8f4f 	dsb	sy
 800a628:	61ba      	str	r2, [r7, #24]
 800a62a:	617b      	str	r3, [r7, #20]
 800a62c:	69bb      	ldr	r3, [r7, #24]
 800a62e:	637b      	str	r3, [r7, #52]	; 0x34
 800a630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a634:	633b      	str	r3, [r7, #48]	; 0x30
 800a636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a63a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d242      	bcs.n	800a6c6 <xQueueGiveFromISR+0x12e>
 800a640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a642:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a646:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a64c:	1c5a      	adds	r2, r3, #1
 800a64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a650:	639a      	str	r2, [r3, #56]	; 0x38
 800a652:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a65a:	d112      	bne.n	800a682 <xQueueGiveFromISR+0xea>
 800a65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a660:	2b00      	cmp	r3, #0
 800a662:	d02d      	beq.n	800a6c0 <xQueueGiveFromISR+0x128>
 800a664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a666:	3324      	adds	r3, #36	; 0x24
 800a668:	4618      	mov	r0, r3
 800a66a:	f001 f943 	bl	800b8f4 <xTaskRemoveFromEventList>
 800a66e:	4603      	mov	r3, r0
 800a670:	2b00      	cmp	r3, #0
 800a672:	d025      	beq.n	800a6c0 <xQueueGiveFromISR+0x128>
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d022      	beq.n	800a6c0 <xQueueGiveFromISR+0x128>
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	2201      	movs	r2, #1
 800a67e:	601a      	str	r2, [r3, #0]
 800a680:	e01e      	b.n	800a6c0 <xQueueGiveFromISR+0x128>
 800a682:	f000 fef5 	bl	800b470 <uxTaskGetNumberOfTasks>
 800a686:	62b8      	str	r0, [r7, #40]	; 0x28
 800a688:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a68c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a68e:	429a      	cmp	r2, r3
 800a690:	d916      	bls.n	800a6c0 <xQueueGiveFromISR+0x128>
 800a692:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a696:	2b7f      	cmp	r3, #127	; 0x7f
 800a698:	d10a      	bne.n	800a6b0 <xQueueGiveFromISR+0x118>
 800a69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a69e:	f383 8811 	msr	BASEPRI, r3
 800a6a2:	f3bf 8f6f 	isb	sy
 800a6a6:	f3bf 8f4f 	dsb	sy
 800a6aa:	613b      	str	r3, [r7, #16]
 800a6ac:	bf00      	nop
 800a6ae:	e7fe      	b.n	800a6ae <xQueueGiveFromISR+0x116>
 800a6b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a6b4:	3301      	adds	r3, #1
 800a6b6:	b2db      	uxtb	r3, r3
 800a6b8:	b25a      	sxtb	r2, r3
 800a6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6c4:	e001      	b.n	800a6ca <xQueueGiveFromISR+0x132>
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6cc:	60fb      	str	r3, [r7, #12]
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f383 8811 	msr	BASEPRI, r3
 800a6d4:	bf00      	nop
 800a6d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3740      	adds	r7, #64	; 0x40
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}

0800a6e0 <xQueueReceive>:
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b08c      	sub	sp, #48	; 0x30
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	60f8      	str	r0, [r7, #12]
 800a6e8:	60b9      	str	r1, [r7, #8]
 800a6ea:	607a      	str	r2, [r7, #4]
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d10a      	bne.n	800a710 <xQueueReceive+0x30>
 800a6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6fe:	f383 8811 	msr	BASEPRI, r3
 800a702:	f3bf 8f6f 	isb	sy
 800a706:	f3bf 8f4f 	dsb	sy
 800a70a:	623b      	str	r3, [r7, #32]
 800a70c:	bf00      	nop
 800a70e:	e7fe      	b.n	800a70e <xQueueReceive+0x2e>
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d103      	bne.n	800a71e <xQueueReceive+0x3e>
 800a716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d101      	bne.n	800a722 <xQueueReceive+0x42>
 800a71e:	2301      	movs	r3, #1
 800a720:	e000      	b.n	800a724 <xQueueReceive+0x44>
 800a722:	2300      	movs	r3, #0
 800a724:	2b00      	cmp	r3, #0
 800a726:	d10a      	bne.n	800a73e <xQueueReceive+0x5e>
 800a728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a72c:	f383 8811 	msr	BASEPRI, r3
 800a730:	f3bf 8f6f 	isb	sy
 800a734:	f3bf 8f4f 	dsb	sy
 800a738:	61fb      	str	r3, [r7, #28]
 800a73a:	bf00      	nop
 800a73c:	e7fe      	b.n	800a73c <xQueueReceive+0x5c>
 800a73e:	f001 fb47 	bl	800bdd0 <xTaskGetSchedulerState>
 800a742:	4603      	mov	r3, r0
 800a744:	2b00      	cmp	r3, #0
 800a746:	d102      	bne.n	800a74e <xQueueReceive+0x6e>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d101      	bne.n	800a752 <xQueueReceive+0x72>
 800a74e:	2301      	movs	r3, #1
 800a750:	e000      	b.n	800a754 <xQueueReceive+0x74>
 800a752:	2300      	movs	r3, #0
 800a754:	2b00      	cmp	r3, #0
 800a756:	d10a      	bne.n	800a76e <xQueueReceive+0x8e>
 800a758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a75c:	f383 8811 	msr	BASEPRI, r3
 800a760:	f3bf 8f6f 	isb	sy
 800a764:	f3bf 8f4f 	dsb	sy
 800a768:	61bb      	str	r3, [r7, #24]
 800a76a:	bf00      	nop
 800a76c:	e7fe      	b.n	800a76c <xQueueReceive+0x8c>
 800a76e:	f002 f9c7 	bl	800cb00 <vPortEnterCritical>
 800a772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a776:	627b      	str	r3, [r7, #36]	; 0x24
 800a778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d01f      	beq.n	800a7be <xQueueReceive+0xde>
 800a77e:	68b9      	ldr	r1, [r7, #8]
 800a780:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a782:	f000 fa0c 	bl	800ab9e <prvCopyDataFromQueue>
 800a786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a788:	1e5a      	subs	r2, r3, #1
 800a78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a78c:	639a      	str	r2, [r3, #56]	; 0x38
 800a78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a790:	691b      	ldr	r3, [r3, #16]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d00f      	beq.n	800a7b6 <xQueueReceive+0xd6>
 800a796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a798:	3310      	adds	r3, #16
 800a79a:	4618      	mov	r0, r3
 800a79c:	f001 f8aa 	bl	800b8f4 <xTaskRemoveFromEventList>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d007      	beq.n	800a7b6 <xQueueReceive+0xd6>
 800a7a6:	4b3d      	ldr	r3, [pc, #244]	; (800a89c <xQueueReceive+0x1bc>)
 800a7a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7ac:	601a      	str	r2, [r3, #0]
 800a7ae:	f3bf 8f4f 	dsb	sy
 800a7b2:	f3bf 8f6f 	isb	sy
 800a7b6:	f002 f9d3 	bl	800cb60 <vPortExitCritical>
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	e069      	b.n	800a892 <xQueueReceive+0x1b2>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d103      	bne.n	800a7cc <xQueueReceive+0xec>
 800a7c4:	f002 f9cc 	bl	800cb60 <vPortExitCritical>
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	e062      	b.n	800a892 <xQueueReceive+0x1b2>
 800a7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d106      	bne.n	800a7e0 <xQueueReceive+0x100>
 800a7d2:	f107 0310 	add.w	r3, r7, #16
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f001 f964 	bl	800baa4 <vTaskInternalSetTimeOutState>
 800a7dc:	2301      	movs	r3, #1
 800a7de:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7e0:	f002 f9be 	bl	800cb60 <vPortExitCritical>
 800a7e4:	f000 fcf6 	bl	800b1d4 <vTaskSuspendAll>
 800a7e8:	f002 f98a 	bl	800cb00 <vPortEnterCritical>
 800a7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a7f2:	b25b      	sxtb	r3, r3
 800a7f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7f8:	d103      	bne.n	800a802 <xQueueReceive+0x122>
 800a7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a804:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a808:	b25b      	sxtb	r3, r3
 800a80a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a80e:	d103      	bne.n	800a818 <xQueueReceive+0x138>
 800a810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a812:	2200      	movs	r2, #0
 800a814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a818:	f002 f9a2 	bl	800cb60 <vPortExitCritical>
 800a81c:	1d3a      	adds	r2, r7, #4
 800a81e:	f107 0310 	add.w	r3, r7, #16
 800a822:	4611      	mov	r1, r2
 800a824:	4618      	mov	r0, r3
 800a826:	f001 f953 	bl	800bad0 <xTaskCheckForTimeOut>
 800a82a:	4603      	mov	r3, r0
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d123      	bne.n	800a878 <xQueueReceive+0x198>
 800a830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a832:	f000 fa2c 	bl	800ac8e <prvIsQueueEmpty>
 800a836:	4603      	mov	r3, r0
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d017      	beq.n	800a86c <xQueueReceive+0x18c>
 800a83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a83e:	3324      	adds	r3, #36	; 0x24
 800a840:	687a      	ldr	r2, [r7, #4]
 800a842:	4611      	mov	r1, r2
 800a844:	4618      	mov	r0, r3
 800a846:	f000 ffeb 	bl	800b820 <vTaskPlaceOnEventList>
 800a84a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a84c:	f000 f9cd 	bl	800abea <prvUnlockQueue>
 800a850:	f000 fd04 	bl	800b25c <xTaskResumeAll>
 800a854:	4603      	mov	r3, r0
 800a856:	2b00      	cmp	r3, #0
 800a858:	d189      	bne.n	800a76e <xQueueReceive+0x8e>
 800a85a:	4b10      	ldr	r3, [pc, #64]	; (800a89c <xQueueReceive+0x1bc>)
 800a85c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a860:	601a      	str	r2, [r3, #0]
 800a862:	f3bf 8f4f 	dsb	sy
 800a866:	f3bf 8f6f 	isb	sy
 800a86a:	e780      	b.n	800a76e <xQueueReceive+0x8e>
 800a86c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a86e:	f000 f9bc 	bl	800abea <prvUnlockQueue>
 800a872:	f000 fcf3 	bl	800b25c <xTaskResumeAll>
 800a876:	e77a      	b.n	800a76e <xQueueReceive+0x8e>
 800a878:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a87a:	f000 f9b6 	bl	800abea <prvUnlockQueue>
 800a87e:	f000 fced 	bl	800b25c <xTaskResumeAll>
 800a882:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a884:	f000 fa03 	bl	800ac8e <prvIsQueueEmpty>
 800a888:	4603      	mov	r3, r0
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	f43f af6f 	beq.w	800a76e <xQueueReceive+0x8e>
 800a890:	2300      	movs	r3, #0
 800a892:	4618      	mov	r0, r3
 800a894:	3730      	adds	r7, #48	; 0x30
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}
 800a89a:	bf00      	nop
 800a89c:	e000ed04 	.word	0xe000ed04

0800a8a0 <xQueueSemaphoreTake>:
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b08c      	sub	sp, #48	; 0x30
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	6039      	str	r1, [r7, #0]
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	627b      	str	r3, [r7, #36]	; 0x24
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d10a      	bne.n	800a8d2 <xQueueSemaphoreTake+0x32>
 800a8bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c0:	f383 8811 	msr	BASEPRI, r3
 800a8c4:	f3bf 8f6f 	isb	sy
 800a8c8:	f3bf 8f4f 	dsb	sy
 800a8cc:	61bb      	str	r3, [r7, #24]
 800a8ce:	bf00      	nop
 800a8d0:	e7fe      	b.n	800a8d0 <xQueueSemaphoreTake+0x30>
 800a8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d00a      	beq.n	800a8f0 <xQueueSemaphoreTake+0x50>
 800a8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8de:	f383 8811 	msr	BASEPRI, r3
 800a8e2:	f3bf 8f6f 	isb	sy
 800a8e6:	f3bf 8f4f 	dsb	sy
 800a8ea:	617b      	str	r3, [r7, #20]
 800a8ec:	bf00      	nop
 800a8ee:	e7fe      	b.n	800a8ee <xQueueSemaphoreTake+0x4e>
 800a8f0:	f001 fa6e 	bl	800bdd0 <xTaskGetSchedulerState>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d102      	bne.n	800a900 <xQueueSemaphoreTake+0x60>
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d101      	bne.n	800a904 <xQueueSemaphoreTake+0x64>
 800a900:	2301      	movs	r3, #1
 800a902:	e000      	b.n	800a906 <xQueueSemaphoreTake+0x66>
 800a904:	2300      	movs	r3, #0
 800a906:	2b00      	cmp	r3, #0
 800a908:	d10a      	bne.n	800a920 <xQueueSemaphoreTake+0x80>
 800a90a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a90e:	f383 8811 	msr	BASEPRI, r3
 800a912:	f3bf 8f6f 	isb	sy
 800a916:	f3bf 8f4f 	dsb	sy
 800a91a:	613b      	str	r3, [r7, #16]
 800a91c:	bf00      	nop
 800a91e:	e7fe      	b.n	800a91e <xQueueSemaphoreTake+0x7e>
 800a920:	f002 f8ee 	bl	800cb00 <vPortEnterCritical>
 800a924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a928:	623b      	str	r3, [r7, #32]
 800a92a:	6a3b      	ldr	r3, [r7, #32]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d024      	beq.n	800a97a <xQueueSemaphoreTake+0xda>
 800a930:	6a3b      	ldr	r3, [r7, #32]
 800a932:	1e5a      	subs	r2, r3, #1
 800a934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a936:	639a      	str	r2, [r3, #56]	; 0x38
 800a938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d104      	bne.n	800a94a <xQueueSemaphoreTake+0xaa>
 800a940:	f001 fc34 	bl	800c1ac <pvTaskIncrementMutexHeldCount>
 800a944:	4602      	mov	r2, r0
 800a946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a948:	609a      	str	r2, [r3, #8]
 800a94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94c:	691b      	ldr	r3, [r3, #16]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d00f      	beq.n	800a972 <xQueueSemaphoreTake+0xd2>
 800a952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a954:	3310      	adds	r3, #16
 800a956:	4618      	mov	r0, r3
 800a958:	f000 ffcc 	bl	800b8f4 <xTaskRemoveFromEventList>
 800a95c:	4603      	mov	r3, r0
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d007      	beq.n	800a972 <xQueueSemaphoreTake+0xd2>
 800a962:	4b4d      	ldr	r3, [pc, #308]	; (800aa98 <xQueueSemaphoreTake+0x1f8>)
 800a964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a968:	601a      	str	r2, [r3, #0]
 800a96a:	f3bf 8f4f 	dsb	sy
 800a96e:	f3bf 8f6f 	isb	sy
 800a972:	f002 f8f5 	bl	800cb60 <vPortExitCritical>
 800a976:	2301      	movs	r3, #1
 800a978:	e089      	b.n	800aa8e <xQueueSemaphoreTake+0x1ee>
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d103      	bne.n	800a988 <xQueueSemaphoreTake+0xe8>
 800a980:	f002 f8ee 	bl	800cb60 <vPortExitCritical>
 800a984:	2300      	movs	r3, #0
 800a986:	e082      	b.n	800aa8e <xQueueSemaphoreTake+0x1ee>
 800a988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d106      	bne.n	800a99c <xQueueSemaphoreTake+0xfc>
 800a98e:	f107 0308 	add.w	r3, r7, #8
 800a992:	4618      	mov	r0, r3
 800a994:	f001 f886 	bl	800baa4 <vTaskInternalSetTimeOutState>
 800a998:	2301      	movs	r3, #1
 800a99a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a99c:	f002 f8e0 	bl	800cb60 <vPortExitCritical>
 800a9a0:	f000 fc18 	bl	800b1d4 <vTaskSuspendAll>
 800a9a4:	f002 f8ac 	bl	800cb00 <vPortEnterCritical>
 800a9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9ae:	b25b      	sxtb	r3, r3
 800a9b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9b4:	d103      	bne.n	800a9be <xQueueSemaphoreTake+0x11e>
 800a9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9c4:	b25b      	sxtb	r3, r3
 800a9c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9ca:	d103      	bne.n	800a9d4 <xQueueSemaphoreTake+0x134>
 800a9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9d4:	f002 f8c4 	bl	800cb60 <vPortExitCritical>
 800a9d8:	463a      	mov	r2, r7
 800a9da:	f107 0308 	add.w	r3, r7, #8
 800a9de:	4611      	mov	r1, r2
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f001 f875 	bl	800bad0 <xTaskCheckForTimeOut>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d132      	bne.n	800aa52 <xQueueSemaphoreTake+0x1b2>
 800a9ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a9ee:	f000 f94e 	bl	800ac8e <prvIsQueueEmpty>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d026      	beq.n	800aa46 <xQueueSemaphoreTake+0x1a6>
 800a9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d109      	bne.n	800aa14 <xQueueSemaphoreTake+0x174>
 800aa00:	f002 f87e 	bl	800cb00 <vPortEnterCritical>
 800aa04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa06:	689b      	ldr	r3, [r3, #8]
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f001 f9ff 	bl	800be0c <xTaskPriorityInherit>
 800aa0e:	62b8      	str	r0, [r7, #40]	; 0x28
 800aa10:	f002 f8a6 	bl	800cb60 <vPortExitCritical>
 800aa14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa16:	3324      	adds	r3, #36	; 0x24
 800aa18:	683a      	ldr	r2, [r7, #0]
 800aa1a:	4611      	mov	r1, r2
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f000 feff 	bl	800b820 <vTaskPlaceOnEventList>
 800aa22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa24:	f000 f8e1 	bl	800abea <prvUnlockQueue>
 800aa28:	f000 fc18 	bl	800b25c <xTaskResumeAll>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	f47f af76 	bne.w	800a920 <xQueueSemaphoreTake+0x80>
 800aa34:	4b18      	ldr	r3, [pc, #96]	; (800aa98 <xQueueSemaphoreTake+0x1f8>)
 800aa36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa3a:	601a      	str	r2, [r3, #0]
 800aa3c:	f3bf 8f4f 	dsb	sy
 800aa40:	f3bf 8f6f 	isb	sy
 800aa44:	e76c      	b.n	800a920 <xQueueSemaphoreTake+0x80>
 800aa46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa48:	f000 f8cf 	bl	800abea <prvUnlockQueue>
 800aa4c:	f000 fc06 	bl	800b25c <xTaskResumeAll>
 800aa50:	e766      	b.n	800a920 <xQueueSemaphoreTake+0x80>
 800aa52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa54:	f000 f8c9 	bl	800abea <prvUnlockQueue>
 800aa58:	f000 fc00 	bl	800b25c <xTaskResumeAll>
 800aa5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa5e:	f000 f916 	bl	800ac8e <prvIsQueueEmpty>
 800aa62:	4603      	mov	r3, r0
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	f43f af5b 	beq.w	800a920 <xQueueSemaphoreTake+0x80>
 800aa6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d00d      	beq.n	800aa8c <xQueueSemaphoreTake+0x1ec>
 800aa70:	f002 f846 	bl	800cb00 <vPortEnterCritical>
 800aa74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa76:	f000 f811 	bl	800aa9c <prvGetDisinheritPriorityAfterTimeout>
 800aa7a:	61f8      	str	r0, [r7, #28]
 800aa7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa7e:	689b      	ldr	r3, [r3, #8]
 800aa80:	69f9      	ldr	r1, [r7, #28]
 800aa82:	4618      	mov	r0, r3
 800aa84:	f001 fae8 	bl	800c058 <vTaskPriorityDisinheritAfterTimeout>
 800aa88:	f002 f86a 	bl	800cb60 <vPortExitCritical>
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3730      	adds	r7, #48	; 0x30
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
 800aa96:	bf00      	nop
 800aa98:	e000ed04 	.word	0xe000ed04

0800aa9c <prvGetDisinheritPriorityAfterTimeout>:
 800aa9c:	b480      	push	{r7}
 800aa9e:	b085      	sub	sp, #20
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d006      	beq.n	800aaba <prvGetDisinheritPriorityAfterTimeout+0x1e>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f1c3 0305 	rsb	r3, r3, #5
 800aab6:	60fb      	str	r3, [r7, #12]
 800aab8:	e001      	b.n	800aabe <prvGetDisinheritPriorityAfterTimeout+0x22>
 800aaba:	2300      	movs	r3, #0
 800aabc:	60fb      	str	r3, [r7, #12]
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	4618      	mov	r0, r3
 800aac2:	3714      	adds	r7, #20
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bc80      	pop	{r7}
 800aac8:	4770      	bx	lr

0800aaca <prvCopyDataToQueue>:
 800aaca:	b580      	push	{r7, lr}
 800aacc:	b086      	sub	sp, #24
 800aace:	af00      	add	r7, sp, #0
 800aad0:	60f8      	str	r0, [r7, #12]
 800aad2:	60b9      	str	r1, [r7, #8]
 800aad4:	607a      	str	r2, [r7, #4]
 800aad6:	2300      	movs	r3, #0
 800aad8:	617b      	str	r3, [r7, #20]
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aade:	613b      	str	r3, [r7, #16]
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d10d      	bne.n	800ab04 <prvCopyDataToQueue+0x3a>
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d14d      	bne.n	800ab8c <prvCopyDataToQueue+0xc2>
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	689b      	ldr	r3, [r3, #8]
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f001 fa19 	bl	800bf2c <xTaskPriorityDisinherit>
 800aafa:	6178      	str	r0, [r7, #20]
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2200      	movs	r2, #0
 800ab00:	609a      	str	r2, [r3, #8]
 800ab02:	e043      	b.n	800ab8c <prvCopyDataToQueue+0xc2>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d119      	bne.n	800ab3e <prvCopyDataToQueue+0x74>
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	6858      	ldr	r0, [r3, #4]
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab12:	461a      	mov	r2, r3
 800ab14:	68b9      	ldr	r1, [r7, #8]
 800ab16:	f002 fa0f 	bl	800cf38 <memcpy>
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	685a      	ldr	r2, [r3, #4]
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab22:	441a      	add	r2, r3
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	605a      	str	r2, [r3, #4]
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	685a      	ldr	r2, [r3, #4]
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	689b      	ldr	r3, [r3, #8]
 800ab30:	429a      	cmp	r2, r3
 800ab32:	d32b      	bcc.n	800ab8c <prvCopyDataToQueue+0xc2>
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	681a      	ldr	r2, [r3, #0]
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	605a      	str	r2, [r3, #4]
 800ab3c:	e026      	b.n	800ab8c <prvCopyDataToQueue+0xc2>
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	68d8      	ldr	r0, [r3, #12]
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab46:	461a      	mov	r2, r3
 800ab48:	68b9      	ldr	r1, [r7, #8]
 800ab4a:	f002 f9f5 	bl	800cf38 <memcpy>
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	68da      	ldr	r2, [r3, #12]
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab56:	425b      	negs	r3, r3
 800ab58:	441a      	add	r2, r3
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	60da      	str	r2, [r3, #12]
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	68da      	ldr	r2, [r3, #12]
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	429a      	cmp	r2, r3
 800ab68:	d207      	bcs.n	800ab7a <prvCopyDataToQueue+0xb0>
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	689a      	ldr	r2, [r3, #8]
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab72:	425b      	negs	r3, r3
 800ab74:	441a      	add	r2, r3
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	60da      	str	r2, [r3, #12]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2b02      	cmp	r3, #2
 800ab7e:	d105      	bne.n	800ab8c <prvCopyDataToQueue+0xc2>
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d002      	beq.n	800ab8c <prvCopyDataToQueue+0xc2>
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	3b01      	subs	r3, #1
 800ab8a:	613b      	str	r3, [r7, #16]
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	1c5a      	adds	r2, r3, #1
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	639a      	str	r2, [r3, #56]	; 0x38
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	4618      	mov	r0, r3
 800ab98:	3718      	adds	r7, #24
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}

0800ab9e <prvCopyDataFromQueue>:
 800ab9e:	b580      	push	{r7, lr}
 800aba0:	b082      	sub	sp, #8
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	6078      	str	r0, [r7, #4]
 800aba6:	6039      	str	r1, [r7, #0]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abac:	2b00      	cmp	r3, #0
 800abae:	d018      	beq.n	800abe2 <prvCopyDataFromQueue+0x44>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	68da      	ldr	r2, [r3, #12]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abb8:	441a      	add	r2, r3
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	60da      	str	r2, [r3, #12]
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	68da      	ldr	r2, [r3, #12]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	689b      	ldr	r3, [r3, #8]
 800abc6:	429a      	cmp	r2, r3
 800abc8:	d303      	bcc.n	800abd2 <prvCopyDataFromQueue+0x34>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681a      	ldr	r2, [r3, #0]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	60da      	str	r2, [r3, #12]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	68d9      	ldr	r1, [r3, #12]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abda:	461a      	mov	r2, r3
 800abdc:	6838      	ldr	r0, [r7, #0]
 800abde:	f002 f9ab 	bl	800cf38 <memcpy>
 800abe2:	bf00      	nop
 800abe4:	3708      	adds	r7, #8
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}

0800abea <prvUnlockQueue>:
 800abea:	b580      	push	{r7, lr}
 800abec:	b084      	sub	sp, #16
 800abee:	af00      	add	r7, sp, #0
 800abf0:	6078      	str	r0, [r7, #4]
 800abf2:	f001 ff85 	bl	800cb00 <vPortEnterCritical>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800abfc:	73fb      	strb	r3, [r7, #15]
 800abfe:	e011      	b.n	800ac24 <prvUnlockQueue+0x3a>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d012      	beq.n	800ac2e <prvUnlockQueue+0x44>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	3324      	adds	r3, #36	; 0x24
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f000 fe71 	bl	800b8f4 <xTaskRemoveFromEventList>
 800ac12:	4603      	mov	r3, r0
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d001      	beq.n	800ac1c <prvUnlockQueue+0x32>
 800ac18:	f000 ffc0 	bl	800bb9c <vTaskMissedYield>
 800ac1c:	7bfb      	ldrb	r3, [r7, #15]
 800ac1e:	3b01      	subs	r3, #1
 800ac20:	b2db      	uxtb	r3, r3
 800ac22:	73fb      	strb	r3, [r7, #15]
 800ac24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	dce9      	bgt.n	800ac00 <prvUnlockQueue+0x16>
 800ac2c:	e000      	b.n	800ac30 <prvUnlockQueue+0x46>
 800ac2e:	bf00      	nop
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	22ff      	movs	r2, #255	; 0xff
 800ac34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac38:	f001 ff92 	bl	800cb60 <vPortExitCritical>
 800ac3c:	f001 ff60 	bl	800cb00 <vPortEnterCritical>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac46:	73bb      	strb	r3, [r7, #14]
 800ac48:	e011      	b.n	800ac6e <prvUnlockQueue+0x84>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	691b      	ldr	r3, [r3, #16]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d012      	beq.n	800ac78 <prvUnlockQueue+0x8e>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	3310      	adds	r3, #16
 800ac56:	4618      	mov	r0, r3
 800ac58:	f000 fe4c 	bl	800b8f4 <xTaskRemoveFromEventList>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d001      	beq.n	800ac66 <prvUnlockQueue+0x7c>
 800ac62:	f000 ff9b 	bl	800bb9c <vTaskMissedYield>
 800ac66:	7bbb      	ldrb	r3, [r7, #14]
 800ac68:	3b01      	subs	r3, #1
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	73bb      	strb	r3, [r7, #14]
 800ac6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	dce9      	bgt.n	800ac4a <prvUnlockQueue+0x60>
 800ac76:	e000      	b.n	800ac7a <prvUnlockQueue+0x90>
 800ac78:	bf00      	nop
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	22ff      	movs	r2, #255	; 0xff
 800ac7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac82:	f001 ff6d 	bl	800cb60 <vPortExitCritical>
 800ac86:	bf00      	nop
 800ac88:	3710      	adds	r7, #16
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}

0800ac8e <prvIsQueueEmpty>:
 800ac8e:	b580      	push	{r7, lr}
 800ac90:	b084      	sub	sp, #16
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6078      	str	r0, [r7, #4]
 800ac96:	f001 ff33 	bl	800cb00 <vPortEnterCritical>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d102      	bne.n	800aca8 <prvIsQueueEmpty+0x1a>
 800aca2:	2301      	movs	r3, #1
 800aca4:	60fb      	str	r3, [r7, #12]
 800aca6:	e001      	b.n	800acac <prvIsQueueEmpty+0x1e>
 800aca8:	2300      	movs	r3, #0
 800acaa:	60fb      	str	r3, [r7, #12]
 800acac:	f001 ff58 	bl	800cb60 <vPortExitCritical>
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	4618      	mov	r0, r3
 800acb4:	3710      	adds	r7, #16
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}

0800acba <prvIsQueueFull>:
 800acba:	b580      	push	{r7, lr}
 800acbc:	b084      	sub	sp, #16
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	6078      	str	r0, [r7, #4]
 800acc2:	f001 ff1d 	bl	800cb00 <vPortEnterCritical>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acce:	429a      	cmp	r2, r3
 800acd0:	d102      	bne.n	800acd8 <prvIsQueueFull+0x1e>
 800acd2:	2301      	movs	r3, #1
 800acd4:	60fb      	str	r3, [r7, #12]
 800acd6:	e001      	b.n	800acdc <prvIsQueueFull+0x22>
 800acd8:	2300      	movs	r3, #0
 800acda:	60fb      	str	r3, [r7, #12]
 800acdc:	f001 ff40 	bl	800cb60 <vPortExitCritical>
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	4618      	mov	r0, r3
 800ace4:	3710      	adds	r7, #16
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
	...

0800acec <vQueueAddToRegistry>:
 800acec:	b480      	push	{r7}
 800acee:	b087      	sub	sp, #28
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	6039      	str	r1, [r7, #0]
 800acf6:	2300      	movs	r3, #0
 800acf8:	613b      	str	r3, [r7, #16]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d10a      	bne.n	800ad16 <vQueueAddToRegistry+0x2a>
 800ad00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad04:	f383 8811 	msr	BASEPRI, r3
 800ad08:	f3bf 8f6f 	isb	sy
 800ad0c:	f3bf 8f4f 	dsb	sy
 800ad10:	60fb      	str	r3, [r7, #12]
 800ad12:	bf00      	nop
 800ad14:	e7fe      	b.n	800ad14 <vQueueAddToRegistry+0x28>
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d024      	beq.n	800ad66 <vQueueAddToRegistry+0x7a>
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	617b      	str	r3, [r7, #20]
 800ad20:	e01e      	b.n	800ad60 <vQueueAddToRegistry+0x74>
 800ad22:	4a18      	ldr	r2, [pc, #96]	; (800ad84 <vQueueAddToRegistry+0x98>)
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	00db      	lsls	r3, r3, #3
 800ad28:	4413      	add	r3, r2
 800ad2a:	685b      	ldr	r3, [r3, #4]
 800ad2c:	687a      	ldr	r2, [r7, #4]
 800ad2e:	429a      	cmp	r2, r3
 800ad30:	d105      	bne.n	800ad3e <vQueueAddToRegistry+0x52>
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	00db      	lsls	r3, r3, #3
 800ad36:	4a13      	ldr	r2, [pc, #76]	; (800ad84 <vQueueAddToRegistry+0x98>)
 800ad38:	4413      	add	r3, r2
 800ad3a:	613b      	str	r3, [r7, #16]
 800ad3c:	e013      	b.n	800ad66 <vQueueAddToRegistry+0x7a>
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d10a      	bne.n	800ad5a <vQueueAddToRegistry+0x6e>
 800ad44:	4a0f      	ldr	r2, [pc, #60]	; (800ad84 <vQueueAddToRegistry+0x98>)
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d104      	bne.n	800ad5a <vQueueAddToRegistry+0x6e>
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	00db      	lsls	r3, r3, #3
 800ad54:	4a0b      	ldr	r2, [pc, #44]	; (800ad84 <vQueueAddToRegistry+0x98>)
 800ad56:	4413      	add	r3, r2
 800ad58:	613b      	str	r3, [r7, #16]
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	3301      	adds	r3, #1
 800ad5e:	617b      	str	r3, [r7, #20]
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	2b07      	cmp	r3, #7
 800ad64:	d9dd      	bls.n	800ad22 <vQueueAddToRegistry+0x36>
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d005      	beq.n	800ad78 <vQueueAddToRegistry+0x8c>
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	683a      	ldr	r2, [r7, #0]
 800ad70:	601a      	str	r2, [r3, #0]
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	605a      	str	r2, [r3, #4]
 800ad78:	bf00      	nop
 800ad7a:	371c      	adds	r7, #28
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bc80      	pop	{r7}
 800ad80:	4770      	bx	lr
 800ad82:	bf00      	nop
 800ad84:	20000e08 	.word	0x20000e08

0800ad88 <vQueueWaitForMessageRestricted>:
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b086      	sub	sp, #24
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	60f8      	str	r0, [r7, #12]
 800ad90:	60b9      	str	r1, [r7, #8]
 800ad92:	607a      	str	r2, [r7, #4]
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	617b      	str	r3, [r7, #20]
 800ad98:	f001 feb2 	bl	800cb00 <vPortEnterCritical>
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ada2:	b25b      	sxtb	r3, r3
 800ada4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ada8:	d103      	bne.n	800adb2 <vQueueWaitForMessageRestricted+0x2a>
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	2200      	movs	r2, #0
 800adae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800adb8:	b25b      	sxtb	r3, r3
 800adba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adbe:	d103      	bne.n	800adc8 <vQueueWaitForMessageRestricted+0x40>
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	2200      	movs	r2, #0
 800adc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800adc8:	f001 feca 	bl	800cb60 <vPortExitCritical>
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800add0:	2b00      	cmp	r3, #0
 800add2:	d106      	bne.n	800ade2 <vQueueWaitForMessageRestricted+0x5a>
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	3324      	adds	r3, #36	; 0x24
 800add8:	687a      	ldr	r2, [r7, #4]
 800adda:	68b9      	ldr	r1, [r7, #8]
 800addc:	4618      	mov	r0, r3
 800adde:	f000 fd43 	bl	800b868 <vTaskPlaceOnEventListRestricted>
 800ade2:	6978      	ldr	r0, [r7, #20]
 800ade4:	f7ff ff01 	bl	800abea <prvUnlockQueue>
 800ade8:	bf00      	nop
 800adea:	3718      	adds	r7, #24
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <xTaskCreate>:
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b08c      	sub	sp, #48	; 0x30
 800adf4:	af04      	add	r7, sp, #16
 800adf6:	60f8      	str	r0, [r7, #12]
 800adf8:	60b9      	str	r1, [r7, #8]
 800adfa:	607a      	str	r2, [r7, #4]
 800adfc:	603b      	str	r3, [r7, #0]
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	009b      	lsls	r3, r3, #2
 800ae02:	4618      	mov	r0, r3
 800ae04:	f001 fcd6 	bl	800c7b4 <pvPortMalloc>
 800ae08:	6178      	str	r0, [r7, #20]
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d013      	beq.n	800ae38 <xTaskCreate+0x48>
 800ae10:	207c      	movs	r0, #124	; 0x7c
 800ae12:	f001 fccf 	bl	800c7b4 <pvPortMalloc>
 800ae16:	61f8      	str	r0, [r7, #28]
 800ae18:	69fb      	ldr	r3, [r7, #28]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d008      	beq.n	800ae30 <xTaskCreate+0x40>
 800ae1e:	227c      	movs	r2, #124	; 0x7c
 800ae20:	2100      	movs	r1, #0
 800ae22:	69f8      	ldr	r0, [r7, #28]
 800ae24:	f002 f896 	bl	800cf54 <memset>
 800ae28:	69fb      	ldr	r3, [r7, #28]
 800ae2a:	697a      	ldr	r2, [r7, #20]
 800ae2c:	631a      	str	r2, [r3, #48]	; 0x30
 800ae2e:	e005      	b.n	800ae3c <xTaskCreate+0x4c>
 800ae30:	6978      	ldr	r0, [r7, #20]
 800ae32:	f001 fcd1 	bl	800c7d8 <vPortFree>
 800ae36:	e001      	b.n	800ae3c <xTaskCreate+0x4c>
 800ae38:	2300      	movs	r3, #0
 800ae3a:	61fb      	str	r3, [r7, #28]
 800ae3c:	69fb      	ldr	r3, [r7, #28]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d013      	beq.n	800ae6a <xTaskCreate+0x7a>
 800ae42:	2300      	movs	r3, #0
 800ae44:	9303      	str	r3, [sp, #12]
 800ae46:	69fb      	ldr	r3, [r7, #28]
 800ae48:	9302      	str	r3, [sp, #8]
 800ae4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae4c:	9301      	str	r3, [sp, #4]
 800ae4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae50:	9300      	str	r3, [sp, #0]
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	687a      	ldr	r2, [r7, #4]
 800ae56:	68b9      	ldr	r1, [r7, #8]
 800ae58:	68f8      	ldr	r0, [r7, #12]
 800ae5a:	f000 f80e 	bl	800ae7a <prvInitialiseNewTask>
 800ae5e:	69f8      	ldr	r0, [r7, #28]
 800ae60:	f000 f89a 	bl	800af98 <prvAddNewTaskToReadyList>
 800ae64:	2301      	movs	r3, #1
 800ae66:	61bb      	str	r3, [r7, #24]
 800ae68:	e002      	b.n	800ae70 <xTaskCreate+0x80>
 800ae6a:	f04f 33ff 	mov.w	r3, #4294967295
 800ae6e:	61bb      	str	r3, [r7, #24]
 800ae70:	69bb      	ldr	r3, [r7, #24]
 800ae72:	4618      	mov	r0, r3
 800ae74:	3720      	adds	r7, #32
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}

0800ae7a <prvInitialiseNewTask>:
 800ae7a:	b580      	push	{r7, lr}
 800ae7c:	b088      	sub	sp, #32
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	60f8      	str	r0, [r7, #12]
 800ae82:	60b9      	str	r1, [r7, #8]
 800ae84:	607a      	str	r2, [r7, #4]
 800ae86:	603b      	str	r3, [r7, #0]
 800ae88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae8a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	009b      	lsls	r3, r3, #2
 800ae90:	461a      	mov	r2, r3
 800ae92:	21a5      	movs	r1, #165	; 0xa5
 800ae94:	f002 f85e 	bl	800cf54 <memset>
 800ae98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800aea2:	3b01      	subs	r3, #1
 800aea4:	009b      	lsls	r3, r3, #2
 800aea6:	4413      	add	r3, r2
 800aea8:	61bb      	str	r3, [r7, #24]
 800aeaa:	69bb      	ldr	r3, [r7, #24]
 800aeac:	f023 0307 	bic.w	r3, r3, #7
 800aeb0:	61bb      	str	r3, [r7, #24]
 800aeb2:	69bb      	ldr	r3, [r7, #24]
 800aeb4:	f003 0307 	and.w	r3, r3, #7
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d00a      	beq.n	800aed2 <prvInitialiseNewTask+0x58>
 800aebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec0:	f383 8811 	msr	BASEPRI, r3
 800aec4:	f3bf 8f6f 	isb	sy
 800aec8:	f3bf 8f4f 	dsb	sy
 800aecc:	617b      	str	r3, [r7, #20]
 800aece:	bf00      	nop
 800aed0:	e7fe      	b.n	800aed0 <prvInitialiseNewTask+0x56>
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d01e      	beq.n	800af16 <prvInitialiseNewTask+0x9c>
 800aed8:	2300      	movs	r3, #0
 800aeda:	61fb      	str	r3, [r7, #28]
 800aedc:	e012      	b.n	800af04 <prvInitialiseNewTask+0x8a>
 800aede:	68ba      	ldr	r2, [r7, #8]
 800aee0:	69fb      	ldr	r3, [r7, #28]
 800aee2:	4413      	add	r3, r2
 800aee4:	7819      	ldrb	r1, [r3, #0]
 800aee6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aee8:	69fb      	ldr	r3, [r7, #28]
 800aeea:	4413      	add	r3, r2
 800aeec:	3334      	adds	r3, #52	; 0x34
 800aeee:	460a      	mov	r2, r1
 800aef0:	701a      	strb	r2, [r3, #0]
 800aef2:	68ba      	ldr	r2, [r7, #8]
 800aef4:	69fb      	ldr	r3, [r7, #28]
 800aef6:	4413      	add	r3, r2
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d006      	beq.n	800af0c <prvInitialiseNewTask+0x92>
 800aefe:	69fb      	ldr	r3, [r7, #28]
 800af00:	3301      	adds	r3, #1
 800af02:	61fb      	str	r3, [r7, #28]
 800af04:	69fb      	ldr	r3, [r7, #28]
 800af06:	2b13      	cmp	r3, #19
 800af08:	d9e9      	bls.n	800aede <prvInitialiseNewTask+0x64>
 800af0a:	e000      	b.n	800af0e <prvInitialiseNewTask+0x94>
 800af0c:	bf00      	nop
 800af0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af10:	2200      	movs	r2, #0
 800af12:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800af16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af18:	2b04      	cmp	r3, #4
 800af1a:	d90a      	bls.n	800af32 <prvInitialiseNewTask+0xb8>
 800af1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af20:	f383 8811 	msr	BASEPRI, r3
 800af24:	f3bf 8f6f 	isb	sy
 800af28:	f3bf 8f4f 	dsb	sy
 800af2c:	613b      	str	r3, [r7, #16]
 800af2e:	bf00      	nop
 800af30:	e7fe      	b.n	800af30 <prvInitialiseNewTask+0xb6>
 800af32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af34:	2b04      	cmp	r3, #4
 800af36:	d901      	bls.n	800af3c <prvInitialiseNewTask+0xc2>
 800af38:	2304      	movs	r3, #4
 800af3a:	62bb      	str	r3, [r7, #40]	; 0x28
 800af3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af40:	62da      	str	r2, [r3, #44]	; 0x2c
 800af42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af46:	651a      	str	r2, [r3, #80]	; 0x50
 800af48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af4a:	3304      	adds	r3, #4
 800af4c:	4618      	mov	r0, r3
 800af4e:	f001 fc74 	bl	800c83a <vListInitialiseItem>
 800af52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af54:	3318      	adds	r3, #24
 800af56:	4618      	mov	r0, r3
 800af58:	f001 fc6f 	bl	800c83a <vListInitialiseItem>
 800af5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af60:	611a      	str	r2, [r3, #16]
 800af62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af64:	f1c3 0205 	rsb	r2, r3, #5
 800af68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af6a:	619a      	str	r2, [r3, #24]
 800af6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af70:	625a      	str	r2, [r3, #36]	; 0x24
 800af72:	683a      	ldr	r2, [r7, #0]
 800af74:	68f9      	ldr	r1, [r7, #12]
 800af76:	69b8      	ldr	r0, [r7, #24]
 800af78:	f001 fccc 	bl	800c914 <pxPortInitialiseStack>
 800af7c:	4602      	mov	r2, r0
 800af7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af80:	601a      	str	r2, [r3, #0]
 800af82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af84:	2b00      	cmp	r3, #0
 800af86:	d002      	beq.n	800af8e <prvInitialiseNewTask+0x114>
 800af88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af8c:	601a      	str	r2, [r3, #0]
 800af8e:	bf00      	nop
 800af90:	3720      	adds	r7, #32
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
	...

0800af98 <prvAddNewTaskToReadyList>:
 800af98:	b580      	push	{r7, lr}
 800af9a:	b084      	sub	sp, #16
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	f001 fdae 	bl	800cb00 <vPortEnterCritical>
 800afa4:	4b41      	ldr	r3, [pc, #260]	; (800b0ac <prvAddNewTaskToReadyList+0x114>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	3301      	adds	r3, #1
 800afaa:	4a40      	ldr	r2, [pc, #256]	; (800b0ac <prvAddNewTaskToReadyList+0x114>)
 800afac:	6013      	str	r3, [r2, #0]
 800afae:	4b40      	ldr	r3, [pc, #256]	; (800b0b0 <prvAddNewTaskToReadyList+0x118>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d109      	bne.n	800afca <prvAddNewTaskToReadyList+0x32>
 800afb6:	4a3e      	ldr	r2, [pc, #248]	; (800b0b0 <prvAddNewTaskToReadyList+0x118>)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6013      	str	r3, [r2, #0]
 800afbc:	4b3b      	ldr	r3, [pc, #236]	; (800b0ac <prvAddNewTaskToReadyList+0x114>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d110      	bne.n	800afe6 <prvAddNewTaskToReadyList+0x4e>
 800afc4:	f000 fe6c 	bl	800bca0 <prvInitialiseTaskLists>
 800afc8:	e00d      	b.n	800afe6 <prvAddNewTaskToReadyList+0x4e>
 800afca:	4b3a      	ldr	r3, [pc, #232]	; (800b0b4 <prvAddNewTaskToReadyList+0x11c>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d109      	bne.n	800afe6 <prvAddNewTaskToReadyList+0x4e>
 800afd2:	4b37      	ldr	r3, [pc, #220]	; (800b0b0 <prvAddNewTaskToReadyList+0x118>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afdc:	429a      	cmp	r2, r3
 800afde:	d802      	bhi.n	800afe6 <prvAddNewTaskToReadyList+0x4e>
 800afe0:	4a33      	ldr	r2, [pc, #204]	; (800b0b0 <prvAddNewTaskToReadyList+0x118>)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6013      	str	r3, [r2, #0]
 800afe6:	4b34      	ldr	r3, [pc, #208]	; (800b0b8 <prvAddNewTaskToReadyList+0x120>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	3301      	adds	r3, #1
 800afec:	4a32      	ldr	r2, [pc, #200]	; (800b0b8 <prvAddNewTaskToReadyList+0x120>)
 800afee:	6013      	str	r3, [r2, #0]
 800aff0:	4b31      	ldr	r3, [pc, #196]	; (800b0b8 <prvAddNewTaskToReadyList+0x120>)
 800aff2:	681a      	ldr	r2, [r3, #0]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	649a      	str	r2, [r3, #72]	; 0x48
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800affc:	4b2f      	ldr	r3, [pc, #188]	; (800b0bc <prvAddNewTaskToReadyList+0x124>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	429a      	cmp	r2, r3
 800b002:	d903      	bls.n	800b00c <prvAddNewTaskToReadyList+0x74>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b008:	4a2c      	ldr	r2, [pc, #176]	; (800b0bc <prvAddNewTaskToReadyList+0x124>)
 800b00a:	6013      	str	r3, [r2, #0]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b010:	492b      	ldr	r1, [pc, #172]	; (800b0c0 <prvAddNewTaskToReadyList+0x128>)
 800b012:	4613      	mov	r3, r2
 800b014:	009b      	lsls	r3, r3, #2
 800b016:	4413      	add	r3, r2
 800b018:	009b      	lsls	r3, r3, #2
 800b01a:	440b      	add	r3, r1
 800b01c:	3304      	adds	r3, #4
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	60fb      	str	r3, [r7, #12]
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	68fa      	ldr	r2, [r7, #12]
 800b026:	609a      	str	r2, [r3, #8]
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	689a      	ldr	r2, [r3, #8]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	60da      	str	r2, [r3, #12]
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	689b      	ldr	r3, [r3, #8]
 800b034:	687a      	ldr	r2, [r7, #4]
 800b036:	3204      	adds	r2, #4
 800b038:	605a      	str	r2, [r3, #4]
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	1d1a      	adds	r2, r3, #4
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	609a      	str	r2, [r3, #8]
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b046:	4613      	mov	r3, r2
 800b048:	009b      	lsls	r3, r3, #2
 800b04a:	4413      	add	r3, r2
 800b04c:	009b      	lsls	r3, r3, #2
 800b04e:	4a1c      	ldr	r2, [pc, #112]	; (800b0c0 <prvAddNewTaskToReadyList+0x128>)
 800b050:	441a      	add	r2, r3
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	615a      	str	r2, [r3, #20]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b05a:	4919      	ldr	r1, [pc, #100]	; (800b0c0 <prvAddNewTaskToReadyList+0x128>)
 800b05c:	4613      	mov	r3, r2
 800b05e:	009b      	lsls	r3, r3, #2
 800b060:	4413      	add	r3, r2
 800b062:	009b      	lsls	r3, r3, #2
 800b064:	440b      	add	r3, r1
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	1c59      	adds	r1, r3, #1
 800b06a:	4815      	ldr	r0, [pc, #84]	; (800b0c0 <prvAddNewTaskToReadyList+0x128>)
 800b06c:	4613      	mov	r3, r2
 800b06e:	009b      	lsls	r3, r3, #2
 800b070:	4413      	add	r3, r2
 800b072:	009b      	lsls	r3, r3, #2
 800b074:	4403      	add	r3, r0
 800b076:	6019      	str	r1, [r3, #0]
 800b078:	f001 fd72 	bl	800cb60 <vPortExitCritical>
 800b07c:	4b0d      	ldr	r3, [pc, #52]	; (800b0b4 <prvAddNewTaskToReadyList+0x11c>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d00e      	beq.n	800b0a2 <prvAddNewTaskToReadyList+0x10a>
 800b084:	4b0a      	ldr	r3, [pc, #40]	; (800b0b0 <prvAddNewTaskToReadyList+0x118>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b08e:	429a      	cmp	r2, r3
 800b090:	d207      	bcs.n	800b0a2 <prvAddNewTaskToReadyList+0x10a>
 800b092:	4b0c      	ldr	r3, [pc, #48]	; (800b0c4 <prvAddNewTaskToReadyList+0x12c>)
 800b094:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b098:	601a      	str	r2, [r3, #0]
 800b09a:	f3bf 8f4f 	dsb	sy
 800b09e:	f3bf 8f6f 	isb	sy
 800b0a2:	bf00      	nop
 800b0a4:	3710      	adds	r7, #16
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}
 800b0aa:	bf00      	nop
 800b0ac:	200001cc 	.word	0x200001cc
 800b0b0:	200000f4 	.word	0x200000f4
 800b0b4:	200001d8 	.word	0x200001d8
 800b0b8:	200001e8 	.word	0x200001e8
 800b0bc:	200001d4 	.word	0x200001d4
 800b0c0:	200000f8 	.word	0x200000f8
 800b0c4:	e000ed04 	.word	0xe000ed04

0800b0c8 <vTaskDelay>:
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b084      	sub	sp, #16
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	60fb      	str	r3, [r7, #12]
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d017      	beq.n	800b10a <vTaskDelay+0x42>
 800b0da:	4b13      	ldr	r3, [pc, #76]	; (800b128 <vTaskDelay+0x60>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d00a      	beq.n	800b0f8 <vTaskDelay+0x30>
 800b0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e6:	f383 8811 	msr	BASEPRI, r3
 800b0ea:	f3bf 8f6f 	isb	sy
 800b0ee:	f3bf 8f4f 	dsb	sy
 800b0f2:	60bb      	str	r3, [r7, #8]
 800b0f4:	bf00      	nop
 800b0f6:	e7fe      	b.n	800b0f6 <vTaskDelay+0x2e>
 800b0f8:	f000 f86c 	bl	800b1d4 <vTaskSuspendAll>
 800b0fc:	2100      	movs	r1, #0
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f001 f868 	bl	800c1d4 <prvAddCurrentTaskToDelayedList>
 800b104:	f000 f8aa 	bl	800b25c <xTaskResumeAll>
 800b108:	60f8      	str	r0, [r7, #12]
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d107      	bne.n	800b120 <vTaskDelay+0x58>
 800b110:	4b06      	ldr	r3, [pc, #24]	; (800b12c <vTaskDelay+0x64>)
 800b112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b116:	601a      	str	r2, [r3, #0]
 800b118:	f3bf 8f4f 	dsb	sy
 800b11c:	f3bf 8f6f 	isb	sy
 800b120:	bf00      	nop
 800b122:	3710      	adds	r7, #16
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}
 800b128:	200001f4 	.word	0x200001f4
 800b12c:	e000ed04 	.word	0xe000ed04

0800b130 <vTaskStartScheduler>:
 800b130:	b580      	push	{r7, lr}
 800b132:	b086      	sub	sp, #24
 800b134:	af02      	add	r7, sp, #8
 800b136:	4b20      	ldr	r3, [pc, #128]	; (800b1b8 <vTaskStartScheduler+0x88>)
 800b138:	9301      	str	r3, [sp, #4]
 800b13a:	2300      	movs	r3, #0
 800b13c:	9300      	str	r3, [sp, #0]
 800b13e:	2300      	movs	r3, #0
 800b140:	2280      	movs	r2, #128	; 0x80
 800b142:	491e      	ldr	r1, [pc, #120]	; (800b1bc <vTaskStartScheduler+0x8c>)
 800b144:	481e      	ldr	r0, [pc, #120]	; (800b1c0 <vTaskStartScheduler+0x90>)
 800b146:	f7ff fe53 	bl	800adf0 <xTaskCreate>
 800b14a:	60f8      	str	r0, [r7, #12]
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	2b01      	cmp	r3, #1
 800b150:	d102      	bne.n	800b158 <vTaskStartScheduler+0x28>
 800b152:	f001 f8ad 	bl	800c2b0 <xTimerCreateTimerTask>
 800b156:	60f8      	str	r0, [r7, #12]
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	2b01      	cmp	r3, #1
 800b15c:	d116      	bne.n	800b18c <vTaskStartScheduler+0x5c>
 800b15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b162:	f383 8811 	msr	BASEPRI, r3
 800b166:	f3bf 8f6f 	isb	sy
 800b16a:	f3bf 8f4f 	dsb	sy
 800b16e:	60bb      	str	r3, [r7, #8]
 800b170:	bf00      	nop
 800b172:	4b14      	ldr	r3, [pc, #80]	; (800b1c4 <vTaskStartScheduler+0x94>)
 800b174:	f04f 32ff 	mov.w	r2, #4294967295
 800b178:	601a      	str	r2, [r3, #0]
 800b17a:	4b13      	ldr	r3, [pc, #76]	; (800b1c8 <vTaskStartScheduler+0x98>)
 800b17c:	2201      	movs	r2, #1
 800b17e:	601a      	str	r2, [r3, #0]
 800b180:	4b12      	ldr	r3, [pc, #72]	; (800b1cc <vTaskStartScheduler+0x9c>)
 800b182:	2200      	movs	r2, #0
 800b184:	601a      	str	r2, [r3, #0]
 800b186:	f001 fc49 	bl	800ca1c <xPortStartScheduler>
 800b18a:	e00e      	b.n	800b1aa <vTaskStartScheduler+0x7a>
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b192:	d10a      	bne.n	800b1aa <vTaskStartScheduler+0x7a>
 800b194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b198:	f383 8811 	msr	BASEPRI, r3
 800b19c:	f3bf 8f6f 	isb	sy
 800b1a0:	f3bf 8f4f 	dsb	sy
 800b1a4:	607b      	str	r3, [r7, #4]
 800b1a6:	bf00      	nop
 800b1a8:	e7fe      	b.n	800b1a8 <vTaskStartScheduler+0x78>
 800b1aa:	4b09      	ldr	r3, [pc, #36]	; (800b1d0 <vTaskStartScheduler+0xa0>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	bf00      	nop
 800b1b0:	3710      	adds	r7, #16
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}
 800b1b6:	bf00      	nop
 800b1b8:	200001f0 	.word	0x200001f0
 800b1bc:	0800dad0 	.word	0x0800dad0
 800b1c0:	0800bbb5 	.word	0x0800bbb5
 800b1c4:	200001ec 	.word	0x200001ec
 800b1c8:	200001d8 	.word	0x200001d8
 800b1cc:	200001d0 	.word	0x200001d0
 800b1d0:	20000034 	.word	0x20000034

0800b1d4 <vTaskSuspendAll>:
 800b1d4:	b480      	push	{r7}
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	4b04      	ldr	r3, [pc, #16]	; (800b1ec <vTaskSuspendAll+0x18>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	3301      	adds	r3, #1
 800b1de:	4a03      	ldr	r2, [pc, #12]	; (800b1ec <vTaskSuspendAll+0x18>)
 800b1e0:	6013      	str	r3, [r2, #0]
 800b1e2:	bf00      	nop
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bc80      	pop	{r7}
 800b1e8:	4770      	bx	lr
 800b1ea:	bf00      	nop
 800b1ec:	200001f4 	.word	0x200001f4

0800b1f0 <prvGetExpectedIdleTime>:
 800b1f0:	b480      	push	{r7}
 800b1f2:	b083      	sub	sp, #12
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	603b      	str	r3, [r7, #0]
 800b1fa:	4b13      	ldr	r3, [pc, #76]	; (800b248 <prvGetExpectedIdleTime+0x58>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d001      	beq.n	800b206 <prvGetExpectedIdleTime+0x16>
 800b202:	2301      	movs	r3, #1
 800b204:	603b      	str	r3, [r7, #0]
 800b206:	4b11      	ldr	r3, [pc, #68]	; (800b24c <prvGetExpectedIdleTime+0x5c>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d002      	beq.n	800b216 <prvGetExpectedIdleTime+0x26>
 800b210:	2300      	movs	r3, #0
 800b212:	607b      	str	r3, [r7, #4]
 800b214:	e012      	b.n	800b23c <prvGetExpectedIdleTime+0x4c>
 800b216:	4b0e      	ldr	r3, [pc, #56]	; (800b250 <prvGetExpectedIdleTime+0x60>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	2b01      	cmp	r3, #1
 800b21c:	d902      	bls.n	800b224 <prvGetExpectedIdleTime+0x34>
 800b21e:	2300      	movs	r3, #0
 800b220:	607b      	str	r3, [r7, #4]
 800b222:	e00b      	b.n	800b23c <prvGetExpectedIdleTime+0x4c>
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d002      	beq.n	800b230 <prvGetExpectedIdleTime+0x40>
 800b22a:	2300      	movs	r3, #0
 800b22c:	607b      	str	r3, [r7, #4]
 800b22e:	e005      	b.n	800b23c <prvGetExpectedIdleTime+0x4c>
 800b230:	4b08      	ldr	r3, [pc, #32]	; (800b254 <prvGetExpectedIdleTime+0x64>)
 800b232:	681a      	ldr	r2, [r3, #0]
 800b234:	4b08      	ldr	r3, [pc, #32]	; (800b258 <prvGetExpectedIdleTime+0x68>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	1ad3      	subs	r3, r2, r3
 800b23a:	607b      	str	r3, [r7, #4]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	4618      	mov	r0, r3
 800b240:	370c      	adds	r7, #12
 800b242:	46bd      	mov	sp, r7
 800b244:	bc80      	pop	{r7}
 800b246:	4770      	bx	lr
 800b248:	200001d4 	.word	0x200001d4
 800b24c:	200000f4 	.word	0x200000f4
 800b250:	200000f8 	.word	0x200000f8
 800b254:	200001ec 	.word	0x200001ec
 800b258:	200001d0 	.word	0x200001d0

0800b25c <xTaskResumeAll>:
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b088      	sub	sp, #32
 800b260:	af00      	add	r7, sp, #0
 800b262:	2300      	movs	r3, #0
 800b264:	61fb      	str	r3, [r7, #28]
 800b266:	2300      	movs	r3, #0
 800b268:	61bb      	str	r3, [r7, #24]
 800b26a:	4b71      	ldr	r3, [pc, #452]	; (800b430 <xTaskResumeAll+0x1d4>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d10a      	bne.n	800b288 <xTaskResumeAll+0x2c>
 800b272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b276:	f383 8811 	msr	BASEPRI, r3
 800b27a:	f3bf 8f6f 	isb	sy
 800b27e:	f3bf 8f4f 	dsb	sy
 800b282:	607b      	str	r3, [r7, #4]
 800b284:	bf00      	nop
 800b286:	e7fe      	b.n	800b286 <xTaskResumeAll+0x2a>
 800b288:	f001 fc3a 	bl	800cb00 <vPortEnterCritical>
 800b28c:	4b68      	ldr	r3, [pc, #416]	; (800b430 <xTaskResumeAll+0x1d4>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	3b01      	subs	r3, #1
 800b292:	4a67      	ldr	r2, [pc, #412]	; (800b430 <xTaskResumeAll+0x1d4>)
 800b294:	6013      	str	r3, [r2, #0]
 800b296:	4b66      	ldr	r3, [pc, #408]	; (800b430 <xTaskResumeAll+0x1d4>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	f040 80c1 	bne.w	800b422 <xTaskResumeAll+0x1c6>
 800b2a0:	4b64      	ldr	r3, [pc, #400]	; (800b434 <xTaskResumeAll+0x1d8>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	f000 80bc 	beq.w	800b422 <xTaskResumeAll+0x1c6>
 800b2aa:	e08b      	b.n	800b3c4 <xTaskResumeAll+0x168>
 800b2ac:	4b62      	ldr	r3, [pc, #392]	; (800b438 <xTaskResumeAll+0x1dc>)
 800b2ae:	68db      	ldr	r3, [r3, #12]
 800b2b0:	68db      	ldr	r3, [r3, #12]
 800b2b2:	61fb      	str	r3, [r7, #28]
 800b2b4:	69fb      	ldr	r3, [r7, #28]
 800b2b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2b8:	613b      	str	r3, [r7, #16]
 800b2ba:	69fb      	ldr	r3, [r7, #28]
 800b2bc:	69db      	ldr	r3, [r3, #28]
 800b2be:	69fa      	ldr	r2, [r7, #28]
 800b2c0:	6a12      	ldr	r2, [r2, #32]
 800b2c2:	609a      	str	r2, [r3, #8]
 800b2c4:	69fb      	ldr	r3, [r7, #28]
 800b2c6:	6a1b      	ldr	r3, [r3, #32]
 800b2c8:	69fa      	ldr	r2, [r7, #28]
 800b2ca:	69d2      	ldr	r2, [r2, #28]
 800b2cc:	605a      	str	r2, [r3, #4]
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	685a      	ldr	r2, [r3, #4]
 800b2d2:	69fb      	ldr	r3, [r7, #28]
 800b2d4:	3318      	adds	r3, #24
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	d103      	bne.n	800b2e2 <xTaskResumeAll+0x86>
 800b2da:	69fb      	ldr	r3, [r7, #28]
 800b2dc:	6a1a      	ldr	r2, [r3, #32]
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	605a      	str	r2, [r3, #4]
 800b2e2:	69fb      	ldr	r3, [r7, #28]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	629a      	str	r2, [r3, #40]	; 0x28
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	1e5a      	subs	r2, r3, #1
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	601a      	str	r2, [r3, #0]
 800b2f2:	69fb      	ldr	r3, [r7, #28]
 800b2f4:	695b      	ldr	r3, [r3, #20]
 800b2f6:	60fb      	str	r3, [r7, #12]
 800b2f8:	69fb      	ldr	r3, [r7, #28]
 800b2fa:	689b      	ldr	r3, [r3, #8]
 800b2fc:	69fa      	ldr	r2, [r7, #28]
 800b2fe:	68d2      	ldr	r2, [r2, #12]
 800b300:	609a      	str	r2, [r3, #8]
 800b302:	69fb      	ldr	r3, [r7, #28]
 800b304:	68db      	ldr	r3, [r3, #12]
 800b306:	69fa      	ldr	r2, [r7, #28]
 800b308:	6892      	ldr	r2, [r2, #8]
 800b30a:	605a      	str	r2, [r3, #4]
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	685a      	ldr	r2, [r3, #4]
 800b310:	69fb      	ldr	r3, [r7, #28]
 800b312:	3304      	adds	r3, #4
 800b314:	429a      	cmp	r2, r3
 800b316:	d103      	bne.n	800b320 <xTaskResumeAll+0xc4>
 800b318:	69fb      	ldr	r3, [r7, #28]
 800b31a:	68da      	ldr	r2, [r3, #12]
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	605a      	str	r2, [r3, #4]
 800b320:	69fb      	ldr	r3, [r7, #28]
 800b322:	2200      	movs	r2, #0
 800b324:	615a      	str	r2, [r3, #20]
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	1e5a      	subs	r2, r3, #1
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	601a      	str	r2, [r3, #0]
 800b330:	69fb      	ldr	r3, [r7, #28]
 800b332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b334:	4b41      	ldr	r3, [pc, #260]	; (800b43c <xTaskResumeAll+0x1e0>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	429a      	cmp	r2, r3
 800b33a:	d903      	bls.n	800b344 <xTaskResumeAll+0xe8>
 800b33c:	69fb      	ldr	r3, [r7, #28]
 800b33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b340:	4a3e      	ldr	r2, [pc, #248]	; (800b43c <xTaskResumeAll+0x1e0>)
 800b342:	6013      	str	r3, [r2, #0]
 800b344:	69fb      	ldr	r3, [r7, #28]
 800b346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b348:	493d      	ldr	r1, [pc, #244]	; (800b440 <xTaskResumeAll+0x1e4>)
 800b34a:	4613      	mov	r3, r2
 800b34c:	009b      	lsls	r3, r3, #2
 800b34e:	4413      	add	r3, r2
 800b350:	009b      	lsls	r3, r3, #2
 800b352:	440b      	add	r3, r1
 800b354:	3304      	adds	r3, #4
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	60bb      	str	r3, [r7, #8]
 800b35a:	69fb      	ldr	r3, [r7, #28]
 800b35c:	68ba      	ldr	r2, [r7, #8]
 800b35e:	609a      	str	r2, [r3, #8]
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	689a      	ldr	r2, [r3, #8]
 800b364:	69fb      	ldr	r3, [r7, #28]
 800b366:	60da      	str	r2, [r3, #12]
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	689b      	ldr	r3, [r3, #8]
 800b36c:	69fa      	ldr	r2, [r7, #28]
 800b36e:	3204      	adds	r2, #4
 800b370:	605a      	str	r2, [r3, #4]
 800b372:	69fb      	ldr	r3, [r7, #28]
 800b374:	1d1a      	adds	r2, r3, #4
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	609a      	str	r2, [r3, #8]
 800b37a:	69fb      	ldr	r3, [r7, #28]
 800b37c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b37e:	4613      	mov	r3, r2
 800b380:	009b      	lsls	r3, r3, #2
 800b382:	4413      	add	r3, r2
 800b384:	009b      	lsls	r3, r3, #2
 800b386:	4a2e      	ldr	r2, [pc, #184]	; (800b440 <xTaskResumeAll+0x1e4>)
 800b388:	441a      	add	r2, r3
 800b38a:	69fb      	ldr	r3, [r7, #28]
 800b38c:	615a      	str	r2, [r3, #20]
 800b38e:	69fb      	ldr	r3, [r7, #28]
 800b390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b392:	492b      	ldr	r1, [pc, #172]	; (800b440 <xTaskResumeAll+0x1e4>)
 800b394:	4613      	mov	r3, r2
 800b396:	009b      	lsls	r3, r3, #2
 800b398:	4413      	add	r3, r2
 800b39a:	009b      	lsls	r3, r3, #2
 800b39c:	440b      	add	r3, r1
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	1c59      	adds	r1, r3, #1
 800b3a2:	4827      	ldr	r0, [pc, #156]	; (800b440 <xTaskResumeAll+0x1e4>)
 800b3a4:	4613      	mov	r3, r2
 800b3a6:	009b      	lsls	r3, r3, #2
 800b3a8:	4413      	add	r3, r2
 800b3aa:	009b      	lsls	r3, r3, #2
 800b3ac:	4403      	add	r3, r0
 800b3ae:	6019      	str	r1, [r3, #0]
 800b3b0:	69fb      	ldr	r3, [r7, #28]
 800b3b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3b4:	4b23      	ldr	r3, [pc, #140]	; (800b444 <xTaskResumeAll+0x1e8>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ba:	429a      	cmp	r2, r3
 800b3bc:	d302      	bcc.n	800b3c4 <xTaskResumeAll+0x168>
 800b3be:	4b22      	ldr	r3, [pc, #136]	; (800b448 <xTaskResumeAll+0x1ec>)
 800b3c0:	2201      	movs	r2, #1
 800b3c2:	601a      	str	r2, [r3, #0]
 800b3c4:	4b1c      	ldr	r3, [pc, #112]	; (800b438 <xTaskResumeAll+0x1dc>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	f47f af6f 	bne.w	800b2ac <xTaskResumeAll+0x50>
 800b3ce:	69fb      	ldr	r3, [r7, #28]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d001      	beq.n	800b3d8 <xTaskResumeAll+0x17c>
 800b3d4:	f000 fce2 	bl	800bd9c <prvResetNextTaskUnblockTime>
 800b3d8:	4b1c      	ldr	r3, [pc, #112]	; (800b44c <xTaskResumeAll+0x1f0>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	617b      	str	r3, [r7, #20]
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d010      	beq.n	800b406 <xTaskResumeAll+0x1aa>
 800b3e4:	f000 f8a8 	bl	800b538 <xTaskIncrementTick>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d002      	beq.n	800b3f4 <xTaskResumeAll+0x198>
 800b3ee:	4b16      	ldr	r3, [pc, #88]	; (800b448 <xTaskResumeAll+0x1ec>)
 800b3f0:	2201      	movs	r2, #1
 800b3f2:	601a      	str	r2, [r3, #0]
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	3b01      	subs	r3, #1
 800b3f8:	617b      	str	r3, [r7, #20]
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d1f1      	bne.n	800b3e4 <xTaskResumeAll+0x188>
 800b400:	4b12      	ldr	r3, [pc, #72]	; (800b44c <xTaskResumeAll+0x1f0>)
 800b402:	2200      	movs	r2, #0
 800b404:	601a      	str	r2, [r3, #0]
 800b406:	4b10      	ldr	r3, [pc, #64]	; (800b448 <xTaskResumeAll+0x1ec>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d009      	beq.n	800b422 <xTaskResumeAll+0x1c6>
 800b40e:	2301      	movs	r3, #1
 800b410:	61bb      	str	r3, [r7, #24]
 800b412:	4b0f      	ldr	r3, [pc, #60]	; (800b450 <xTaskResumeAll+0x1f4>)
 800b414:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b418:	601a      	str	r2, [r3, #0]
 800b41a:	f3bf 8f4f 	dsb	sy
 800b41e:	f3bf 8f6f 	isb	sy
 800b422:	f001 fb9d 	bl	800cb60 <vPortExitCritical>
 800b426:	69bb      	ldr	r3, [r7, #24]
 800b428:	4618      	mov	r0, r3
 800b42a:	3720      	adds	r7, #32
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}
 800b430:	200001f4 	.word	0x200001f4
 800b434:	200001cc 	.word	0x200001cc
 800b438:	2000018c 	.word	0x2000018c
 800b43c:	200001d4 	.word	0x200001d4
 800b440:	200000f8 	.word	0x200000f8
 800b444:	200000f4 	.word	0x200000f4
 800b448:	200001e0 	.word	0x200001e0
 800b44c:	200001dc 	.word	0x200001dc
 800b450:	e000ed04 	.word	0xe000ed04

0800b454 <xTaskGetTickCount>:
 800b454:	b480      	push	{r7}
 800b456:	b083      	sub	sp, #12
 800b458:	af00      	add	r7, sp, #0
 800b45a:	4b04      	ldr	r3, [pc, #16]	; (800b46c <xTaskGetTickCount+0x18>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	607b      	str	r3, [r7, #4]
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	4618      	mov	r0, r3
 800b464:	370c      	adds	r7, #12
 800b466:	46bd      	mov	sp, r7
 800b468:	bc80      	pop	{r7}
 800b46a:	4770      	bx	lr
 800b46c:	200001d0 	.word	0x200001d0

0800b470 <uxTaskGetNumberOfTasks>:
 800b470:	b480      	push	{r7}
 800b472:	af00      	add	r7, sp, #0
 800b474:	4b02      	ldr	r3, [pc, #8]	; (800b480 <uxTaskGetNumberOfTasks+0x10>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	4618      	mov	r0, r3
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bc80      	pop	{r7}
 800b47e:	4770      	bx	lr
 800b480:	200001cc 	.word	0x200001cc

0800b484 <vTaskStepTick>:
 800b484:	b580      	push	{r7, lr}
 800b486:	b086      	sub	sp, #24
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	4b26      	ldr	r3, [pc, #152]	; (800b528 <vTaskStepTick+0xa4>)
 800b48e:	681a      	ldr	r2, [r3, #0]
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	441a      	add	r2, r3
 800b494:	4b25      	ldr	r3, [pc, #148]	; (800b52c <vTaskStepTick+0xa8>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	429a      	cmp	r2, r3
 800b49a:	d90a      	bls.n	800b4b2 <vTaskStepTick+0x2e>
 800b49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a0:	f383 8811 	msr	BASEPRI, r3
 800b4a4:	f3bf 8f6f 	isb	sy
 800b4a8:	f3bf 8f4f 	dsb	sy
 800b4ac:	617b      	str	r3, [r7, #20]
 800b4ae:	bf00      	nop
 800b4b0:	e7fe      	b.n	800b4b0 <vTaskStepTick+0x2c>
 800b4b2:	4b1d      	ldr	r3, [pc, #116]	; (800b528 <vTaskStepTick+0xa4>)
 800b4b4:	681a      	ldr	r2, [r3, #0]
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	441a      	add	r2, r3
 800b4ba:	4b1c      	ldr	r3, [pc, #112]	; (800b52c <vTaskStepTick+0xa8>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d128      	bne.n	800b514 <vTaskStepTick+0x90>
 800b4c2:	4b1b      	ldr	r3, [pc, #108]	; (800b530 <vTaskStepTick+0xac>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d10a      	bne.n	800b4e0 <vTaskStepTick+0x5c>
 800b4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ce:	f383 8811 	msr	BASEPRI, r3
 800b4d2:	f3bf 8f6f 	isb	sy
 800b4d6:	f3bf 8f4f 	dsb	sy
 800b4da:	613b      	str	r3, [r7, #16]
 800b4dc:	bf00      	nop
 800b4de:	e7fe      	b.n	800b4de <vTaskStepTick+0x5a>
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d10a      	bne.n	800b4fc <vTaskStepTick+0x78>
 800b4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ea:	f383 8811 	msr	BASEPRI, r3
 800b4ee:	f3bf 8f6f 	isb	sy
 800b4f2:	f3bf 8f4f 	dsb	sy
 800b4f6:	60fb      	str	r3, [r7, #12]
 800b4f8:	bf00      	nop
 800b4fa:	e7fe      	b.n	800b4fa <vTaskStepTick+0x76>
 800b4fc:	f001 fb00 	bl	800cb00 <vPortEnterCritical>
 800b500:	4b0c      	ldr	r3, [pc, #48]	; (800b534 <vTaskStepTick+0xb0>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	3301      	adds	r3, #1
 800b506:	4a0b      	ldr	r2, [pc, #44]	; (800b534 <vTaskStepTick+0xb0>)
 800b508:	6013      	str	r3, [r2, #0]
 800b50a:	f001 fb29 	bl	800cb60 <vPortExitCritical>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	3b01      	subs	r3, #1
 800b512:	607b      	str	r3, [r7, #4]
 800b514:	4b04      	ldr	r3, [pc, #16]	; (800b528 <vTaskStepTick+0xa4>)
 800b516:	681a      	ldr	r2, [r3, #0]
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	4413      	add	r3, r2
 800b51c:	4a02      	ldr	r2, [pc, #8]	; (800b528 <vTaskStepTick+0xa4>)
 800b51e:	6013      	str	r3, [r2, #0]
 800b520:	bf00      	nop
 800b522:	3718      	adds	r7, #24
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}
 800b528:	200001d0 	.word	0x200001d0
 800b52c:	200001ec 	.word	0x200001ec
 800b530:	200001f4 	.word	0x200001f4
 800b534:	200001dc 	.word	0x200001dc

0800b538 <xTaskIncrementTick>:
 800b538:	b580      	push	{r7, lr}
 800b53a:	b08a      	sub	sp, #40	; 0x28
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	2300      	movs	r3, #0
 800b540:	627b      	str	r3, [r7, #36]	; 0x24
 800b542:	4b7e      	ldr	r3, [pc, #504]	; (800b73c <xTaskIncrementTick+0x204>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	2b00      	cmp	r3, #0
 800b548:	f040 80ed 	bne.w	800b726 <xTaskIncrementTick+0x1ee>
 800b54c:	4b7c      	ldr	r3, [pc, #496]	; (800b740 <xTaskIncrementTick+0x208>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	3301      	adds	r3, #1
 800b552:	623b      	str	r3, [r7, #32]
 800b554:	4a7a      	ldr	r2, [pc, #488]	; (800b740 <xTaskIncrementTick+0x208>)
 800b556:	6a3b      	ldr	r3, [r7, #32]
 800b558:	6013      	str	r3, [r2, #0]
 800b55a:	6a3b      	ldr	r3, [r7, #32]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d120      	bne.n	800b5a2 <xTaskIncrementTick+0x6a>
 800b560:	4b78      	ldr	r3, [pc, #480]	; (800b744 <xTaskIncrementTick+0x20c>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d00a      	beq.n	800b580 <xTaskIncrementTick+0x48>
 800b56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b56e:	f383 8811 	msr	BASEPRI, r3
 800b572:	f3bf 8f6f 	isb	sy
 800b576:	f3bf 8f4f 	dsb	sy
 800b57a:	607b      	str	r3, [r7, #4]
 800b57c:	bf00      	nop
 800b57e:	e7fe      	b.n	800b57e <xTaskIncrementTick+0x46>
 800b580:	4b70      	ldr	r3, [pc, #448]	; (800b744 <xTaskIncrementTick+0x20c>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	61fb      	str	r3, [r7, #28]
 800b586:	4b70      	ldr	r3, [pc, #448]	; (800b748 <xTaskIncrementTick+0x210>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	4a6e      	ldr	r2, [pc, #440]	; (800b744 <xTaskIncrementTick+0x20c>)
 800b58c:	6013      	str	r3, [r2, #0]
 800b58e:	4a6e      	ldr	r2, [pc, #440]	; (800b748 <xTaskIncrementTick+0x210>)
 800b590:	69fb      	ldr	r3, [r7, #28]
 800b592:	6013      	str	r3, [r2, #0]
 800b594:	4b6d      	ldr	r3, [pc, #436]	; (800b74c <xTaskIncrementTick+0x214>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	3301      	adds	r3, #1
 800b59a:	4a6c      	ldr	r2, [pc, #432]	; (800b74c <xTaskIncrementTick+0x214>)
 800b59c:	6013      	str	r3, [r2, #0]
 800b59e:	f000 fbfd 	bl	800bd9c <prvResetNextTaskUnblockTime>
 800b5a2:	4b6b      	ldr	r3, [pc, #428]	; (800b750 <xTaskIncrementTick+0x218>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	6a3a      	ldr	r2, [r7, #32]
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	f0c0 80a7 	bcc.w	800b6fc <xTaskIncrementTick+0x1c4>
 800b5ae:	4b65      	ldr	r3, [pc, #404]	; (800b744 <xTaskIncrementTick+0x20c>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d104      	bne.n	800b5c2 <xTaskIncrementTick+0x8a>
 800b5b8:	4b65      	ldr	r3, [pc, #404]	; (800b750 <xTaskIncrementTick+0x218>)
 800b5ba:	f04f 32ff 	mov.w	r2, #4294967295
 800b5be:	601a      	str	r2, [r3, #0]
 800b5c0:	e09c      	b.n	800b6fc <xTaskIncrementTick+0x1c4>
 800b5c2:	4b60      	ldr	r3, [pc, #384]	; (800b744 <xTaskIncrementTick+0x20c>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	68db      	ldr	r3, [r3, #12]
 800b5c8:	68db      	ldr	r3, [r3, #12]
 800b5ca:	61bb      	str	r3, [r7, #24]
 800b5cc:	69bb      	ldr	r3, [r7, #24]
 800b5ce:	685b      	ldr	r3, [r3, #4]
 800b5d0:	617b      	str	r3, [r7, #20]
 800b5d2:	6a3a      	ldr	r2, [r7, #32]
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	429a      	cmp	r2, r3
 800b5d8:	d203      	bcs.n	800b5e2 <xTaskIncrementTick+0xaa>
 800b5da:	4a5d      	ldr	r2, [pc, #372]	; (800b750 <xTaskIncrementTick+0x218>)
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	6013      	str	r3, [r2, #0]
 800b5e0:	e08c      	b.n	800b6fc <xTaskIncrementTick+0x1c4>
 800b5e2:	69bb      	ldr	r3, [r7, #24]
 800b5e4:	695b      	ldr	r3, [r3, #20]
 800b5e6:	613b      	str	r3, [r7, #16]
 800b5e8:	69bb      	ldr	r3, [r7, #24]
 800b5ea:	689b      	ldr	r3, [r3, #8]
 800b5ec:	69ba      	ldr	r2, [r7, #24]
 800b5ee:	68d2      	ldr	r2, [r2, #12]
 800b5f0:	609a      	str	r2, [r3, #8]
 800b5f2:	69bb      	ldr	r3, [r7, #24]
 800b5f4:	68db      	ldr	r3, [r3, #12]
 800b5f6:	69ba      	ldr	r2, [r7, #24]
 800b5f8:	6892      	ldr	r2, [r2, #8]
 800b5fa:	605a      	str	r2, [r3, #4]
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	685a      	ldr	r2, [r3, #4]
 800b600:	69bb      	ldr	r3, [r7, #24]
 800b602:	3304      	adds	r3, #4
 800b604:	429a      	cmp	r2, r3
 800b606:	d103      	bne.n	800b610 <xTaskIncrementTick+0xd8>
 800b608:	69bb      	ldr	r3, [r7, #24]
 800b60a:	68da      	ldr	r2, [r3, #12]
 800b60c:	693b      	ldr	r3, [r7, #16]
 800b60e:	605a      	str	r2, [r3, #4]
 800b610:	69bb      	ldr	r3, [r7, #24]
 800b612:	2200      	movs	r2, #0
 800b614:	615a      	str	r2, [r3, #20]
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	1e5a      	subs	r2, r3, #1
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	601a      	str	r2, [r3, #0]
 800b620:	69bb      	ldr	r3, [r7, #24]
 800b622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b624:	2b00      	cmp	r3, #0
 800b626:	d01e      	beq.n	800b666 <xTaskIncrementTick+0x12e>
 800b628:	69bb      	ldr	r3, [r7, #24]
 800b62a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b62c:	60fb      	str	r3, [r7, #12]
 800b62e:	69bb      	ldr	r3, [r7, #24]
 800b630:	69db      	ldr	r3, [r3, #28]
 800b632:	69ba      	ldr	r2, [r7, #24]
 800b634:	6a12      	ldr	r2, [r2, #32]
 800b636:	609a      	str	r2, [r3, #8]
 800b638:	69bb      	ldr	r3, [r7, #24]
 800b63a:	6a1b      	ldr	r3, [r3, #32]
 800b63c:	69ba      	ldr	r2, [r7, #24]
 800b63e:	69d2      	ldr	r2, [r2, #28]
 800b640:	605a      	str	r2, [r3, #4]
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	685a      	ldr	r2, [r3, #4]
 800b646:	69bb      	ldr	r3, [r7, #24]
 800b648:	3318      	adds	r3, #24
 800b64a:	429a      	cmp	r2, r3
 800b64c:	d103      	bne.n	800b656 <xTaskIncrementTick+0x11e>
 800b64e:	69bb      	ldr	r3, [r7, #24]
 800b650:	6a1a      	ldr	r2, [r3, #32]
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	605a      	str	r2, [r3, #4]
 800b656:	69bb      	ldr	r3, [r7, #24]
 800b658:	2200      	movs	r2, #0
 800b65a:	629a      	str	r2, [r3, #40]	; 0x28
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	1e5a      	subs	r2, r3, #1
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	601a      	str	r2, [r3, #0]
 800b666:	69bb      	ldr	r3, [r7, #24]
 800b668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b66a:	4b3a      	ldr	r3, [pc, #232]	; (800b754 <xTaskIncrementTick+0x21c>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	429a      	cmp	r2, r3
 800b670:	d903      	bls.n	800b67a <xTaskIncrementTick+0x142>
 800b672:	69bb      	ldr	r3, [r7, #24]
 800b674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b676:	4a37      	ldr	r2, [pc, #220]	; (800b754 <xTaskIncrementTick+0x21c>)
 800b678:	6013      	str	r3, [r2, #0]
 800b67a:	69bb      	ldr	r3, [r7, #24]
 800b67c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b67e:	4936      	ldr	r1, [pc, #216]	; (800b758 <xTaskIncrementTick+0x220>)
 800b680:	4613      	mov	r3, r2
 800b682:	009b      	lsls	r3, r3, #2
 800b684:	4413      	add	r3, r2
 800b686:	009b      	lsls	r3, r3, #2
 800b688:	440b      	add	r3, r1
 800b68a:	3304      	adds	r3, #4
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	60bb      	str	r3, [r7, #8]
 800b690:	69bb      	ldr	r3, [r7, #24]
 800b692:	68ba      	ldr	r2, [r7, #8]
 800b694:	609a      	str	r2, [r3, #8]
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	689a      	ldr	r2, [r3, #8]
 800b69a:	69bb      	ldr	r3, [r7, #24]
 800b69c:	60da      	str	r2, [r3, #12]
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	689b      	ldr	r3, [r3, #8]
 800b6a2:	69ba      	ldr	r2, [r7, #24]
 800b6a4:	3204      	adds	r2, #4
 800b6a6:	605a      	str	r2, [r3, #4]
 800b6a8:	69bb      	ldr	r3, [r7, #24]
 800b6aa:	1d1a      	adds	r2, r3, #4
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	609a      	str	r2, [r3, #8]
 800b6b0:	69bb      	ldr	r3, [r7, #24]
 800b6b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6b4:	4613      	mov	r3, r2
 800b6b6:	009b      	lsls	r3, r3, #2
 800b6b8:	4413      	add	r3, r2
 800b6ba:	009b      	lsls	r3, r3, #2
 800b6bc:	4a26      	ldr	r2, [pc, #152]	; (800b758 <xTaskIncrementTick+0x220>)
 800b6be:	441a      	add	r2, r3
 800b6c0:	69bb      	ldr	r3, [r7, #24]
 800b6c2:	615a      	str	r2, [r3, #20]
 800b6c4:	69bb      	ldr	r3, [r7, #24]
 800b6c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6c8:	4923      	ldr	r1, [pc, #140]	; (800b758 <xTaskIncrementTick+0x220>)
 800b6ca:	4613      	mov	r3, r2
 800b6cc:	009b      	lsls	r3, r3, #2
 800b6ce:	4413      	add	r3, r2
 800b6d0:	009b      	lsls	r3, r3, #2
 800b6d2:	440b      	add	r3, r1
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	1c59      	adds	r1, r3, #1
 800b6d8:	481f      	ldr	r0, [pc, #124]	; (800b758 <xTaskIncrementTick+0x220>)
 800b6da:	4613      	mov	r3, r2
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	4413      	add	r3, r2
 800b6e0:	009b      	lsls	r3, r3, #2
 800b6e2:	4403      	add	r3, r0
 800b6e4:	6019      	str	r1, [r3, #0]
 800b6e6:	69bb      	ldr	r3, [r7, #24]
 800b6e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6ea:	4b1c      	ldr	r3, [pc, #112]	; (800b75c <xTaskIncrementTick+0x224>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	f67f af5c 	bls.w	800b5ae <xTaskIncrementTick+0x76>
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	627b      	str	r3, [r7, #36]	; 0x24
 800b6fa:	e758      	b.n	800b5ae <xTaskIncrementTick+0x76>
 800b6fc:	4b17      	ldr	r3, [pc, #92]	; (800b75c <xTaskIncrementTick+0x224>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b702:	4915      	ldr	r1, [pc, #84]	; (800b758 <xTaskIncrementTick+0x220>)
 800b704:	4613      	mov	r3, r2
 800b706:	009b      	lsls	r3, r3, #2
 800b708:	4413      	add	r3, r2
 800b70a:	009b      	lsls	r3, r3, #2
 800b70c:	440b      	add	r3, r1
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	2b01      	cmp	r3, #1
 800b712:	d901      	bls.n	800b718 <xTaskIncrementTick+0x1e0>
 800b714:	2301      	movs	r3, #1
 800b716:	627b      	str	r3, [r7, #36]	; 0x24
 800b718:	4b11      	ldr	r3, [pc, #68]	; (800b760 <xTaskIncrementTick+0x228>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d007      	beq.n	800b730 <xTaskIncrementTick+0x1f8>
 800b720:	2301      	movs	r3, #1
 800b722:	627b      	str	r3, [r7, #36]	; 0x24
 800b724:	e004      	b.n	800b730 <xTaskIncrementTick+0x1f8>
 800b726:	4b0f      	ldr	r3, [pc, #60]	; (800b764 <xTaskIncrementTick+0x22c>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	3301      	adds	r3, #1
 800b72c:	4a0d      	ldr	r2, [pc, #52]	; (800b764 <xTaskIncrementTick+0x22c>)
 800b72e:	6013      	str	r3, [r2, #0]
 800b730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b732:	4618      	mov	r0, r3
 800b734:	3728      	adds	r7, #40	; 0x28
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}
 800b73a:	bf00      	nop
 800b73c:	200001f4 	.word	0x200001f4
 800b740:	200001d0 	.word	0x200001d0
 800b744:	20000184 	.word	0x20000184
 800b748:	20000188 	.word	0x20000188
 800b74c:	200001e4 	.word	0x200001e4
 800b750:	200001ec 	.word	0x200001ec
 800b754:	200001d4 	.word	0x200001d4
 800b758:	200000f8 	.word	0x200000f8
 800b75c:	200000f4 	.word	0x200000f4
 800b760:	200001e0 	.word	0x200001e0
 800b764:	200001dc 	.word	0x200001dc

0800b768 <vTaskSwitchContext>:
 800b768:	b480      	push	{r7}
 800b76a:	b085      	sub	sp, #20
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	4b27      	ldr	r3, [pc, #156]	; (800b80c <vTaskSwitchContext+0xa4>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d003      	beq.n	800b77e <vTaskSwitchContext+0x16>
 800b776:	4b26      	ldr	r3, [pc, #152]	; (800b810 <vTaskSwitchContext+0xa8>)
 800b778:	2201      	movs	r2, #1
 800b77a:	601a      	str	r2, [r3, #0]
 800b77c:	e041      	b.n	800b802 <vTaskSwitchContext+0x9a>
 800b77e:	4b24      	ldr	r3, [pc, #144]	; (800b810 <vTaskSwitchContext+0xa8>)
 800b780:	2200      	movs	r2, #0
 800b782:	601a      	str	r2, [r3, #0]
 800b784:	4b23      	ldr	r3, [pc, #140]	; (800b814 <vTaskSwitchContext+0xac>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	60fb      	str	r3, [r7, #12]
 800b78a:	e010      	b.n	800b7ae <vTaskSwitchContext+0x46>
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d10a      	bne.n	800b7a8 <vTaskSwitchContext+0x40>
 800b792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b796:	f383 8811 	msr	BASEPRI, r3
 800b79a:	f3bf 8f6f 	isb	sy
 800b79e:	f3bf 8f4f 	dsb	sy
 800b7a2:	607b      	str	r3, [r7, #4]
 800b7a4:	bf00      	nop
 800b7a6:	e7fe      	b.n	800b7a6 <vTaskSwitchContext+0x3e>
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	3b01      	subs	r3, #1
 800b7ac:	60fb      	str	r3, [r7, #12]
 800b7ae:	491a      	ldr	r1, [pc, #104]	; (800b818 <vTaskSwitchContext+0xb0>)
 800b7b0:	68fa      	ldr	r2, [r7, #12]
 800b7b2:	4613      	mov	r3, r2
 800b7b4:	009b      	lsls	r3, r3, #2
 800b7b6:	4413      	add	r3, r2
 800b7b8:	009b      	lsls	r3, r3, #2
 800b7ba:	440b      	add	r3, r1
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d0e4      	beq.n	800b78c <vTaskSwitchContext+0x24>
 800b7c2:	68fa      	ldr	r2, [r7, #12]
 800b7c4:	4613      	mov	r3, r2
 800b7c6:	009b      	lsls	r3, r3, #2
 800b7c8:	4413      	add	r3, r2
 800b7ca:	009b      	lsls	r3, r3, #2
 800b7cc:	4a12      	ldr	r2, [pc, #72]	; (800b818 <vTaskSwitchContext+0xb0>)
 800b7ce:	4413      	add	r3, r2
 800b7d0:	60bb      	str	r3, [r7, #8]
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	685b      	ldr	r3, [r3, #4]
 800b7d6:	685a      	ldr	r2, [r3, #4]
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	605a      	str	r2, [r3, #4]
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	685a      	ldr	r2, [r3, #4]
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	3308      	adds	r3, #8
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d104      	bne.n	800b7f2 <vTaskSwitchContext+0x8a>
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	685b      	ldr	r3, [r3, #4]
 800b7ec:	685a      	ldr	r2, [r3, #4]
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	605a      	str	r2, [r3, #4]
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	685b      	ldr	r3, [r3, #4]
 800b7f6:	68db      	ldr	r3, [r3, #12]
 800b7f8:	4a08      	ldr	r2, [pc, #32]	; (800b81c <vTaskSwitchContext+0xb4>)
 800b7fa:	6013      	str	r3, [r2, #0]
 800b7fc:	4a05      	ldr	r2, [pc, #20]	; (800b814 <vTaskSwitchContext+0xac>)
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	6013      	str	r3, [r2, #0]
 800b802:	bf00      	nop
 800b804:	3714      	adds	r7, #20
 800b806:	46bd      	mov	sp, r7
 800b808:	bc80      	pop	{r7}
 800b80a:	4770      	bx	lr
 800b80c:	200001f4 	.word	0x200001f4
 800b810:	200001e0 	.word	0x200001e0
 800b814:	200001d4 	.word	0x200001d4
 800b818:	200000f8 	.word	0x200000f8
 800b81c:	200000f4 	.word	0x200000f4

0800b820 <vTaskPlaceOnEventList>:
 800b820:	b580      	push	{r7, lr}
 800b822:	b084      	sub	sp, #16
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
 800b828:	6039      	str	r1, [r7, #0]
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d10a      	bne.n	800b846 <vTaskPlaceOnEventList+0x26>
 800b830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b834:	f383 8811 	msr	BASEPRI, r3
 800b838:	f3bf 8f6f 	isb	sy
 800b83c:	f3bf 8f4f 	dsb	sy
 800b840:	60fb      	str	r3, [r7, #12]
 800b842:	bf00      	nop
 800b844:	e7fe      	b.n	800b844 <vTaskPlaceOnEventList+0x24>
 800b846:	4b07      	ldr	r3, [pc, #28]	; (800b864 <vTaskPlaceOnEventList+0x44>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	3318      	adds	r3, #24
 800b84c:	4619      	mov	r1, r3
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f000 ffff 	bl	800c852 <vListInsert>
 800b854:	2101      	movs	r1, #1
 800b856:	6838      	ldr	r0, [r7, #0]
 800b858:	f000 fcbc 	bl	800c1d4 <prvAddCurrentTaskToDelayedList>
 800b85c:	bf00      	nop
 800b85e:	3710      	adds	r7, #16
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}
 800b864:	200000f4 	.word	0x200000f4

0800b868 <vTaskPlaceOnEventListRestricted>:
 800b868:	b580      	push	{r7, lr}
 800b86a:	b086      	sub	sp, #24
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	60f8      	str	r0, [r7, #12]
 800b870:	60b9      	str	r1, [r7, #8]
 800b872:	607a      	str	r2, [r7, #4]
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d10a      	bne.n	800b890 <vTaskPlaceOnEventListRestricted+0x28>
 800b87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b87e:	f383 8811 	msr	BASEPRI, r3
 800b882:	f3bf 8f6f 	isb	sy
 800b886:	f3bf 8f4f 	dsb	sy
 800b88a:	613b      	str	r3, [r7, #16]
 800b88c:	bf00      	nop
 800b88e:	e7fe      	b.n	800b88e <vTaskPlaceOnEventListRestricted+0x26>
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	685b      	ldr	r3, [r3, #4]
 800b894:	617b      	str	r3, [r7, #20]
 800b896:	4b16      	ldr	r3, [pc, #88]	; (800b8f0 <vTaskPlaceOnEventListRestricted+0x88>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	697a      	ldr	r2, [r7, #20]
 800b89c:	61da      	str	r2, [r3, #28]
 800b89e:	4b14      	ldr	r3, [pc, #80]	; (800b8f0 <vTaskPlaceOnEventListRestricted+0x88>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	697a      	ldr	r2, [r7, #20]
 800b8a4:	6892      	ldr	r2, [r2, #8]
 800b8a6:	621a      	str	r2, [r3, #32]
 800b8a8:	4b11      	ldr	r3, [pc, #68]	; (800b8f0 <vTaskPlaceOnEventListRestricted+0x88>)
 800b8aa:	681a      	ldr	r2, [r3, #0]
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	689b      	ldr	r3, [r3, #8]
 800b8b0:	3218      	adds	r2, #24
 800b8b2:	605a      	str	r2, [r3, #4]
 800b8b4:	4b0e      	ldr	r3, [pc, #56]	; (800b8f0 <vTaskPlaceOnEventListRestricted+0x88>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f103 0218 	add.w	r2, r3, #24
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	609a      	str	r2, [r3, #8]
 800b8c0:	4b0b      	ldr	r3, [pc, #44]	; (800b8f0 <vTaskPlaceOnEventListRestricted+0x88>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	68fa      	ldr	r2, [r7, #12]
 800b8c6:	629a      	str	r2, [r3, #40]	; 0x28
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	1c5a      	adds	r2, r3, #1
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	601a      	str	r2, [r3, #0]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d002      	beq.n	800b8de <vTaskPlaceOnEventListRestricted+0x76>
 800b8d8:	f04f 33ff 	mov.w	r3, #4294967295
 800b8dc:	60bb      	str	r3, [r7, #8]
 800b8de:	6879      	ldr	r1, [r7, #4]
 800b8e0:	68b8      	ldr	r0, [r7, #8]
 800b8e2:	f000 fc77 	bl	800c1d4 <prvAddCurrentTaskToDelayedList>
 800b8e6:	bf00      	nop
 800b8e8:	3718      	adds	r7, #24
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}
 800b8ee:	bf00      	nop
 800b8f0:	200000f4 	.word	0x200000f4

0800b8f4 <xTaskRemoveFromEventList>:
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b08a      	sub	sp, #40	; 0x28
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	68db      	ldr	r3, [r3, #12]
 800b900:	68db      	ldr	r3, [r3, #12]
 800b902:	623b      	str	r3, [r7, #32]
 800b904:	6a3b      	ldr	r3, [r7, #32]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d10a      	bne.n	800b920 <xTaskRemoveFromEventList+0x2c>
 800b90a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b90e:	f383 8811 	msr	BASEPRI, r3
 800b912:	f3bf 8f6f 	isb	sy
 800b916:	f3bf 8f4f 	dsb	sy
 800b91a:	60fb      	str	r3, [r7, #12]
 800b91c:	bf00      	nop
 800b91e:	e7fe      	b.n	800b91e <xTaskRemoveFromEventList+0x2a>
 800b920:	6a3b      	ldr	r3, [r7, #32]
 800b922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b924:	61fb      	str	r3, [r7, #28]
 800b926:	6a3b      	ldr	r3, [r7, #32]
 800b928:	69db      	ldr	r3, [r3, #28]
 800b92a:	6a3a      	ldr	r2, [r7, #32]
 800b92c:	6a12      	ldr	r2, [r2, #32]
 800b92e:	609a      	str	r2, [r3, #8]
 800b930:	6a3b      	ldr	r3, [r7, #32]
 800b932:	6a1b      	ldr	r3, [r3, #32]
 800b934:	6a3a      	ldr	r2, [r7, #32]
 800b936:	69d2      	ldr	r2, [r2, #28]
 800b938:	605a      	str	r2, [r3, #4]
 800b93a:	69fb      	ldr	r3, [r7, #28]
 800b93c:	685a      	ldr	r2, [r3, #4]
 800b93e:	6a3b      	ldr	r3, [r7, #32]
 800b940:	3318      	adds	r3, #24
 800b942:	429a      	cmp	r2, r3
 800b944:	d103      	bne.n	800b94e <xTaskRemoveFromEventList+0x5a>
 800b946:	6a3b      	ldr	r3, [r7, #32]
 800b948:	6a1a      	ldr	r2, [r3, #32]
 800b94a:	69fb      	ldr	r3, [r7, #28]
 800b94c:	605a      	str	r2, [r3, #4]
 800b94e:	6a3b      	ldr	r3, [r7, #32]
 800b950:	2200      	movs	r2, #0
 800b952:	629a      	str	r2, [r3, #40]	; 0x28
 800b954:	69fb      	ldr	r3, [r7, #28]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	1e5a      	subs	r2, r3, #1
 800b95a:	69fb      	ldr	r3, [r7, #28]
 800b95c:	601a      	str	r2, [r3, #0]
 800b95e:	4b4b      	ldr	r3, [pc, #300]	; (800ba8c <xTaskRemoveFromEventList+0x198>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d161      	bne.n	800ba2a <xTaskRemoveFromEventList+0x136>
 800b966:	6a3b      	ldr	r3, [r7, #32]
 800b968:	695b      	ldr	r3, [r3, #20]
 800b96a:	617b      	str	r3, [r7, #20]
 800b96c:	6a3b      	ldr	r3, [r7, #32]
 800b96e:	689b      	ldr	r3, [r3, #8]
 800b970:	6a3a      	ldr	r2, [r7, #32]
 800b972:	68d2      	ldr	r2, [r2, #12]
 800b974:	609a      	str	r2, [r3, #8]
 800b976:	6a3b      	ldr	r3, [r7, #32]
 800b978:	68db      	ldr	r3, [r3, #12]
 800b97a:	6a3a      	ldr	r2, [r7, #32]
 800b97c:	6892      	ldr	r2, [r2, #8]
 800b97e:	605a      	str	r2, [r3, #4]
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	685a      	ldr	r2, [r3, #4]
 800b984:	6a3b      	ldr	r3, [r7, #32]
 800b986:	3304      	adds	r3, #4
 800b988:	429a      	cmp	r2, r3
 800b98a:	d103      	bne.n	800b994 <xTaskRemoveFromEventList+0xa0>
 800b98c:	6a3b      	ldr	r3, [r7, #32]
 800b98e:	68da      	ldr	r2, [r3, #12]
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	605a      	str	r2, [r3, #4]
 800b994:	6a3b      	ldr	r3, [r7, #32]
 800b996:	2200      	movs	r2, #0
 800b998:	615a      	str	r2, [r3, #20]
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	1e5a      	subs	r2, r3, #1
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	601a      	str	r2, [r3, #0]
 800b9a4:	6a3b      	ldr	r3, [r7, #32]
 800b9a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9a8:	4b39      	ldr	r3, [pc, #228]	; (800ba90 <xTaskRemoveFromEventList+0x19c>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	429a      	cmp	r2, r3
 800b9ae:	d903      	bls.n	800b9b8 <xTaskRemoveFromEventList+0xc4>
 800b9b0:	6a3b      	ldr	r3, [r7, #32]
 800b9b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b4:	4a36      	ldr	r2, [pc, #216]	; (800ba90 <xTaskRemoveFromEventList+0x19c>)
 800b9b6:	6013      	str	r3, [r2, #0]
 800b9b8:	6a3b      	ldr	r3, [r7, #32]
 800b9ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9bc:	4935      	ldr	r1, [pc, #212]	; (800ba94 <xTaskRemoveFromEventList+0x1a0>)
 800b9be:	4613      	mov	r3, r2
 800b9c0:	009b      	lsls	r3, r3, #2
 800b9c2:	4413      	add	r3, r2
 800b9c4:	009b      	lsls	r3, r3, #2
 800b9c6:	440b      	add	r3, r1
 800b9c8:	3304      	adds	r3, #4
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	613b      	str	r3, [r7, #16]
 800b9ce:	6a3b      	ldr	r3, [r7, #32]
 800b9d0:	693a      	ldr	r2, [r7, #16]
 800b9d2:	609a      	str	r2, [r3, #8]
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	689a      	ldr	r2, [r3, #8]
 800b9d8:	6a3b      	ldr	r3, [r7, #32]
 800b9da:	60da      	str	r2, [r3, #12]
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	689b      	ldr	r3, [r3, #8]
 800b9e0:	6a3a      	ldr	r2, [r7, #32]
 800b9e2:	3204      	adds	r2, #4
 800b9e4:	605a      	str	r2, [r3, #4]
 800b9e6:	6a3b      	ldr	r3, [r7, #32]
 800b9e8:	1d1a      	adds	r2, r3, #4
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	609a      	str	r2, [r3, #8]
 800b9ee:	6a3b      	ldr	r3, [r7, #32]
 800b9f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9f2:	4613      	mov	r3, r2
 800b9f4:	009b      	lsls	r3, r3, #2
 800b9f6:	4413      	add	r3, r2
 800b9f8:	009b      	lsls	r3, r3, #2
 800b9fa:	4a26      	ldr	r2, [pc, #152]	; (800ba94 <xTaskRemoveFromEventList+0x1a0>)
 800b9fc:	441a      	add	r2, r3
 800b9fe:	6a3b      	ldr	r3, [r7, #32]
 800ba00:	615a      	str	r2, [r3, #20]
 800ba02:	6a3b      	ldr	r3, [r7, #32]
 800ba04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba06:	4923      	ldr	r1, [pc, #140]	; (800ba94 <xTaskRemoveFromEventList+0x1a0>)
 800ba08:	4613      	mov	r3, r2
 800ba0a:	009b      	lsls	r3, r3, #2
 800ba0c:	4413      	add	r3, r2
 800ba0e:	009b      	lsls	r3, r3, #2
 800ba10:	440b      	add	r3, r1
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	1c59      	adds	r1, r3, #1
 800ba16:	481f      	ldr	r0, [pc, #124]	; (800ba94 <xTaskRemoveFromEventList+0x1a0>)
 800ba18:	4613      	mov	r3, r2
 800ba1a:	009b      	lsls	r3, r3, #2
 800ba1c:	4413      	add	r3, r2
 800ba1e:	009b      	lsls	r3, r3, #2
 800ba20:	4403      	add	r3, r0
 800ba22:	6019      	str	r1, [r3, #0]
 800ba24:	f000 f9ba 	bl	800bd9c <prvResetNextTaskUnblockTime>
 800ba28:	e01b      	b.n	800ba62 <xTaskRemoveFromEventList+0x16e>
 800ba2a:	4b1b      	ldr	r3, [pc, #108]	; (800ba98 <xTaskRemoveFromEventList+0x1a4>)
 800ba2c:	685b      	ldr	r3, [r3, #4]
 800ba2e:	61bb      	str	r3, [r7, #24]
 800ba30:	6a3b      	ldr	r3, [r7, #32]
 800ba32:	69ba      	ldr	r2, [r7, #24]
 800ba34:	61da      	str	r2, [r3, #28]
 800ba36:	69bb      	ldr	r3, [r7, #24]
 800ba38:	689a      	ldr	r2, [r3, #8]
 800ba3a:	6a3b      	ldr	r3, [r7, #32]
 800ba3c:	621a      	str	r2, [r3, #32]
 800ba3e:	69bb      	ldr	r3, [r7, #24]
 800ba40:	689b      	ldr	r3, [r3, #8]
 800ba42:	6a3a      	ldr	r2, [r7, #32]
 800ba44:	3218      	adds	r2, #24
 800ba46:	605a      	str	r2, [r3, #4]
 800ba48:	6a3b      	ldr	r3, [r7, #32]
 800ba4a:	f103 0218 	add.w	r2, r3, #24
 800ba4e:	69bb      	ldr	r3, [r7, #24]
 800ba50:	609a      	str	r2, [r3, #8]
 800ba52:	6a3b      	ldr	r3, [r7, #32]
 800ba54:	4a10      	ldr	r2, [pc, #64]	; (800ba98 <xTaskRemoveFromEventList+0x1a4>)
 800ba56:	629a      	str	r2, [r3, #40]	; 0x28
 800ba58:	4b0f      	ldr	r3, [pc, #60]	; (800ba98 <xTaskRemoveFromEventList+0x1a4>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	3301      	adds	r3, #1
 800ba5e:	4a0e      	ldr	r2, [pc, #56]	; (800ba98 <xTaskRemoveFromEventList+0x1a4>)
 800ba60:	6013      	str	r3, [r2, #0]
 800ba62:	6a3b      	ldr	r3, [r7, #32]
 800ba64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba66:	4b0d      	ldr	r3, [pc, #52]	; (800ba9c <xTaskRemoveFromEventList+0x1a8>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba6c:	429a      	cmp	r2, r3
 800ba6e:	d905      	bls.n	800ba7c <xTaskRemoveFromEventList+0x188>
 800ba70:	2301      	movs	r3, #1
 800ba72:	627b      	str	r3, [r7, #36]	; 0x24
 800ba74:	4b0a      	ldr	r3, [pc, #40]	; (800baa0 <xTaskRemoveFromEventList+0x1ac>)
 800ba76:	2201      	movs	r2, #1
 800ba78:	601a      	str	r2, [r3, #0]
 800ba7a:	e001      	b.n	800ba80 <xTaskRemoveFromEventList+0x18c>
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	627b      	str	r3, [r7, #36]	; 0x24
 800ba80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba82:	4618      	mov	r0, r3
 800ba84:	3728      	adds	r7, #40	; 0x28
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}
 800ba8a:	bf00      	nop
 800ba8c:	200001f4 	.word	0x200001f4
 800ba90:	200001d4 	.word	0x200001d4
 800ba94:	200000f8 	.word	0x200000f8
 800ba98:	2000018c 	.word	0x2000018c
 800ba9c:	200000f4 	.word	0x200000f4
 800baa0:	200001e0 	.word	0x200001e0

0800baa4 <vTaskInternalSetTimeOutState>:
 800baa4:	b480      	push	{r7}
 800baa6:	b083      	sub	sp, #12
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
 800baac:	4b06      	ldr	r3, [pc, #24]	; (800bac8 <vTaskInternalSetTimeOutState+0x24>)
 800baae:	681a      	ldr	r2, [r3, #0]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	601a      	str	r2, [r3, #0]
 800bab4:	4b05      	ldr	r3, [pc, #20]	; (800bacc <vTaskInternalSetTimeOutState+0x28>)
 800bab6:	681a      	ldr	r2, [r3, #0]
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	605a      	str	r2, [r3, #4]
 800babc:	bf00      	nop
 800babe:	370c      	adds	r7, #12
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bc80      	pop	{r7}
 800bac4:	4770      	bx	lr
 800bac6:	bf00      	nop
 800bac8:	200001e4 	.word	0x200001e4
 800bacc:	200001d0 	.word	0x200001d0

0800bad0 <xTaskCheckForTimeOut>:
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b088      	sub	sp, #32
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	6039      	str	r1, [r7, #0]
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d10a      	bne.n	800baf6 <xTaskCheckForTimeOut+0x26>
 800bae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae4:	f383 8811 	msr	BASEPRI, r3
 800bae8:	f3bf 8f6f 	isb	sy
 800baec:	f3bf 8f4f 	dsb	sy
 800baf0:	613b      	str	r3, [r7, #16]
 800baf2:	bf00      	nop
 800baf4:	e7fe      	b.n	800baf4 <xTaskCheckForTimeOut+0x24>
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d10a      	bne.n	800bb12 <xTaskCheckForTimeOut+0x42>
 800bafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb00:	f383 8811 	msr	BASEPRI, r3
 800bb04:	f3bf 8f6f 	isb	sy
 800bb08:	f3bf 8f4f 	dsb	sy
 800bb0c:	60fb      	str	r3, [r7, #12]
 800bb0e:	bf00      	nop
 800bb10:	e7fe      	b.n	800bb10 <xTaskCheckForTimeOut+0x40>
 800bb12:	f000 fff5 	bl	800cb00 <vPortEnterCritical>
 800bb16:	4b1f      	ldr	r3, [pc, #124]	; (800bb94 <xTaskCheckForTimeOut+0xc4>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	61bb      	str	r3, [r7, #24]
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	685b      	ldr	r3, [r3, #4]
 800bb20:	69ba      	ldr	r2, [r7, #24]
 800bb22:	1ad3      	subs	r3, r2, r3
 800bb24:	617b      	str	r3, [r7, #20]
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb2e:	d102      	bne.n	800bb36 <xTaskCheckForTimeOut+0x66>
 800bb30:	2300      	movs	r3, #0
 800bb32:	61fb      	str	r3, [r7, #28]
 800bb34:	e026      	b.n	800bb84 <xTaskCheckForTimeOut+0xb4>
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681a      	ldr	r2, [r3, #0]
 800bb3a:	4b17      	ldr	r3, [pc, #92]	; (800bb98 <xTaskCheckForTimeOut+0xc8>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d00a      	beq.n	800bb58 <xTaskCheckForTimeOut+0x88>
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	685b      	ldr	r3, [r3, #4]
 800bb46:	69ba      	ldr	r2, [r7, #24]
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	d305      	bcc.n	800bb58 <xTaskCheckForTimeOut+0x88>
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	61fb      	str	r3, [r7, #28]
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	2200      	movs	r2, #0
 800bb54:	601a      	str	r2, [r3, #0]
 800bb56:	e015      	b.n	800bb84 <xTaskCheckForTimeOut+0xb4>
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	697a      	ldr	r2, [r7, #20]
 800bb5e:	429a      	cmp	r2, r3
 800bb60:	d20b      	bcs.n	800bb7a <xTaskCheckForTimeOut+0xaa>
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	681a      	ldr	r2, [r3, #0]
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	1ad2      	subs	r2, r2, r3
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	601a      	str	r2, [r3, #0]
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f7ff ff98 	bl	800baa4 <vTaskInternalSetTimeOutState>
 800bb74:	2300      	movs	r3, #0
 800bb76:	61fb      	str	r3, [r7, #28]
 800bb78:	e004      	b.n	800bb84 <xTaskCheckForTimeOut+0xb4>
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	601a      	str	r2, [r3, #0]
 800bb80:	2301      	movs	r3, #1
 800bb82:	61fb      	str	r3, [r7, #28]
 800bb84:	f000 ffec 	bl	800cb60 <vPortExitCritical>
 800bb88:	69fb      	ldr	r3, [r7, #28]
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3720      	adds	r7, #32
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}
 800bb92:	bf00      	nop
 800bb94:	200001d0 	.word	0x200001d0
 800bb98:	200001e4 	.word	0x200001e4

0800bb9c <vTaskMissedYield>:
 800bb9c:	b480      	push	{r7}
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	4b03      	ldr	r3, [pc, #12]	; (800bbb0 <vTaskMissedYield+0x14>)
 800bba2:	2201      	movs	r2, #1
 800bba4:	601a      	str	r2, [r3, #0]
 800bba6:	bf00      	nop
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bc80      	pop	{r7}
 800bbac:	4770      	bx	lr
 800bbae:	bf00      	nop
 800bbb0:	200001e0 	.word	0x200001e0

0800bbb4 <prvIdleTask>:
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b084      	sub	sp, #16
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
 800bbbc:	f000 f8b0 	bl	800bd20 <prvCheckTasksWaitingTermination>
 800bbc0:	4b18      	ldr	r3, [pc, #96]	; (800bc24 <prvIdleTask+0x70>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	2b01      	cmp	r3, #1
 800bbc6:	d907      	bls.n	800bbd8 <prvIdleTask+0x24>
 800bbc8:	4b17      	ldr	r3, [pc, #92]	; (800bc28 <prvIdleTask+0x74>)
 800bbca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbce:	601a      	str	r2, [r3, #0]
 800bbd0:	f3bf 8f4f 	dsb	sy
 800bbd4:	f3bf 8f6f 	isb	sy
 800bbd8:	f7ff fb0a 	bl	800b1f0 <prvGetExpectedIdleTime>
 800bbdc:	60f8      	str	r0, [r7, #12]
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	d9eb      	bls.n	800bbbc <prvIdleTask+0x8>
 800bbe4:	f7ff faf6 	bl	800b1d4 <vTaskSuspendAll>
 800bbe8:	4b10      	ldr	r3, [pc, #64]	; (800bc2c <prvIdleTask+0x78>)
 800bbea:	681a      	ldr	r2, [r3, #0]
 800bbec:	4b10      	ldr	r3, [pc, #64]	; (800bc30 <prvIdleTask+0x7c>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d20a      	bcs.n	800bc0a <prvIdleTask+0x56>
 800bbf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf8:	f383 8811 	msr	BASEPRI, r3
 800bbfc:	f3bf 8f6f 	isb	sy
 800bc00:	f3bf 8f4f 	dsb	sy
 800bc04:	60bb      	str	r3, [r7, #8]
 800bc06:	bf00      	nop
 800bc08:	e7fe      	b.n	800bc08 <prvIdleTask+0x54>
 800bc0a:	f7ff faf1 	bl	800b1f0 <prvGetExpectedIdleTime>
 800bc0e:	60f8      	str	r0, [r7, #12]
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	2b01      	cmp	r3, #1
 800bc14:	d902      	bls.n	800bc1c <prvIdleTask+0x68>
 800bc16:	68f8      	ldr	r0, [r7, #12]
 800bc18:	f001 f810 	bl	800cc3c <vPortSuppressTicksAndSleep>
 800bc1c:	f7ff fb1e 	bl	800b25c <xTaskResumeAll>
 800bc20:	e7cc      	b.n	800bbbc <prvIdleTask+0x8>
 800bc22:	bf00      	nop
 800bc24:	200000f8 	.word	0x200000f8
 800bc28:	e000ed04 	.word	0xe000ed04
 800bc2c:	200001ec 	.word	0x200001ec
 800bc30:	200001d0 	.word	0x200001d0

0800bc34 <eTaskConfirmSleepModeStatus>:
 800bc34:	b480      	push	{r7}
 800bc36:	b083      	sub	sp, #12
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	603b      	str	r3, [r7, #0]
 800bc3e:	2301      	movs	r3, #1
 800bc40:	71fb      	strb	r3, [r7, #7]
 800bc42:	4b12      	ldr	r3, [pc, #72]	; (800bc8c <eTaskConfirmSleepModeStatus+0x58>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d002      	beq.n	800bc50 <eTaskConfirmSleepModeStatus+0x1c>
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	71fb      	strb	r3, [r7, #7]
 800bc4e:	e017      	b.n	800bc80 <eTaskConfirmSleepModeStatus+0x4c>
 800bc50:	4b0f      	ldr	r3, [pc, #60]	; (800bc90 <eTaskConfirmSleepModeStatus+0x5c>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d002      	beq.n	800bc5e <eTaskConfirmSleepModeStatus+0x2a>
 800bc58:	2300      	movs	r3, #0
 800bc5a:	71fb      	strb	r3, [r7, #7]
 800bc5c:	e010      	b.n	800bc80 <eTaskConfirmSleepModeStatus+0x4c>
 800bc5e:	4b0d      	ldr	r3, [pc, #52]	; (800bc94 <eTaskConfirmSleepModeStatus+0x60>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d002      	beq.n	800bc6c <eTaskConfirmSleepModeStatus+0x38>
 800bc66:	2300      	movs	r3, #0
 800bc68:	71fb      	strb	r3, [r7, #7]
 800bc6a:	e009      	b.n	800bc80 <eTaskConfirmSleepModeStatus+0x4c>
 800bc6c:	4b0a      	ldr	r3, [pc, #40]	; (800bc98 <eTaskConfirmSleepModeStatus+0x64>)
 800bc6e:	681a      	ldr	r2, [r3, #0]
 800bc70:	4b0a      	ldr	r3, [pc, #40]	; (800bc9c <eTaskConfirmSleepModeStatus+0x68>)
 800bc72:	6819      	ldr	r1, [r3, #0]
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	1acb      	subs	r3, r1, r3
 800bc78:	429a      	cmp	r2, r3
 800bc7a:	d101      	bne.n	800bc80 <eTaskConfirmSleepModeStatus+0x4c>
 800bc7c:	2302      	movs	r3, #2
 800bc7e:	71fb      	strb	r3, [r7, #7]
 800bc80:	79fb      	ldrb	r3, [r7, #7]
 800bc82:	4618      	mov	r0, r3
 800bc84:	370c      	adds	r7, #12
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bc80      	pop	{r7}
 800bc8a:	4770      	bx	lr
 800bc8c:	2000018c 	.word	0x2000018c
 800bc90:	200001e0 	.word	0x200001e0
 800bc94:	200001dc 	.word	0x200001dc
 800bc98:	200001b8 	.word	0x200001b8
 800bc9c:	200001cc 	.word	0x200001cc

0800bca0 <prvInitialiseTaskLists>:
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b082      	sub	sp, #8
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	2300      	movs	r3, #0
 800bca8:	607b      	str	r3, [r7, #4]
 800bcaa:	e00c      	b.n	800bcc6 <prvInitialiseTaskLists+0x26>
 800bcac:	687a      	ldr	r2, [r7, #4]
 800bcae:	4613      	mov	r3, r2
 800bcb0:	009b      	lsls	r3, r3, #2
 800bcb2:	4413      	add	r3, r2
 800bcb4:	009b      	lsls	r3, r3, #2
 800bcb6:	4a12      	ldr	r2, [pc, #72]	; (800bd00 <prvInitialiseTaskLists+0x60>)
 800bcb8:	4413      	add	r3, r2
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f000 fd9e 	bl	800c7fc <vListInitialise>
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	3301      	adds	r3, #1
 800bcc4:	607b      	str	r3, [r7, #4]
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2b04      	cmp	r3, #4
 800bcca:	d9ef      	bls.n	800bcac <prvInitialiseTaskLists+0xc>
 800bccc:	480d      	ldr	r0, [pc, #52]	; (800bd04 <prvInitialiseTaskLists+0x64>)
 800bcce:	f000 fd95 	bl	800c7fc <vListInitialise>
 800bcd2:	480d      	ldr	r0, [pc, #52]	; (800bd08 <prvInitialiseTaskLists+0x68>)
 800bcd4:	f000 fd92 	bl	800c7fc <vListInitialise>
 800bcd8:	480c      	ldr	r0, [pc, #48]	; (800bd0c <prvInitialiseTaskLists+0x6c>)
 800bcda:	f000 fd8f 	bl	800c7fc <vListInitialise>
 800bcde:	480c      	ldr	r0, [pc, #48]	; (800bd10 <prvInitialiseTaskLists+0x70>)
 800bce0:	f000 fd8c 	bl	800c7fc <vListInitialise>
 800bce4:	480b      	ldr	r0, [pc, #44]	; (800bd14 <prvInitialiseTaskLists+0x74>)
 800bce6:	f000 fd89 	bl	800c7fc <vListInitialise>
 800bcea:	4b0b      	ldr	r3, [pc, #44]	; (800bd18 <prvInitialiseTaskLists+0x78>)
 800bcec:	4a05      	ldr	r2, [pc, #20]	; (800bd04 <prvInitialiseTaskLists+0x64>)
 800bcee:	601a      	str	r2, [r3, #0]
 800bcf0:	4b0a      	ldr	r3, [pc, #40]	; (800bd1c <prvInitialiseTaskLists+0x7c>)
 800bcf2:	4a05      	ldr	r2, [pc, #20]	; (800bd08 <prvInitialiseTaskLists+0x68>)
 800bcf4:	601a      	str	r2, [r3, #0]
 800bcf6:	bf00      	nop
 800bcf8:	3708      	adds	r7, #8
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}
 800bcfe:	bf00      	nop
 800bd00:	200000f8 	.word	0x200000f8
 800bd04:	2000015c 	.word	0x2000015c
 800bd08:	20000170 	.word	0x20000170
 800bd0c:	2000018c 	.word	0x2000018c
 800bd10:	200001a0 	.word	0x200001a0
 800bd14:	200001b8 	.word	0x200001b8
 800bd18:	20000184 	.word	0x20000184
 800bd1c:	20000188 	.word	0x20000188

0800bd20 <prvCheckTasksWaitingTermination>:
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b082      	sub	sp, #8
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	e019      	b.n	800bd5c <prvCheckTasksWaitingTermination+0x3c>
 800bd28:	f000 feea 	bl	800cb00 <vPortEnterCritical>
 800bd2c:	4b10      	ldr	r3, [pc, #64]	; (800bd70 <prvCheckTasksWaitingTermination+0x50>)
 800bd2e:	68db      	ldr	r3, [r3, #12]
 800bd30:	68db      	ldr	r3, [r3, #12]
 800bd32:	607b      	str	r3, [r7, #4]
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	3304      	adds	r3, #4
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f000 fdc2 	bl	800c8c2 <uxListRemove>
 800bd3e:	4b0d      	ldr	r3, [pc, #52]	; (800bd74 <prvCheckTasksWaitingTermination+0x54>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	3b01      	subs	r3, #1
 800bd44:	4a0b      	ldr	r2, [pc, #44]	; (800bd74 <prvCheckTasksWaitingTermination+0x54>)
 800bd46:	6013      	str	r3, [r2, #0]
 800bd48:	4b0b      	ldr	r3, [pc, #44]	; (800bd78 <prvCheckTasksWaitingTermination+0x58>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	3b01      	subs	r3, #1
 800bd4e:	4a0a      	ldr	r2, [pc, #40]	; (800bd78 <prvCheckTasksWaitingTermination+0x58>)
 800bd50:	6013      	str	r3, [r2, #0]
 800bd52:	f000 ff05 	bl	800cb60 <vPortExitCritical>
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f000 f810 	bl	800bd7c <prvDeleteTCB>
 800bd5c:	4b06      	ldr	r3, [pc, #24]	; (800bd78 <prvCheckTasksWaitingTermination+0x58>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d1e1      	bne.n	800bd28 <prvCheckTasksWaitingTermination+0x8>
 800bd64:	bf00      	nop
 800bd66:	bf00      	nop
 800bd68:	3708      	adds	r7, #8
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
 800bd6e:	bf00      	nop
 800bd70:	200001a0 	.word	0x200001a0
 800bd74:	200001cc 	.word	0x200001cc
 800bd78:	200001b4 	.word	0x200001b4

0800bd7c <prvDeleteTCB>:
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b082      	sub	sp, #8
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f000 fd25 	bl	800c7d8 <vPortFree>
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f000 fd22 	bl	800c7d8 <vPortFree>
 800bd94:	bf00      	nop
 800bd96:	3708      	adds	r7, #8
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd80      	pop	{r7, pc}

0800bd9c <prvResetNextTaskUnblockTime>:
 800bd9c:	b480      	push	{r7}
 800bd9e:	af00      	add	r7, sp, #0
 800bda0:	4b09      	ldr	r3, [pc, #36]	; (800bdc8 <prvResetNextTaskUnblockTime+0x2c>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d104      	bne.n	800bdb4 <prvResetNextTaskUnblockTime+0x18>
 800bdaa:	4b08      	ldr	r3, [pc, #32]	; (800bdcc <prvResetNextTaskUnblockTime+0x30>)
 800bdac:	f04f 32ff 	mov.w	r2, #4294967295
 800bdb0:	601a      	str	r2, [r3, #0]
 800bdb2:	e005      	b.n	800bdc0 <prvResetNextTaskUnblockTime+0x24>
 800bdb4:	4b04      	ldr	r3, [pc, #16]	; (800bdc8 <prvResetNextTaskUnblockTime+0x2c>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	68db      	ldr	r3, [r3, #12]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	4a03      	ldr	r2, [pc, #12]	; (800bdcc <prvResetNextTaskUnblockTime+0x30>)
 800bdbe:	6013      	str	r3, [r2, #0]
 800bdc0:	bf00      	nop
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bc80      	pop	{r7}
 800bdc6:	4770      	bx	lr
 800bdc8:	20000184 	.word	0x20000184
 800bdcc:	200001ec 	.word	0x200001ec

0800bdd0 <xTaskGetSchedulerState>:
 800bdd0:	b480      	push	{r7}
 800bdd2:	b083      	sub	sp, #12
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	4b0b      	ldr	r3, [pc, #44]	; (800be04 <xTaskGetSchedulerState+0x34>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d102      	bne.n	800bde4 <xTaskGetSchedulerState+0x14>
 800bdde:	2301      	movs	r3, #1
 800bde0:	607b      	str	r3, [r7, #4]
 800bde2:	e008      	b.n	800bdf6 <xTaskGetSchedulerState+0x26>
 800bde4:	4b08      	ldr	r3, [pc, #32]	; (800be08 <xTaskGetSchedulerState+0x38>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d102      	bne.n	800bdf2 <xTaskGetSchedulerState+0x22>
 800bdec:	2302      	movs	r3, #2
 800bdee:	607b      	str	r3, [r7, #4]
 800bdf0:	e001      	b.n	800bdf6 <xTaskGetSchedulerState+0x26>
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	607b      	str	r3, [r7, #4]
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	370c      	adds	r7, #12
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bc80      	pop	{r7}
 800be00:	4770      	bx	lr
 800be02:	bf00      	nop
 800be04:	200001d8 	.word	0x200001d8
 800be08:	200001f4 	.word	0x200001f4

0800be0c <xTaskPriorityInherit>:
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b086      	sub	sp, #24
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	613b      	str	r3, [r7, #16]
 800be18:	2300      	movs	r3, #0
 800be1a:	617b      	str	r3, [r7, #20]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d079      	beq.n	800bf16 <xTaskPriorityInherit+0x10a>
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be26:	4b3e      	ldr	r3, [pc, #248]	; (800bf20 <xTaskPriorityInherit+0x114>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d269      	bcs.n	800bf04 <xTaskPriorityInherit+0xf8>
 800be30:	693b      	ldr	r3, [r7, #16]
 800be32:	699b      	ldr	r3, [r3, #24]
 800be34:	2b00      	cmp	r3, #0
 800be36:	db06      	blt.n	800be46 <xTaskPriorityInherit+0x3a>
 800be38:	4b39      	ldr	r3, [pc, #228]	; (800bf20 <xTaskPriorityInherit+0x114>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be3e:	f1c3 0205 	rsb	r2, r3, #5
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	619a      	str	r2, [r3, #24]
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	6959      	ldr	r1, [r3, #20]
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be4e:	4613      	mov	r3, r2
 800be50:	009b      	lsls	r3, r3, #2
 800be52:	4413      	add	r3, r2
 800be54:	009b      	lsls	r3, r3, #2
 800be56:	4a33      	ldr	r2, [pc, #204]	; (800bf24 <xTaskPriorityInherit+0x118>)
 800be58:	4413      	add	r3, r2
 800be5a:	4299      	cmp	r1, r3
 800be5c:	d14a      	bne.n	800bef4 <xTaskPriorityInherit+0xe8>
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	3304      	adds	r3, #4
 800be62:	4618      	mov	r0, r3
 800be64:	f000 fd2d 	bl	800c8c2 <uxListRemove>
 800be68:	4b2d      	ldr	r3, [pc, #180]	; (800bf20 <xTaskPriorityInherit+0x114>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	62da      	str	r2, [r3, #44]	; 0x2c
 800be72:	693b      	ldr	r3, [r7, #16]
 800be74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be76:	4b2c      	ldr	r3, [pc, #176]	; (800bf28 <xTaskPriorityInherit+0x11c>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	429a      	cmp	r2, r3
 800be7c:	d903      	bls.n	800be86 <xTaskPriorityInherit+0x7a>
 800be7e:	693b      	ldr	r3, [r7, #16]
 800be80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be82:	4a29      	ldr	r2, [pc, #164]	; (800bf28 <xTaskPriorityInherit+0x11c>)
 800be84:	6013      	str	r3, [r2, #0]
 800be86:	693b      	ldr	r3, [r7, #16]
 800be88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be8a:	4926      	ldr	r1, [pc, #152]	; (800bf24 <xTaskPriorityInherit+0x118>)
 800be8c:	4613      	mov	r3, r2
 800be8e:	009b      	lsls	r3, r3, #2
 800be90:	4413      	add	r3, r2
 800be92:	009b      	lsls	r3, r3, #2
 800be94:	440b      	add	r3, r1
 800be96:	3304      	adds	r3, #4
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	60fb      	str	r3, [r7, #12]
 800be9c:	693b      	ldr	r3, [r7, #16]
 800be9e:	68fa      	ldr	r2, [r7, #12]
 800bea0:	609a      	str	r2, [r3, #8]
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	689a      	ldr	r2, [r3, #8]
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	60da      	str	r2, [r3, #12]
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	689b      	ldr	r3, [r3, #8]
 800beae:	693a      	ldr	r2, [r7, #16]
 800beb0:	3204      	adds	r2, #4
 800beb2:	605a      	str	r2, [r3, #4]
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	1d1a      	adds	r2, r3, #4
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	609a      	str	r2, [r3, #8]
 800bebc:	693b      	ldr	r3, [r7, #16]
 800bebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bec0:	4613      	mov	r3, r2
 800bec2:	009b      	lsls	r3, r3, #2
 800bec4:	4413      	add	r3, r2
 800bec6:	009b      	lsls	r3, r3, #2
 800bec8:	4a16      	ldr	r2, [pc, #88]	; (800bf24 <xTaskPriorityInherit+0x118>)
 800beca:	441a      	add	r2, r3
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	615a      	str	r2, [r3, #20]
 800bed0:	693b      	ldr	r3, [r7, #16]
 800bed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bed4:	4913      	ldr	r1, [pc, #76]	; (800bf24 <xTaskPriorityInherit+0x118>)
 800bed6:	4613      	mov	r3, r2
 800bed8:	009b      	lsls	r3, r3, #2
 800beda:	4413      	add	r3, r2
 800bedc:	009b      	lsls	r3, r3, #2
 800bede:	440b      	add	r3, r1
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	1c59      	adds	r1, r3, #1
 800bee4:	480f      	ldr	r0, [pc, #60]	; (800bf24 <xTaskPriorityInherit+0x118>)
 800bee6:	4613      	mov	r3, r2
 800bee8:	009b      	lsls	r3, r3, #2
 800beea:	4413      	add	r3, r2
 800beec:	009b      	lsls	r3, r3, #2
 800beee:	4403      	add	r3, r0
 800bef0:	6019      	str	r1, [r3, #0]
 800bef2:	e004      	b.n	800befe <xTaskPriorityInherit+0xf2>
 800bef4:	4b0a      	ldr	r3, [pc, #40]	; (800bf20 <xTaskPriorityInherit+0x114>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800befa:	693b      	ldr	r3, [r7, #16]
 800befc:	62da      	str	r2, [r3, #44]	; 0x2c
 800befe:	2301      	movs	r3, #1
 800bf00:	617b      	str	r3, [r7, #20]
 800bf02:	e008      	b.n	800bf16 <xTaskPriorityInherit+0x10a>
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bf08:	4b05      	ldr	r3, [pc, #20]	; (800bf20 <xTaskPriorityInherit+0x114>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d201      	bcs.n	800bf16 <xTaskPriorityInherit+0x10a>
 800bf12:	2301      	movs	r3, #1
 800bf14:	617b      	str	r3, [r7, #20]
 800bf16:	697b      	ldr	r3, [r7, #20]
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3718      	adds	r7, #24
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}
 800bf20:	200000f4 	.word	0x200000f4
 800bf24:	200000f8 	.word	0x200000f8
 800bf28:	200001d4 	.word	0x200001d4

0800bf2c <xTaskPriorityDisinherit>:
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b088      	sub	sp, #32
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	61bb      	str	r3, [r7, #24]
 800bf38:	2300      	movs	r3, #0
 800bf3a:	61fb      	str	r3, [r7, #28]
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d07e      	beq.n	800c040 <xTaskPriorityDisinherit+0x114>
 800bf42:	4b42      	ldr	r3, [pc, #264]	; (800c04c <xTaskPriorityDisinherit+0x120>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	69ba      	ldr	r2, [r7, #24]
 800bf48:	429a      	cmp	r2, r3
 800bf4a:	d00a      	beq.n	800bf62 <xTaskPriorityDisinherit+0x36>
 800bf4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf50:	f383 8811 	msr	BASEPRI, r3
 800bf54:	f3bf 8f6f 	isb	sy
 800bf58:	f3bf 8f4f 	dsb	sy
 800bf5c:	613b      	str	r3, [r7, #16]
 800bf5e:	bf00      	nop
 800bf60:	e7fe      	b.n	800bf60 <xTaskPriorityDisinherit+0x34>
 800bf62:	69bb      	ldr	r3, [r7, #24]
 800bf64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d10a      	bne.n	800bf80 <xTaskPriorityDisinherit+0x54>
 800bf6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf6e:	f383 8811 	msr	BASEPRI, r3
 800bf72:	f3bf 8f6f 	isb	sy
 800bf76:	f3bf 8f4f 	dsb	sy
 800bf7a:	60fb      	str	r3, [r7, #12]
 800bf7c:	bf00      	nop
 800bf7e:	e7fe      	b.n	800bf7e <xTaskPriorityDisinherit+0x52>
 800bf80:	69bb      	ldr	r3, [r7, #24]
 800bf82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf84:	1e5a      	subs	r2, r3, #1
 800bf86:	69bb      	ldr	r3, [r7, #24]
 800bf88:	655a      	str	r2, [r3, #84]	; 0x54
 800bf8a:	69bb      	ldr	r3, [r7, #24]
 800bf8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf8e:	69bb      	ldr	r3, [r7, #24]
 800bf90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf92:	429a      	cmp	r2, r3
 800bf94:	d054      	beq.n	800c040 <xTaskPriorityDisinherit+0x114>
 800bf96:	69bb      	ldr	r3, [r7, #24]
 800bf98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d150      	bne.n	800c040 <xTaskPriorityDisinherit+0x114>
 800bf9e:	69bb      	ldr	r3, [r7, #24]
 800bfa0:	3304      	adds	r3, #4
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f000 fc8d 	bl	800c8c2 <uxListRemove>
 800bfa8:	69bb      	ldr	r3, [r7, #24]
 800bfaa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bfac:	69bb      	ldr	r3, [r7, #24]
 800bfae:	62da      	str	r2, [r3, #44]	; 0x2c
 800bfb0:	69bb      	ldr	r3, [r7, #24]
 800bfb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfb4:	f1c3 0205 	rsb	r2, r3, #5
 800bfb8:	69bb      	ldr	r3, [r7, #24]
 800bfba:	619a      	str	r2, [r3, #24]
 800bfbc:	69bb      	ldr	r3, [r7, #24]
 800bfbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfc0:	4b23      	ldr	r3, [pc, #140]	; (800c050 <xTaskPriorityDisinherit+0x124>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	429a      	cmp	r2, r3
 800bfc6:	d903      	bls.n	800bfd0 <xTaskPriorityDisinherit+0xa4>
 800bfc8:	69bb      	ldr	r3, [r7, #24]
 800bfca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfcc:	4a20      	ldr	r2, [pc, #128]	; (800c050 <xTaskPriorityDisinherit+0x124>)
 800bfce:	6013      	str	r3, [r2, #0]
 800bfd0:	69bb      	ldr	r3, [r7, #24]
 800bfd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfd4:	491f      	ldr	r1, [pc, #124]	; (800c054 <xTaskPriorityDisinherit+0x128>)
 800bfd6:	4613      	mov	r3, r2
 800bfd8:	009b      	lsls	r3, r3, #2
 800bfda:	4413      	add	r3, r2
 800bfdc:	009b      	lsls	r3, r3, #2
 800bfde:	440b      	add	r3, r1
 800bfe0:	3304      	adds	r3, #4
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	617b      	str	r3, [r7, #20]
 800bfe6:	69bb      	ldr	r3, [r7, #24]
 800bfe8:	697a      	ldr	r2, [r7, #20]
 800bfea:	609a      	str	r2, [r3, #8]
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	689a      	ldr	r2, [r3, #8]
 800bff0:	69bb      	ldr	r3, [r7, #24]
 800bff2:	60da      	str	r2, [r3, #12]
 800bff4:	697b      	ldr	r3, [r7, #20]
 800bff6:	689b      	ldr	r3, [r3, #8]
 800bff8:	69ba      	ldr	r2, [r7, #24]
 800bffa:	3204      	adds	r2, #4
 800bffc:	605a      	str	r2, [r3, #4]
 800bffe:	69bb      	ldr	r3, [r7, #24]
 800c000:	1d1a      	adds	r2, r3, #4
 800c002:	697b      	ldr	r3, [r7, #20]
 800c004:	609a      	str	r2, [r3, #8]
 800c006:	69bb      	ldr	r3, [r7, #24]
 800c008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c00a:	4613      	mov	r3, r2
 800c00c:	009b      	lsls	r3, r3, #2
 800c00e:	4413      	add	r3, r2
 800c010:	009b      	lsls	r3, r3, #2
 800c012:	4a10      	ldr	r2, [pc, #64]	; (800c054 <xTaskPriorityDisinherit+0x128>)
 800c014:	441a      	add	r2, r3
 800c016:	69bb      	ldr	r3, [r7, #24]
 800c018:	615a      	str	r2, [r3, #20]
 800c01a:	69bb      	ldr	r3, [r7, #24]
 800c01c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c01e:	490d      	ldr	r1, [pc, #52]	; (800c054 <xTaskPriorityDisinherit+0x128>)
 800c020:	4613      	mov	r3, r2
 800c022:	009b      	lsls	r3, r3, #2
 800c024:	4413      	add	r3, r2
 800c026:	009b      	lsls	r3, r3, #2
 800c028:	440b      	add	r3, r1
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	1c59      	adds	r1, r3, #1
 800c02e:	4809      	ldr	r0, [pc, #36]	; (800c054 <xTaskPriorityDisinherit+0x128>)
 800c030:	4613      	mov	r3, r2
 800c032:	009b      	lsls	r3, r3, #2
 800c034:	4413      	add	r3, r2
 800c036:	009b      	lsls	r3, r3, #2
 800c038:	4403      	add	r3, r0
 800c03a:	6019      	str	r1, [r3, #0]
 800c03c:	2301      	movs	r3, #1
 800c03e:	61fb      	str	r3, [r7, #28]
 800c040:	69fb      	ldr	r3, [r7, #28]
 800c042:	4618      	mov	r0, r3
 800c044:	3720      	adds	r7, #32
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}
 800c04a:	bf00      	nop
 800c04c:	200000f4 	.word	0x200000f4
 800c050:	200001d4 	.word	0x200001d4
 800c054:	200000f8 	.word	0x200000f8

0800c058 <vTaskPriorityDisinheritAfterTimeout>:
 800c058:	b580      	push	{r7, lr}
 800c05a:	b08a      	sub	sp, #40	; 0x28
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	6039      	str	r1, [r7, #0]
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	623b      	str	r3, [r7, #32]
 800c066:	2301      	movs	r3, #1
 800c068:	61fb      	str	r3, [r7, #28]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	f000 8093 	beq.w	800c198 <vTaskPriorityDisinheritAfterTimeout+0x140>
 800c072:	6a3b      	ldr	r3, [r7, #32]
 800c074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c076:	2b00      	cmp	r3, #0
 800c078:	d10a      	bne.n	800c090 <vTaskPriorityDisinheritAfterTimeout+0x38>
 800c07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c07e:	f383 8811 	msr	BASEPRI, r3
 800c082:	f3bf 8f6f 	isb	sy
 800c086:	f3bf 8f4f 	dsb	sy
 800c08a:	613b      	str	r3, [r7, #16]
 800c08c:	bf00      	nop
 800c08e:	e7fe      	b.n	800c08e <vTaskPriorityDisinheritAfterTimeout+0x36>
 800c090:	6a3b      	ldr	r3, [r7, #32]
 800c092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c094:	683a      	ldr	r2, [r7, #0]
 800c096:	429a      	cmp	r2, r3
 800c098:	d902      	bls.n	800c0a0 <vTaskPriorityDisinheritAfterTimeout+0x48>
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	627b      	str	r3, [r7, #36]	; 0x24
 800c09e:	e002      	b.n	800c0a6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
 800c0a0:	6a3b      	ldr	r3, [r7, #32]
 800c0a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0a4:	627b      	str	r3, [r7, #36]	; 0x24
 800c0a6:	6a3b      	ldr	r3, [r7, #32]
 800c0a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0ac:	429a      	cmp	r2, r3
 800c0ae:	d073      	beq.n	800c198 <vTaskPriorityDisinheritAfterTimeout+0x140>
 800c0b0:	6a3b      	ldr	r3, [r7, #32]
 800c0b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0b4:	69fa      	ldr	r2, [r7, #28]
 800c0b6:	429a      	cmp	r2, r3
 800c0b8:	d16e      	bne.n	800c198 <vTaskPriorityDisinheritAfterTimeout+0x140>
 800c0ba:	4b39      	ldr	r3, [pc, #228]	; (800c1a0 <vTaskPriorityDisinheritAfterTimeout+0x148>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	6a3a      	ldr	r2, [r7, #32]
 800c0c0:	429a      	cmp	r2, r3
 800c0c2:	d10a      	bne.n	800c0da <vTaskPriorityDisinheritAfterTimeout+0x82>
 800c0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c8:	f383 8811 	msr	BASEPRI, r3
 800c0cc:	f3bf 8f6f 	isb	sy
 800c0d0:	f3bf 8f4f 	dsb	sy
 800c0d4:	60fb      	str	r3, [r7, #12]
 800c0d6:	bf00      	nop
 800c0d8:	e7fe      	b.n	800c0d8 <vTaskPriorityDisinheritAfterTimeout+0x80>
 800c0da:	6a3b      	ldr	r3, [r7, #32]
 800c0dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0de:	61bb      	str	r3, [r7, #24]
 800c0e0:	6a3b      	ldr	r3, [r7, #32]
 800c0e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0e4:	62da      	str	r2, [r3, #44]	; 0x2c
 800c0e6:	6a3b      	ldr	r3, [r7, #32]
 800c0e8:	699b      	ldr	r3, [r3, #24]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	db04      	blt.n	800c0f8 <vTaskPriorityDisinheritAfterTimeout+0xa0>
 800c0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f0:	f1c3 0205 	rsb	r2, r3, #5
 800c0f4:	6a3b      	ldr	r3, [r7, #32]
 800c0f6:	619a      	str	r2, [r3, #24]
 800c0f8:	6a3b      	ldr	r3, [r7, #32]
 800c0fa:	6959      	ldr	r1, [r3, #20]
 800c0fc:	69ba      	ldr	r2, [r7, #24]
 800c0fe:	4613      	mov	r3, r2
 800c100:	009b      	lsls	r3, r3, #2
 800c102:	4413      	add	r3, r2
 800c104:	009b      	lsls	r3, r3, #2
 800c106:	4a27      	ldr	r2, [pc, #156]	; (800c1a4 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 800c108:	4413      	add	r3, r2
 800c10a:	4299      	cmp	r1, r3
 800c10c:	d144      	bne.n	800c198 <vTaskPriorityDisinheritAfterTimeout+0x140>
 800c10e:	6a3b      	ldr	r3, [r7, #32]
 800c110:	3304      	adds	r3, #4
 800c112:	4618      	mov	r0, r3
 800c114:	f000 fbd5 	bl	800c8c2 <uxListRemove>
 800c118:	6a3b      	ldr	r3, [r7, #32]
 800c11a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c11c:	4b22      	ldr	r3, [pc, #136]	; (800c1a8 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	429a      	cmp	r2, r3
 800c122:	d903      	bls.n	800c12c <vTaskPriorityDisinheritAfterTimeout+0xd4>
 800c124:	6a3b      	ldr	r3, [r7, #32]
 800c126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c128:	4a1f      	ldr	r2, [pc, #124]	; (800c1a8 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 800c12a:	6013      	str	r3, [r2, #0]
 800c12c:	6a3b      	ldr	r3, [r7, #32]
 800c12e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c130:	491c      	ldr	r1, [pc, #112]	; (800c1a4 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 800c132:	4613      	mov	r3, r2
 800c134:	009b      	lsls	r3, r3, #2
 800c136:	4413      	add	r3, r2
 800c138:	009b      	lsls	r3, r3, #2
 800c13a:	440b      	add	r3, r1
 800c13c:	3304      	adds	r3, #4
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	617b      	str	r3, [r7, #20]
 800c142:	6a3b      	ldr	r3, [r7, #32]
 800c144:	697a      	ldr	r2, [r7, #20]
 800c146:	609a      	str	r2, [r3, #8]
 800c148:	697b      	ldr	r3, [r7, #20]
 800c14a:	689a      	ldr	r2, [r3, #8]
 800c14c:	6a3b      	ldr	r3, [r7, #32]
 800c14e:	60da      	str	r2, [r3, #12]
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	689b      	ldr	r3, [r3, #8]
 800c154:	6a3a      	ldr	r2, [r7, #32]
 800c156:	3204      	adds	r2, #4
 800c158:	605a      	str	r2, [r3, #4]
 800c15a:	6a3b      	ldr	r3, [r7, #32]
 800c15c:	1d1a      	adds	r2, r3, #4
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	609a      	str	r2, [r3, #8]
 800c162:	6a3b      	ldr	r3, [r7, #32]
 800c164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c166:	4613      	mov	r3, r2
 800c168:	009b      	lsls	r3, r3, #2
 800c16a:	4413      	add	r3, r2
 800c16c:	009b      	lsls	r3, r3, #2
 800c16e:	4a0d      	ldr	r2, [pc, #52]	; (800c1a4 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 800c170:	441a      	add	r2, r3
 800c172:	6a3b      	ldr	r3, [r7, #32]
 800c174:	615a      	str	r2, [r3, #20]
 800c176:	6a3b      	ldr	r3, [r7, #32]
 800c178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c17a:	490a      	ldr	r1, [pc, #40]	; (800c1a4 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 800c17c:	4613      	mov	r3, r2
 800c17e:	009b      	lsls	r3, r3, #2
 800c180:	4413      	add	r3, r2
 800c182:	009b      	lsls	r3, r3, #2
 800c184:	440b      	add	r3, r1
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	1c59      	adds	r1, r3, #1
 800c18a:	4806      	ldr	r0, [pc, #24]	; (800c1a4 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 800c18c:	4613      	mov	r3, r2
 800c18e:	009b      	lsls	r3, r3, #2
 800c190:	4413      	add	r3, r2
 800c192:	009b      	lsls	r3, r3, #2
 800c194:	4403      	add	r3, r0
 800c196:	6019      	str	r1, [r3, #0]
 800c198:	bf00      	nop
 800c19a:	3728      	adds	r7, #40	; 0x28
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}
 800c1a0:	200000f4 	.word	0x200000f4
 800c1a4:	200000f8 	.word	0x200000f8
 800c1a8:	200001d4 	.word	0x200001d4

0800c1ac <pvTaskIncrementMutexHeldCount>:
 800c1ac:	b480      	push	{r7}
 800c1ae:	af00      	add	r7, sp, #0
 800c1b0:	4b07      	ldr	r3, [pc, #28]	; (800c1d0 <pvTaskIncrementMutexHeldCount+0x24>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d004      	beq.n	800c1c2 <pvTaskIncrementMutexHeldCount+0x16>
 800c1b8:	4b05      	ldr	r3, [pc, #20]	; (800c1d0 <pvTaskIncrementMutexHeldCount+0x24>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c1be:	3201      	adds	r2, #1
 800c1c0:	655a      	str	r2, [r3, #84]	; 0x54
 800c1c2:	4b03      	ldr	r3, [pc, #12]	; (800c1d0 <pvTaskIncrementMutexHeldCount+0x24>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bc80      	pop	{r7}
 800c1cc:	4770      	bx	lr
 800c1ce:	bf00      	nop
 800c1d0:	200000f4 	.word	0x200000f4

0800c1d4 <prvAddCurrentTaskToDelayedList>:
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b086      	sub	sp, #24
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
 800c1dc:	6039      	str	r1, [r7, #0]
 800c1de:	4b2e      	ldr	r3, [pc, #184]	; (800c298 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	617b      	str	r3, [r7, #20]
 800c1e4:	4b2d      	ldr	r3, [pc, #180]	; (800c29c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	3304      	adds	r3, #4
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f000 fb69 	bl	800c8c2 <uxListRemove>
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1f6:	d124      	bne.n	800c242 <prvAddCurrentTaskToDelayedList+0x6e>
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d021      	beq.n	800c242 <prvAddCurrentTaskToDelayedList+0x6e>
 800c1fe:	4b28      	ldr	r3, [pc, #160]	; (800c2a0 <prvAddCurrentTaskToDelayedList+0xcc>)
 800c200:	685b      	ldr	r3, [r3, #4]
 800c202:	613b      	str	r3, [r7, #16]
 800c204:	4b25      	ldr	r3, [pc, #148]	; (800c29c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	693a      	ldr	r2, [r7, #16]
 800c20a:	609a      	str	r2, [r3, #8]
 800c20c:	4b23      	ldr	r3, [pc, #140]	; (800c29c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	693a      	ldr	r2, [r7, #16]
 800c212:	6892      	ldr	r2, [r2, #8]
 800c214:	60da      	str	r2, [r3, #12]
 800c216:	4b21      	ldr	r3, [pc, #132]	; (800c29c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c218:	681a      	ldr	r2, [r3, #0]
 800c21a:	693b      	ldr	r3, [r7, #16]
 800c21c:	689b      	ldr	r3, [r3, #8]
 800c21e:	3204      	adds	r2, #4
 800c220:	605a      	str	r2, [r3, #4]
 800c222:	4b1e      	ldr	r3, [pc, #120]	; (800c29c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	1d1a      	adds	r2, r3, #4
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	609a      	str	r2, [r3, #8]
 800c22c:	4b1b      	ldr	r3, [pc, #108]	; (800c29c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	4a1b      	ldr	r2, [pc, #108]	; (800c2a0 <prvAddCurrentTaskToDelayedList+0xcc>)
 800c232:	615a      	str	r2, [r3, #20]
 800c234:	4b1a      	ldr	r3, [pc, #104]	; (800c2a0 <prvAddCurrentTaskToDelayedList+0xcc>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	3301      	adds	r3, #1
 800c23a:	4a19      	ldr	r2, [pc, #100]	; (800c2a0 <prvAddCurrentTaskToDelayedList+0xcc>)
 800c23c:	6013      	str	r3, [r2, #0]
 800c23e:	bf00      	nop
 800c240:	e026      	b.n	800c290 <prvAddCurrentTaskToDelayedList+0xbc>
 800c242:	697a      	ldr	r2, [r7, #20]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	4413      	add	r3, r2
 800c248:	60fb      	str	r3, [r7, #12]
 800c24a:	4b14      	ldr	r3, [pc, #80]	; (800c29c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	68fa      	ldr	r2, [r7, #12]
 800c250:	605a      	str	r2, [r3, #4]
 800c252:	68fa      	ldr	r2, [r7, #12]
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	429a      	cmp	r2, r3
 800c258:	d209      	bcs.n	800c26e <prvAddCurrentTaskToDelayedList+0x9a>
 800c25a:	4b12      	ldr	r3, [pc, #72]	; (800c2a4 <prvAddCurrentTaskToDelayedList+0xd0>)
 800c25c:	681a      	ldr	r2, [r3, #0]
 800c25e:	4b0f      	ldr	r3, [pc, #60]	; (800c29c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	3304      	adds	r3, #4
 800c264:	4619      	mov	r1, r3
 800c266:	4610      	mov	r0, r2
 800c268:	f000 faf3 	bl	800c852 <vListInsert>
 800c26c:	e010      	b.n	800c290 <prvAddCurrentTaskToDelayedList+0xbc>
 800c26e:	4b0e      	ldr	r3, [pc, #56]	; (800c2a8 <prvAddCurrentTaskToDelayedList+0xd4>)
 800c270:	681a      	ldr	r2, [r3, #0]
 800c272:	4b0a      	ldr	r3, [pc, #40]	; (800c29c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	3304      	adds	r3, #4
 800c278:	4619      	mov	r1, r3
 800c27a:	4610      	mov	r0, r2
 800c27c:	f000 fae9 	bl	800c852 <vListInsert>
 800c280:	4b0a      	ldr	r3, [pc, #40]	; (800c2ac <prvAddCurrentTaskToDelayedList+0xd8>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	68fa      	ldr	r2, [r7, #12]
 800c286:	429a      	cmp	r2, r3
 800c288:	d202      	bcs.n	800c290 <prvAddCurrentTaskToDelayedList+0xbc>
 800c28a:	4a08      	ldr	r2, [pc, #32]	; (800c2ac <prvAddCurrentTaskToDelayedList+0xd8>)
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	6013      	str	r3, [r2, #0]
 800c290:	bf00      	nop
 800c292:	3718      	adds	r7, #24
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}
 800c298:	200001d0 	.word	0x200001d0
 800c29c:	200000f4 	.word	0x200000f4
 800c2a0:	200001b8 	.word	0x200001b8
 800c2a4:	20000188 	.word	0x20000188
 800c2a8:	20000184 	.word	0x20000184
 800c2ac:	200001ec 	.word	0x200001ec

0800c2b0 <xTimerCreateTimerTask>:
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b084      	sub	sp, #16
 800c2b4:	af02      	add	r7, sp, #8
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	607b      	str	r3, [r7, #4]
 800c2ba:	f000 fa45 	bl	800c748 <prvCheckForValidListAndQueue>
 800c2be:	4b11      	ldr	r3, [pc, #68]	; (800c304 <xTimerCreateTimerTask+0x54>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d00a      	beq.n	800c2dc <xTimerCreateTimerTask+0x2c>
 800c2c6:	4b10      	ldr	r3, [pc, #64]	; (800c308 <xTimerCreateTimerTask+0x58>)
 800c2c8:	9301      	str	r3, [sp, #4]
 800c2ca:	2303      	movs	r3, #3
 800c2cc:	9300      	str	r3, [sp, #0]
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	2280      	movs	r2, #128	; 0x80
 800c2d2:	490e      	ldr	r1, [pc, #56]	; (800c30c <xTimerCreateTimerTask+0x5c>)
 800c2d4:	480e      	ldr	r0, [pc, #56]	; (800c310 <xTimerCreateTimerTask+0x60>)
 800c2d6:	f7fe fd8b 	bl	800adf0 <xTaskCreate>
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d10a      	bne.n	800c2f8 <xTimerCreateTimerTask+0x48>
 800c2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e6:	f383 8811 	msr	BASEPRI, r3
 800c2ea:	f3bf 8f6f 	isb	sy
 800c2ee:	f3bf 8f4f 	dsb	sy
 800c2f2:	603b      	str	r3, [r7, #0]
 800c2f4:	bf00      	nop
 800c2f6:	e7fe      	b.n	800c2f6 <xTimerCreateTimerTask+0x46>
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3708      	adds	r7, #8
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}
 800c302:	bf00      	nop
 800c304:	20000228 	.word	0x20000228
 800c308:	2000022c 	.word	0x2000022c
 800c30c:	0800dad8 	.word	0x0800dad8
 800c310:	0800c3b9 	.word	0x0800c3b9

0800c314 <prvReloadTimer>:
 800c314:	b580      	push	{r7, lr}
 800c316:	b084      	sub	sp, #16
 800c318:	af00      	add	r7, sp, #0
 800c31a:	60f8      	str	r0, [r7, #12]
 800c31c:	60b9      	str	r1, [r7, #8]
 800c31e:	607a      	str	r2, [r7, #4]
 800c320:	e008      	b.n	800c334 <prvReloadTimer+0x20>
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	699b      	ldr	r3, [r3, #24]
 800c326:	68ba      	ldr	r2, [r7, #8]
 800c328:	4413      	add	r3, r2
 800c32a:	60bb      	str	r3, [r7, #8]
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	6a1b      	ldr	r3, [r3, #32]
 800c330:	68f8      	ldr	r0, [r7, #12]
 800c332:	4798      	blx	r3
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	699a      	ldr	r2, [r3, #24]
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	18d1      	adds	r1, r2, r3
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	687a      	ldr	r2, [r7, #4]
 800c340:	68f8      	ldr	r0, [r7, #12]
 800c342:	f000 f8db 	bl	800c4fc <prvInsertTimerInActiveList>
 800c346:	4603      	mov	r3, r0
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d1ea      	bne.n	800c322 <prvReloadTimer+0xe>
 800c34c:	bf00      	nop
 800c34e:	bf00      	nop
 800c350:	3710      	adds	r7, #16
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}
	...

0800c358 <prvProcessExpiredTimer>:
 800c358:	b580      	push	{r7, lr}
 800c35a:	b084      	sub	sp, #16
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
 800c360:	6039      	str	r1, [r7, #0]
 800c362:	4b14      	ldr	r3, [pc, #80]	; (800c3b4 <prvProcessExpiredTimer+0x5c>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	68db      	ldr	r3, [r3, #12]
 800c368:	68db      	ldr	r3, [r3, #12]
 800c36a:	60fb      	str	r3, [r7, #12]
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	3304      	adds	r3, #4
 800c370:	4618      	mov	r0, r3
 800c372:	f000 faa6 	bl	800c8c2 <uxListRemove>
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c37c:	f003 0304 	and.w	r3, r3, #4
 800c380:	2b00      	cmp	r3, #0
 800c382:	d005      	beq.n	800c390 <prvProcessExpiredTimer+0x38>
 800c384:	683a      	ldr	r2, [r7, #0]
 800c386:	6879      	ldr	r1, [r7, #4]
 800c388:	68f8      	ldr	r0, [r7, #12]
 800c38a:	f7ff ffc3 	bl	800c314 <prvReloadTimer>
 800c38e:	e008      	b.n	800c3a2 <prvProcessExpiredTimer+0x4a>
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c396:	f023 0301 	bic.w	r3, r3, #1
 800c39a:	b2da      	uxtb	r2, r3
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	6a1b      	ldr	r3, [r3, #32]
 800c3a6:	68f8      	ldr	r0, [r7, #12]
 800c3a8:	4798      	blx	r3
 800c3aa:	bf00      	nop
 800c3ac:	3710      	adds	r7, #16
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}
 800c3b2:	bf00      	nop
 800c3b4:	20000220 	.word	0x20000220

0800c3b8 <prvTimerTask>:
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b084      	sub	sp, #16
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	f107 0308 	add.w	r3, r7, #8
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f000 f857 	bl	800c478 <prvGetNextExpireTime>
 800c3ca:	60f8      	str	r0, [r7, #12]
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	4619      	mov	r1, r3
 800c3d0:	68f8      	ldr	r0, [r7, #12]
 800c3d2:	f000 f803 	bl	800c3dc <prvProcessTimerOrBlockTask>
 800c3d6:	f000 f8d3 	bl	800c580 <prvProcessReceivedCommands>
 800c3da:	e7f1      	b.n	800c3c0 <prvTimerTask+0x8>

0800c3dc <prvProcessTimerOrBlockTask>:
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b084      	sub	sp, #16
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	6039      	str	r1, [r7, #0]
 800c3e6:	f7fe fef5 	bl	800b1d4 <vTaskSuspendAll>
 800c3ea:	f107 0308 	add.w	r3, r7, #8
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f000 f864 	bl	800c4bc <prvSampleTimeNow>
 800c3f4:	60f8      	str	r0, [r7, #12]
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d130      	bne.n	800c45e <prvProcessTimerOrBlockTask+0x82>
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d10a      	bne.n	800c418 <prvProcessTimerOrBlockTask+0x3c>
 800c402:	687a      	ldr	r2, [r7, #4]
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	429a      	cmp	r2, r3
 800c408:	d806      	bhi.n	800c418 <prvProcessTimerOrBlockTask+0x3c>
 800c40a:	f7fe ff27 	bl	800b25c <xTaskResumeAll>
 800c40e:	68f9      	ldr	r1, [r7, #12]
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f7ff ffa1 	bl	800c358 <prvProcessExpiredTimer>
 800c416:	e024      	b.n	800c462 <prvProcessTimerOrBlockTask+0x86>
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d008      	beq.n	800c430 <prvProcessTimerOrBlockTask+0x54>
 800c41e:	4b13      	ldr	r3, [pc, #76]	; (800c46c <prvProcessTimerOrBlockTask+0x90>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d101      	bne.n	800c42c <prvProcessTimerOrBlockTask+0x50>
 800c428:	2301      	movs	r3, #1
 800c42a:	e000      	b.n	800c42e <prvProcessTimerOrBlockTask+0x52>
 800c42c:	2300      	movs	r3, #0
 800c42e:	603b      	str	r3, [r7, #0]
 800c430:	4b0f      	ldr	r3, [pc, #60]	; (800c470 <prvProcessTimerOrBlockTask+0x94>)
 800c432:	6818      	ldr	r0, [r3, #0]
 800c434:	687a      	ldr	r2, [r7, #4]
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	1ad3      	subs	r3, r2, r3
 800c43a:	683a      	ldr	r2, [r7, #0]
 800c43c:	4619      	mov	r1, r3
 800c43e:	f7fe fca3 	bl	800ad88 <vQueueWaitForMessageRestricted>
 800c442:	f7fe ff0b 	bl	800b25c <xTaskResumeAll>
 800c446:	4603      	mov	r3, r0
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d10a      	bne.n	800c462 <prvProcessTimerOrBlockTask+0x86>
 800c44c:	4b09      	ldr	r3, [pc, #36]	; (800c474 <prvProcessTimerOrBlockTask+0x98>)
 800c44e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c452:	601a      	str	r2, [r3, #0]
 800c454:	f3bf 8f4f 	dsb	sy
 800c458:	f3bf 8f6f 	isb	sy
 800c45c:	e001      	b.n	800c462 <prvProcessTimerOrBlockTask+0x86>
 800c45e:	f7fe fefd 	bl	800b25c <xTaskResumeAll>
 800c462:	bf00      	nop
 800c464:	3710      	adds	r7, #16
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}
 800c46a:	bf00      	nop
 800c46c:	20000224 	.word	0x20000224
 800c470:	20000228 	.word	0x20000228
 800c474:	e000ed04 	.word	0xe000ed04

0800c478 <prvGetNextExpireTime>:
 800c478:	b480      	push	{r7}
 800c47a:	b085      	sub	sp, #20
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
 800c480:	4b0d      	ldr	r3, [pc, #52]	; (800c4b8 <prvGetNextExpireTime+0x40>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d101      	bne.n	800c48e <prvGetNextExpireTime+0x16>
 800c48a:	2201      	movs	r2, #1
 800c48c:	e000      	b.n	800c490 <prvGetNextExpireTime+0x18>
 800c48e:	2200      	movs	r2, #0
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	601a      	str	r2, [r3, #0]
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d105      	bne.n	800c4a8 <prvGetNextExpireTime+0x30>
 800c49c:	4b06      	ldr	r3, [pc, #24]	; (800c4b8 <prvGetNextExpireTime+0x40>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	68db      	ldr	r3, [r3, #12]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	60fb      	str	r3, [r7, #12]
 800c4a6:	e001      	b.n	800c4ac <prvGetNextExpireTime+0x34>
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	60fb      	str	r3, [r7, #12]
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	3714      	adds	r7, #20
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bc80      	pop	{r7}
 800c4b6:	4770      	bx	lr
 800c4b8:	20000220 	.word	0x20000220

0800c4bc <prvSampleTimeNow>:
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b084      	sub	sp, #16
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
 800c4c4:	f7fe ffc6 	bl	800b454 <xTaskGetTickCount>
 800c4c8:	60f8      	str	r0, [r7, #12]
 800c4ca:	4b0b      	ldr	r3, [pc, #44]	; (800c4f8 <prvSampleTimeNow+0x3c>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	68fa      	ldr	r2, [r7, #12]
 800c4d0:	429a      	cmp	r2, r3
 800c4d2:	d205      	bcs.n	800c4e0 <prvSampleTimeNow+0x24>
 800c4d4:	f000 f912 	bl	800c6fc <prvSwitchTimerLists>
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2201      	movs	r2, #1
 800c4dc:	601a      	str	r2, [r3, #0]
 800c4de:	e002      	b.n	800c4e6 <prvSampleTimeNow+0x2a>
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	601a      	str	r2, [r3, #0]
 800c4e6:	4a04      	ldr	r2, [pc, #16]	; (800c4f8 <prvSampleTimeNow+0x3c>)
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	6013      	str	r3, [r2, #0]
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3710      	adds	r7, #16
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}
 800c4f6:	bf00      	nop
 800c4f8:	20000230 	.word	0x20000230

0800c4fc <prvInsertTimerInActiveList>:
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b086      	sub	sp, #24
 800c500:	af00      	add	r7, sp, #0
 800c502:	60f8      	str	r0, [r7, #12]
 800c504:	60b9      	str	r1, [r7, #8]
 800c506:	607a      	str	r2, [r7, #4]
 800c508:	603b      	str	r3, [r7, #0]
 800c50a:	2300      	movs	r3, #0
 800c50c:	617b      	str	r3, [r7, #20]
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	68ba      	ldr	r2, [r7, #8]
 800c512:	605a      	str	r2, [r3, #4]
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	68fa      	ldr	r2, [r7, #12]
 800c518:	611a      	str	r2, [r3, #16]
 800c51a:	68ba      	ldr	r2, [r7, #8]
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	429a      	cmp	r2, r3
 800c520:	d812      	bhi.n	800c548 <prvInsertTimerInActiveList+0x4c>
 800c522:	687a      	ldr	r2, [r7, #4]
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	1ad2      	subs	r2, r2, r3
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	699b      	ldr	r3, [r3, #24]
 800c52c:	429a      	cmp	r2, r3
 800c52e:	d302      	bcc.n	800c536 <prvInsertTimerInActiveList+0x3a>
 800c530:	2301      	movs	r3, #1
 800c532:	617b      	str	r3, [r7, #20]
 800c534:	e01b      	b.n	800c56e <prvInsertTimerInActiveList+0x72>
 800c536:	4b10      	ldr	r3, [pc, #64]	; (800c578 <prvInsertTimerInActiveList+0x7c>)
 800c538:	681a      	ldr	r2, [r3, #0]
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	3304      	adds	r3, #4
 800c53e:	4619      	mov	r1, r3
 800c540:	4610      	mov	r0, r2
 800c542:	f000 f986 	bl	800c852 <vListInsert>
 800c546:	e012      	b.n	800c56e <prvInsertTimerInActiveList+0x72>
 800c548:	687a      	ldr	r2, [r7, #4]
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	429a      	cmp	r2, r3
 800c54e:	d206      	bcs.n	800c55e <prvInsertTimerInActiveList+0x62>
 800c550:	68ba      	ldr	r2, [r7, #8]
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	429a      	cmp	r2, r3
 800c556:	d302      	bcc.n	800c55e <prvInsertTimerInActiveList+0x62>
 800c558:	2301      	movs	r3, #1
 800c55a:	617b      	str	r3, [r7, #20]
 800c55c:	e007      	b.n	800c56e <prvInsertTimerInActiveList+0x72>
 800c55e:	4b07      	ldr	r3, [pc, #28]	; (800c57c <prvInsertTimerInActiveList+0x80>)
 800c560:	681a      	ldr	r2, [r3, #0]
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	3304      	adds	r3, #4
 800c566:	4619      	mov	r1, r3
 800c568:	4610      	mov	r0, r2
 800c56a:	f000 f972 	bl	800c852 <vListInsert>
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	4618      	mov	r0, r3
 800c572:	3718      	adds	r7, #24
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}
 800c578:	20000224 	.word	0x20000224
 800c57c:	20000220 	.word	0x20000220

0800c580 <prvProcessReceivedCommands>:
 800c580:	b580      	push	{r7, lr}
 800c582:	b088      	sub	sp, #32
 800c584:	af00      	add	r7, sp, #0
 800c586:	e0a6      	b.n	800c6d6 <prvProcessReceivedCommands+0x156>
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	f2c0 80a2 	blt.w	800c6d4 <prvProcessReceivedCommands+0x154>
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	61fb      	str	r3, [r7, #28]
 800c594:	69fb      	ldr	r3, [r7, #28]
 800c596:	695b      	ldr	r3, [r3, #20]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d004      	beq.n	800c5a6 <prvProcessReceivedCommands+0x26>
 800c59c:	69fb      	ldr	r3, [r7, #28]
 800c59e:	3304      	adds	r3, #4
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f000 f98e 	bl	800c8c2 <uxListRemove>
 800c5a6:	1d3b      	adds	r3, r7, #4
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f7ff ff87 	bl	800c4bc <prvSampleTimeNow>
 800c5ae:	61b8      	str	r0, [r7, #24]
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	3b01      	subs	r3, #1
 800c5b4:	2b08      	cmp	r3, #8
 800c5b6:	f200 808e 	bhi.w	800c6d6 <prvProcessReceivedCommands+0x156>
 800c5ba:	a201      	add	r2, pc, #4	; (adr r2, 800c5c0 <prvProcessReceivedCommands+0x40>)
 800c5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5c0:	0800c5e5 	.word	0x0800c5e5
 800c5c4:	0800c5e5 	.word	0x0800c5e5
 800c5c8:	0800c64d 	.word	0x0800c64d
 800c5cc:	0800c661 	.word	0x0800c661
 800c5d0:	0800c6ab 	.word	0x0800c6ab
 800c5d4:	0800c5e5 	.word	0x0800c5e5
 800c5d8:	0800c5e5 	.word	0x0800c5e5
 800c5dc:	0800c64d 	.word	0x0800c64d
 800c5e0:	0800c661 	.word	0x0800c661
 800c5e4:	69fb      	ldr	r3, [r7, #28]
 800c5e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5ea:	f043 0301 	orr.w	r3, r3, #1
 800c5ee:	b2da      	uxtb	r2, r3
 800c5f0:	69fb      	ldr	r3, [r7, #28]
 800c5f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800c5f6:	68fa      	ldr	r2, [r7, #12]
 800c5f8:	69fb      	ldr	r3, [r7, #28]
 800c5fa:	699b      	ldr	r3, [r3, #24]
 800c5fc:	18d1      	adds	r1, r2, r3
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	69ba      	ldr	r2, [r7, #24]
 800c602:	69f8      	ldr	r0, [r7, #28]
 800c604:	f7ff ff7a 	bl	800c4fc <prvInsertTimerInActiveList>
 800c608:	4603      	mov	r3, r0
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d063      	beq.n	800c6d6 <prvProcessReceivedCommands+0x156>
 800c60e:	69fb      	ldr	r3, [r7, #28]
 800c610:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c614:	f003 0304 	and.w	r3, r3, #4
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d009      	beq.n	800c630 <prvProcessReceivedCommands+0xb0>
 800c61c:	68fa      	ldr	r2, [r7, #12]
 800c61e:	69fb      	ldr	r3, [r7, #28]
 800c620:	699b      	ldr	r3, [r3, #24]
 800c622:	4413      	add	r3, r2
 800c624:	69ba      	ldr	r2, [r7, #24]
 800c626:	4619      	mov	r1, r3
 800c628:	69f8      	ldr	r0, [r7, #28]
 800c62a:	f7ff fe73 	bl	800c314 <prvReloadTimer>
 800c62e:	e008      	b.n	800c642 <prvProcessReceivedCommands+0xc2>
 800c630:	69fb      	ldr	r3, [r7, #28]
 800c632:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c636:	f023 0301 	bic.w	r3, r3, #1
 800c63a:	b2da      	uxtb	r2, r3
 800c63c:	69fb      	ldr	r3, [r7, #28]
 800c63e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800c642:	69fb      	ldr	r3, [r7, #28]
 800c644:	6a1b      	ldr	r3, [r3, #32]
 800c646:	69f8      	ldr	r0, [r7, #28]
 800c648:	4798      	blx	r3
 800c64a:	e044      	b.n	800c6d6 <prvProcessReceivedCommands+0x156>
 800c64c:	69fb      	ldr	r3, [r7, #28]
 800c64e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c652:	f023 0301 	bic.w	r3, r3, #1
 800c656:	b2da      	uxtb	r2, r3
 800c658:	69fb      	ldr	r3, [r7, #28]
 800c65a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800c65e:	e03a      	b.n	800c6d6 <prvProcessReceivedCommands+0x156>
 800c660:	69fb      	ldr	r3, [r7, #28]
 800c662:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c666:	f043 0301 	orr.w	r3, r3, #1
 800c66a:	b2da      	uxtb	r2, r3
 800c66c:	69fb      	ldr	r3, [r7, #28]
 800c66e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800c672:	68fa      	ldr	r2, [r7, #12]
 800c674:	69fb      	ldr	r3, [r7, #28]
 800c676:	619a      	str	r2, [r3, #24]
 800c678:	69fb      	ldr	r3, [r7, #28]
 800c67a:	699b      	ldr	r3, [r3, #24]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d10a      	bne.n	800c696 <prvProcessReceivedCommands+0x116>
 800c680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c684:	f383 8811 	msr	BASEPRI, r3
 800c688:	f3bf 8f6f 	isb	sy
 800c68c:	f3bf 8f4f 	dsb	sy
 800c690:	617b      	str	r3, [r7, #20]
 800c692:	bf00      	nop
 800c694:	e7fe      	b.n	800c694 <prvProcessReceivedCommands+0x114>
 800c696:	69fb      	ldr	r3, [r7, #28]
 800c698:	699a      	ldr	r2, [r3, #24]
 800c69a:	69bb      	ldr	r3, [r7, #24]
 800c69c:	18d1      	adds	r1, r2, r3
 800c69e:	69bb      	ldr	r3, [r7, #24]
 800c6a0:	69ba      	ldr	r2, [r7, #24]
 800c6a2:	69f8      	ldr	r0, [r7, #28]
 800c6a4:	f7ff ff2a 	bl	800c4fc <prvInsertTimerInActiveList>
 800c6a8:	e015      	b.n	800c6d6 <prvProcessReceivedCommands+0x156>
 800c6aa:	69fb      	ldr	r3, [r7, #28]
 800c6ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6b0:	f003 0302 	and.w	r3, r3, #2
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d103      	bne.n	800c6c0 <prvProcessReceivedCommands+0x140>
 800c6b8:	69f8      	ldr	r0, [r7, #28]
 800c6ba:	f000 f88d 	bl	800c7d8 <vPortFree>
 800c6be:	e00a      	b.n	800c6d6 <prvProcessReceivedCommands+0x156>
 800c6c0:	69fb      	ldr	r3, [r7, #28]
 800c6c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6c6:	f023 0301 	bic.w	r3, r3, #1
 800c6ca:	b2da      	uxtb	r2, r3
 800c6cc:	69fb      	ldr	r3, [r7, #28]
 800c6ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800c6d2:	e000      	b.n	800c6d6 <prvProcessReceivedCommands+0x156>
 800c6d4:	bf00      	nop
 800c6d6:	4b08      	ldr	r3, [pc, #32]	; (800c6f8 <prvProcessReceivedCommands+0x178>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f107 0108 	add.w	r1, r7, #8
 800c6de:	2200      	movs	r2, #0
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f7fd fffd 	bl	800a6e0 <xQueueReceive>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	f47f af4d 	bne.w	800c588 <prvProcessReceivedCommands+0x8>
 800c6ee:	bf00      	nop
 800c6f0:	bf00      	nop
 800c6f2:	3720      	adds	r7, #32
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}
 800c6f8:	20000228 	.word	0x20000228

0800c6fc <prvSwitchTimerLists>:
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b082      	sub	sp, #8
 800c700:	af00      	add	r7, sp, #0
 800c702:	e009      	b.n	800c718 <prvSwitchTimerLists+0x1c>
 800c704:	4b0e      	ldr	r3, [pc, #56]	; (800c740 <prvSwitchTimerLists+0x44>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	68db      	ldr	r3, [r3, #12]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	603b      	str	r3, [r7, #0]
 800c70e:	f04f 31ff 	mov.w	r1, #4294967295
 800c712:	6838      	ldr	r0, [r7, #0]
 800c714:	f7ff fe20 	bl	800c358 <prvProcessExpiredTimer>
 800c718:	4b09      	ldr	r3, [pc, #36]	; (800c740 <prvSwitchTimerLists+0x44>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d1f0      	bne.n	800c704 <prvSwitchTimerLists+0x8>
 800c722:	4b07      	ldr	r3, [pc, #28]	; (800c740 <prvSwitchTimerLists+0x44>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	607b      	str	r3, [r7, #4]
 800c728:	4b06      	ldr	r3, [pc, #24]	; (800c744 <prvSwitchTimerLists+0x48>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	4a04      	ldr	r2, [pc, #16]	; (800c740 <prvSwitchTimerLists+0x44>)
 800c72e:	6013      	str	r3, [r2, #0]
 800c730:	4a04      	ldr	r2, [pc, #16]	; (800c744 <prvSwitchTimerLists+0x48>)
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	6013      	str	r3, [r2, #0]
 800c736:	bf00      	nop
 800c738:	3708      	adds	r7, #8
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}
 800c73e:	bf00      	nop
 800c740:	20000220 	.word	0x20000220
 800c744:	20000224 	.word	0x20000224

0800c748 <prvCheckForValidListAndQueue>:
 800c748:	b580      	push	{r7, lr}
 800c74a:	af00      	add	r7, sp, #0
 800c74c:	f000 f9d8 	bl	800cb00 <vPortEnterCritical>
 800c750:	4b12      	ldr	r3, [pc, #72]	; (800c79c <prvCheckForValidListAndQueue+0x54>)
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d11d      	bne.n	800c794 <prvCheckForValidListAndQueue+0x4c>
 800c758:	4811      	ldr	r0, [pc, #68]	; (800c7a0 <prvCheckForValidListAndQueue+0x58>)
 800c75a:	f000 f84f 	bl	800c7fc <vListInitialise>
 800c75e:	4811      	ldr	r0, [pc, #68]	; (800c7a4 <prvCheckForValidListAndQueue+0x5c>)
 800c760:	f000 f84c 	bl	800c7fc <vListInitialise>
 800c764:	4b10      	ldr	r3, [pc, #64]	; (800c7a8 <prvCheckForValidListAndQueue+0x60>)
 800c766:	4a0e      	ldr	r2, [pc, #56]	; (800c7a0 <prvCheckForValidListAndQueue+0x58>)
 800c768:	601a      	str	r2, [r3, #0]
 800c76a:	4b10      	ldr	r3, [pc, #64]	; (800c7ac <prvCheckForValidListAndQueue+0x64>)
 800c76c:	4a0d      	ldr	r2, [pc, #52]	; (800c7a4 <prvCheckForValidListAndQueue+0x5c>)
 800c76e:	601a      	str	r2, [r3, #0]
 800c770:	2200      	movs	r2, #0
 800c772:	210c      	movs	r1, #12
 800c774:	200a      	movs	r0, #10
 800c776:	f7fd fcbb 	bl	800a0f0 <xQueueGenericCreate>
 800c77a:	4603      	mov	r3, r0
 800c77c:	4a07      	ldr	r2, [pc, #28]	; (800c79c <prvCheckForValidListAndQueue+0x54>)
 800c77e:	6013      	str	r3, [r2, #0]
 800c780:	4b06      	ldr	r3, [pc, #24]	; (800c79c <prvCheckForValidListAndQueue+0x54>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d005      	beq.n	800c794 <prvCheckForValidListAndQueue+0x4c>
 800c788:	4b04      	ldr	r3, [pc, #16]	; (800c79c <prvCheckForValidListAndQueue+0x54>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	4908      	ldr	r1, [pc, #32]	; (800c7b0 <prvCheckForValidListAndQueue+0x68>)
 800c78e:	4618      	mov	r0, r3
 800c790:	f7fe faac 	bl	800acec <vQueueAddToRegistry>
 800c794:	f000 f9e4 	bl	800cb60 <vPortExitCritical>
 800c798:	bf00      	nop
 800c79a:	bd80      	pop	{r7, pc}
 800c79c:	20000228 	.word	0x20000228
 800c7a0:	200001f8 	.word	0x200001f8
 800c7a4:	2000020c 	.word	0x2000020c
 800c7a8:	20000220 	.word	0x20000220
 800c7ac:	20000224 	.word	0x20000224
 800c7b0:	0800dae0 	.word	0x0800dae0

0800c7b4 <pvPortMalloc>:
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b084      	sub	sp, #16
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
 800c7bc:	f7fe fd0a 	bl	800b1d4 <vTaskSuspendAll>
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f000 fba9 	bl	800cf18 <malloc>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	60fb      	str	r3, [r7, #12]
 800c7ca:	f7fe fd47 	bl	800b25c <xTaskResumeAll>
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	3710      	adds	r7, #16
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}

0800c7d8 <vPortFree>:
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b082      	sub	sp, #8
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d006      	beq.n	800c7f4 <vPortFree+0x1c>
 800c7e6:	f7fe fcf5 	bl	800b1d4 <vTaskSuspendAll>
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f000 fb9c 	bl	800cf28 <free>
 800c7f0:	f7fe fd34 	bl	800b25c <xTaskResumeAll>
 800c7f4:	bf00      	nop
 800c7f6:	3708      	adds	r7, #8
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bd80      	pop	{r7, pc}

0800c7fc <vListInitialise>:
 800c7fc:	b480      	push	{r7}
 800c7fe:	b083      	sub	sp, #12
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f103 0208 	add.w	r2, r3, #8
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	605a      	str	r2, [r3, #4]
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f04f 32ff 	mov.w	r2, #4294967295
 800c814:	609a      	str	r2, [r3, #8]
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f103 0208 	add.w	r2, r3, #8
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	60da      	str	r2, [r3, #12]
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f103 0208 	add.w	r2, r3, #8
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	611a      	str	r2, [r3, #16]
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2200      	movs	r2, #0
 800c82e:	601a      	str	r2, [r3, #0]
 800c830:	bf00      	nop
 800c832:	370c      	adds	r7, #12
 800c834:	46bd      	mov	sp, r7
 800c836:	bc80      	pop	{r7}
 800c838:	4770      	bx	lr

0800c83a <vListInitialiseItem>:
 800c83a:	b480      	push	{r7}
 800c83c:	b083      	sub	sp, #12
 800c83e:	af00      	add	r7, sp, #0
 800c840:	6078      	str	r0, [r7, #4]
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2200      	movs	r2, #0
 800c846:	611a      	str	r2, [r3, #16]
 800c848:	bf00      	nop
 800c84a:	370c      	adds	r7, #12
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bc80      	pop	{r7}
 800c850:	4770      	bx	lr

0800c852 <vListInsert>:
 800c852:	b480      	push	{r7}
 800c854:	b085      	sub	sp, #20
 800c856:	af00      	add	r7, sp, #0
 800c858:	6078      	str	r0, [r7, #4]
 800c85a:	6039      	str	r1, [r7, #0]
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	60bb      	str	r3, [r7, #8]
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c868:	d103      	bne.n	800c872 <vListInsert+0x20>
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	691b      	ldr	r3, [r3, #16]
 800c86e:	60fb      	str	r3, [r7, #12]
 800c870:	e00c      	b.n	800c88c <vListInsert+0x3a>
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	3308      	adds	r3, #8
 800c876:	60fb      	str	r3, [r7, #12]
 800c878:	e002      	b.n	800c880 <vListInsert+0x2e>
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	685b      	ldr	r3, [r3, #4]
 800c87e:	60fb      	str	r3, [r7, #12]
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	685b      	ldr	r3, [r3, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	68ba      	ldr	r2, [r7, #8]
 800c888:	429a      	cmp	r2, r3
 800c88a:	d2f6      	bcs.n	800c87a <vListInsert+0x28>
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	685a      	ldr	r2, [r3, #4]
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	605a      	str	r2, [r3, #4]
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	685b      	ldr	r3, [r3, #4]
 800c898:	683a      	ldr	r2, [r7, #0]
 800c89a:	609a      	str	r2, [r3, #8]
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	68fa      	ldr	r2, [r7, #12]
 800c8a0:	609a      	str	r2, [r3, #8]
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	683a      	ldr	r2, [r7, #0]
 800c8a6:	605a      	str	r2, [r3, #4]
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	687a      	ldr	r2, [r7, #4]
 800c8ac:	611a      	str	r2, [r3, #16]
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	1c5a      	adds	r2, r3, #1
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	601a      	str	r2, [r3, #0]
 800c8b8:	bf00      	nop
 800c8ba:	3714      	adds	r7, #20
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bc80      	pop	{r7}
 800c8c0:	4770      	bx	lr

0800c8c2 <uxListRemove>:
 800c8c2:	b480      	push	{r7}
 800c8c4:	b085      	sub	sp, #20
 800c8c6:	af00      	add	r7, sp, #0
 800c8c8:	6078      	str	r0, [r7, #4]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	691b      	ldr	r3, [r3, #16]
 800c8ce:	60fb      	str	r3, [r7, #12]
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	685b      	ldr	r3, [r3, #4]
 800c8d4:	687a      	ldr	r2, [r7, #4]
 800c8d6:	6892      	ldr	r2, [r2, #8]
 800c8d8:	609a      	str	r2, [r3, #8]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	689b      	ldr	r3, [r3, #8]
 800c8de:	687a      	ldr	r2, [r7, #4]
 800c8e0:	6852      	ldr	r2, [r2, #4]
 800c8e2:	605a      	str	r2, [r3, #4]
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	685b      	ldr	r3, [r3, #4]
 800c8e8:	687a      	ldr	r2, [r7, #4]
 800c8ea:	429a      	cmp	r2, r3
 800c8ec:	d103      	bne.n	800c8f6 <uxListRemove+0x34>
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	689a      	ldr	r2, [r3, #8]
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	605a      	str	r2, [r3, #4]
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	611a      	str	r2, [r3, #16]
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	1e5a      	subs	r2, r3, #1
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	601a      	str	r2, [r3, #0]
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	4618      	mov	r0, r3
 800c90c:	3714      	adds	r7, #20
 800c90e:	46bd      	mov	sp, r7
 800c910:	bc80      	pop	{r7}
 800c912:	4770      	bx	lr

0800c914 <pxPortInitialiseStack>:
 800c914:	b480      	push	{r7}
 800c916:	b085      	sub	sp, #20
 800c918:	af00      	add	r7, sp, #0
 800c91a:	60f8      	str	r0, [r7, #12]
 800c91c:	60b9      	str	r1, [r7, #8]
 800c91e:	607a      	str	r2, [r7, #4]
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	3b04      	subs	r3, #4
 800c924:	60fb      	str	r3, [r7, #12]
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c92c:	601a      	str	r2, [r3, #0]
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	3b04      	subs	r3, #4
 800c932:	60fb      	str	r3, [r7, #12]
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	f023 0201 	bic.w	r2, r3, #1
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	601a      	str	r2, [r3, #0]
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	3b04      	subs	r3, #4
 800c942:	60fb      	str	r3, [r7, #12]
 800c944:	4a08      	ldr	r2, [pc, #32]	; (800c968 <pxPortInitialiseStack+0x54>)
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	601a      	str	r2, [r3, #0]
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	3b14      	subs	r3, #20
 800c94e:	60fb      	str	r3, [r7, #12]
 800c950:	687a      	ldr	r2, [r7, #4]
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	601a      	str	r2, [r3, #0]
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	3b20      	subs	r3, #32
 800c95a:	60fb      	str	r3, [r7, #12]
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	4618      	mov	r0, r3
 800c960:	3714      	adds	r7, #20
 800c962:	46bd      	mov	sp, r7
 800c964:	bc80      	pop	{r7}
 800c966:	4770      	bx	lr
 800c968:	0800c96d 	.word	0x0800c96d

0800c96c <prvTaskExitError>:
 800c96c:	b480      	push	{r7}
 800c96e:	b085      	sub	sp, #20
 800c970:	af00      	add	r7, sp, #0
 800c972:	2300      	movs	r3, #0
 800c974:	607b      	str	r3, [r7, #4]
 800c976:	4b12      	ldr	r3, [pc, #72]	; (800c9c0 <prvTaskExitError+0x54>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c97e:	d00a      	beq.n	800c996 <prvTaskExitError+0x2a>
 800c980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c984:	f383 8811 	msr	BASEPRI, r3
 800c988:	f3bf 8f6f 	isb	sy
 800c98c:	f3bf 8f4f 	dsb	sy
 800c990:	60fb      	str	r3, [r7, #12]
 800c992:	bf00      	nop
 800c994:	e7fe      	b.n	800c994 <prvTaskExitError+0x28>
 800c996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c99a:	f383 8811 	msr	BASEPRI, r3
 800c99e:	f3bf 8f6f 	isb	sy
 800c9a2:	f3bf 8f4f 	dsb	sy
 800c9a6:	60bb      	str	r3, [r7, #8]
 800c9a8:	bf00      	nop
 800c9aa:	bf00      	nop
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d0fc      	beq.n	800c9ac <prvTaskExitError+0x40>
 800c9b2:	bf00      	nop
 800c9b4:	bf00      	nop
 800c9b6:	3714      	adds	r7, #20
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bc80      	pop	{r7}
 800c9bc:	4770      	bx	lr
 800c9be:	bf00      	nop
 800c9c0:	20000038 	.word	0x20000038
	...

0800c9d0 <SVC_Handler>:
 800c9d0:	4b07      	ldr	r3, [pc, #28]	; (800c9f0 <pxCurrentTCBConst2>)
 800c9d2:	6819      	ldr	r1, [r3, #0]
 800c9d4:	6808      	ldr	r0, [r1, #0]
 800c9d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c9da:	f380 8809 	msr	PSP, r0
 800c9de:	f3bf 8f6f 	isb	sy
 800c9e2:	f04f 0000 	mov.w	r0, #0
 800c9e6:	f380 8811 	msr	BASEPRI, r0
 800c9ea:	f04e 0e0d 	orr.w	lr, lr, #13
 800c9ee:	4770      	bx	lr

0800c9f0 <pxCurrentTCBConst2>:
 800c9f0:	200000f4 	.word	0x200000f4
 800c9f4:	bf00      	nop
 800c9f6:	bf00      	nop

0800c9f8 <prvPortStartFirstTask>:
 800c9f8:	4806      	ldr	r0, [pc, #24]	; (800ca14 <prvPortStartFirstTask+0x1c>)
 800c9fa:	6800      	ldr	r0, [r0, #0]
 800c9fc:	6800      	ldr	r0, [r0, #0]
 800c9fe:	f380 8808 	msr	MSP, r0
 800ca02:	b662      	cpsie	i
 800ca04:	b661      	cpsie	f
 800ca06:	f3bf 8f4f 	dsb	sy
 800ca0a:	f3bf 8f6f 	isb	sy
 800ca0e:	df00      	svc	0
 800ca10:	bf00      	nop
 800ca12:	0000      	.short	0x0000
 800ca14:	e000ed08 	.word	0xe000ed08
 800ca18:	bf00      	nop
 800ca1a:	bf00      	nop

0800ca1c <xPortStartScheduler>:
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b084      	sub	sp, #16
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	4b32      	ldr	r3, [pc, #200]	; (800caec <xPortStartScheduler+0xd0>)
 800ca24:	60fb      	str	r3, [r7, #12]
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	781b      	ldrb	r3, [r3, #0]
 800ca2a:	b2db      	uxtb	r3, r3
 800ca2c:	607b      	str	r3, [r7, #4]
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	22ff      	movs	r2, #255	; 0xff
 800ca32:	701a      	strb	r2, [r3, #0]
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	781b      	ldrb	r3, [r3, #0]
 800ca38:	b2db      	uxtb	r3, r3
 800ca3a:	70fb      	strb	r3, [r7, #3]
 800ca3c:	78fb      	ldrb	r3, [r7, #3]
 800ca3e:	b2db      	uxtb	r3, r3
 800ca40:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ca44:	b2da      	uxtb	r2, r3
 800ca46:	4b2a      	ldr	r3, [pc, #168]	; (800caf0 <xPortStartScheduler+0xd4>)
 800ca48:	701a      	strb	r2, [r3, #0]
 800ca4a:	4b2a      	ldr	r3, [pc, #168]	; (800caf4 <xPortStartScheduler+0xd8>)
 800ca4c:	2207      	movs	r2, #7
 800ca4e:	601a      	str	r2, [r3, #0]
 800ca50:	e009      	b.n	800ca66 <xPortStartScheduler+0x4a>
 800ca52:	4b28      	ldr	r3, [pc, #160]	; (800caf4 <xPortStartScheduler+0xd8>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	3b01      	subs	r3, #1
 800ca58:	4a26      	ldr	r2, [pc, #152]	; (800caf4 <xPortStartScheduler+0xd8>)
 800ca5a:	6013      	str	r3, [r2, #0]
 800ca5c:	78fb      	ldrb	r3, [r7, #3]
 800ca5e:	b2db      	uxtb	r3, r3
 800ca60:	005b      	lsls	r3, r3, #1
 800ca62:	b2db      	uxtb	r3, r3
 800ca64:	70fb      	strb	r3, [r7, #3]
 800ca66:	78fb      	ldrb	r3, [r7, #3]
 800ca68:	b2db      	uxtb	r3, r3
 800ca6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca6e:	2b80      	cmp	r3, #128	; 0x80
 800ca70:	d0ef      	beq.n	800ca52 <xPortStartScheduler+0x36>
 800ca72:	4b20      	ldr	r3, [pc, #128]	; (800caf4 <xPortStartScheduler+0xd8>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f1c3 0307 	rsb	r3, r3, #7
 800ca7a:	2b04      	cmp	r3, #4
 800ca7c:	d00a      	beq.n	800ca94 <xPortStartScheduler+0x78>
 800ca7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca82:	f383 8811 	msr	BASEPRI, r3
 800ca86:	f3bf 8f6f 	isb	sy
 800ca8a:	f3bf 8f4f 	dsb	sy
 800ca8e:	60bb      	str	r3, [r7, #8]
 800ca90:	bf00      	nop
 800ca92:	e7fe      	b.n	800ca92 <xPortStartScheduler+0x76>
 800ca94:	4b17      	ldr	r3, [pc, #92]	; (800caf4 <xPortStartScheduler+0xd8>)
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	021b      	lsls	r3, r3, #8
 800ca9a:	4a16      	ldr	r2, [pc, #88]	; (800caf4 <xPortStartScheduler+0xd8>)
 800ca9c:	6013      	str	r3, [r2, #0]
 800ca9e:	4b15      	ldr	r3, [pc, #84]	; (800caf4 <xPortStartScheduler+0xd8>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800caa6:	4a13      	ldr	r2, [pc, #76]	; (800caf4 <xPortStartScheduler+0xd8>)
 800caa8:	6013      	str	r3, [r2, #0]
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	b2da      	uxtb	r2, r3
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	701a      	strb	r2, [r3, #0]
 800cab2:	4b11      	ldr	r3, [pc, #68]	; (800caf8 <xPortStartScheduler+0xdc>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	4a10      	ldr	r2, [pc, #64]	; (800caf8 <xPortStartScheduler+0xdc>)
 800cab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cabc:	6013      	str	r3, [r2, #0]
 800cabe:	4b0e      	ldr	r3, [pc, #56]	; (800caf8 <xPortStartScheduler+0xdc>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	4a0d      	ldr	r2, [pc, #52]	; (800caf8 <xPortStartScheduler+0xdc>)
 800cac4:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cac8:	6013      	str	r3, [r2, #0]
 800caca:	f000 f981 	bl	800cdd0 <vPortSetupTimerInterrupt>
 800cace:	4b0b      	ldr	r3, [pc, #44]	; (800cafc <xPortStartScheduler+0xe0>)
 800cad0:	2200      	movs	r2, #0
 800cad2:	601a      	str	r2, [r3, #0]
 800cad4:	f7ff ff90 	bl	800c9f8 <prvPortStartFirstTask>
 800cad8:	f7fe fe46 	bl	800b768 <vTaskSwitchContext>
 800cadc:	f7ff ff46 	bl	800c96c <prvTaskExitError>
 800cae0:	2300      	movs	r3, #0
 800cae2:	4618      	mov	r0, r3
 800cae4:	3710      	adds	r7, #16
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}
 800caea:	bf00      	nop
 800caec:	e000e400 	.word	0xe000e400
 800caf0:	20000240 	.word	0x20000240
 800caf4:	20000244 	.word	0x20000244
 800caf8:	e000ed20 	.word	0xe000ed20
 800cafc:	20000038 	.word	0x20000038

0800cb00 <vPortEnterCritical>:
 800cb00:	b480      	push	{r7}
 800cb02:	b083      	sub	sp, #12
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb0a:	f383 8811 	msr	BASEPRI, r3
 800cb0e:	f3bf 8f6f 	isb	sy
 800cb12:	f3bf 8f4f 	dsb	sy
 800cb16:	607b      	str	r3, [r7, #4]
 800cb18:	bf00      	nop
 800cb1a:	4b0f      	ldr	r3, [pc, #60]	; (800cb58 <vPortEnterCritical+0x58>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	3301      	adds	r3, #1
 800cb20:	4a0d      	ldr	r2, [pc, #52]	; (800cb58 <vPortEnterCritical+0x58>)
 800cb22:	6013      	str	r3, [r2, #0]
 800cb24:	4b0c      	ldr	r3, [pc, #48]	; (800cb58 <vPortEnterCritical+0x58>)
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	2b01      	cmp	r3, #1
 800cb2a:	d10f      	bne.n	800cb4c <vPortEnterCritical+0x4c>
 800cb2c:	4b0b      	ldr	r3, [pc, #44]	; (800cb5c <vPortEnterCritical+0x5c>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	b2db      	uxtb	r3, r3
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d00a      	beq.n	800cb4c <vPortEnterCritical+0x4c>
 800cb36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb3a:	f383 8811 	msr	BASEPRI, r3
 800cb3e:	f3bf 8f6f 	isb	sy
 800cb42:	f3bf 8f4f 	dsb	sy
 800cb46:	603b      	str	r3, [r7, #0]
 800cb48:	bf00      	nop
 800cb4a:	e7fe      	b.n	800cb4a <vPortEnterCritical+0x4a>
 800cb4c:	bf00      	nop
 800cb4e:	370c      	adds	r7, #12
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bc80      	pop	{r7}
 800cb54:	4770      	bx	lr
 800cb56:	bf00      	nop
 800cb58:	20000038 	.word	0x20000038
 800cb5c:	e000ed04 	.word	0xe000ed04

0800cb60 <vPortExitCritical>:
 800cb60:	b480      	push	{r7}
 800cb62:	b083      	sub	sp, #12
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	4b11      	ldr	r3, [pc, #68]	; (800cbac <vPortExitCritical+0x4c>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d10a      	bne.n	800cb84 <vPortExitCritical+0x24>
 800cb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb72:	f383 8811 	msr	BASEPRI, r3
 800cb76:	f3bf 8f6f 	isb	sy
 800cb7a:	f3bf 8f4f 	dsb	sy
 800cb7e:	607b      	str	r3, [r7, #4]
 800cb80:	bf00      	nop
 800cb82:	e7fe      	b.n	800cb82 <vPortExitCritical+0x22>
 800cb84:	4b09      	ldr	r3, [pc, #36]	; (800cbac <vPortExitCritical+0x4c>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	3b01      	subs	r3, #1
 800cb8a:	4a08      	ldr	r2, [pc, #32]	; (800cbac <vPortExitCritical+0x4c>)
 800cb8c:	6013      	str	r3, [r2, #0]
 800cb8e:	4b07      	ldr	r3, [pc, #28]	; (800cbac <vPortExitCritical+0x4c>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d105      	bne.n	800cba2 <vPortExitCritical+0x42>
 800cb96:	2300      	movs	r3, #0
 800cb98:	603b      	str	r3, [r7, #0]
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	f383 8811 	msr	BASEPRI, r3
 800cba0:	bf00      	nop
 800cba2:	bf00      	nop
 800cba4:	370c      	adds	r7, #12
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bc80      	pop	{r7}
 800cbaa:	4770      	bx	lr
 800cbac:	20000038 	.word	0x20000038

0800cbb0 <PendSV_Handler>:
 800cbb0:	f3ef 8009 	mrs	r0, PSP
 800cbb4:	f3bf 8f6f 	isb	sy
 800cbb8:	4b0d      	ldr	r3, [pc, #52]	; (800cbf0 <pxCurrentTCBConst>)
 800cbba:	681a      	ldr	r2, [r3, #0]
 800cbbc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800cbc0:	6010      	str	r0, [r2, #0]
 800cbc2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800cbc6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cbca:	f380 8811 	msr	BASEPRI, r0
 800cbce:	f7fe fdcb 	bl	800b768 <vTaskSwitchContext>
 800cbd2:	f04f 0000 	mov.w	r0, #0
 800cbd6:	f380 8811 	msr	BASEPRI, r0
 800cbda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800cbde:	6819      	ldr	r1, [r3, #0]
 800cbe0:	6808      	ldr	r0, [r1, #0]
 800cbe2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800cbe6:	f380 8809 	msr	PSP, r0
 800cbea:	f3bf 8f6f 	isb	sy
 800cbee:	4770      	bx	lr

0800cbf0 <pxCurrentTCBConst>:
 800cbf0:	200000f4 	.word	0x200000f4
 800cbf4:	bf00      	nop
 800cbf6:	bf00      	nop

0800cbf8 <SysTick_Handler>:
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b082      	sub	sp, #8
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc02:	f383 8811 	msr	BASEPRI, r3
 800cc06:	f3bf 8f6f 	isb	sy
 800cc0a:	f3bf 8f4f 	dsb	sy
 800cc0e:	607b      	str	r3, [r7, #4]
 800cc10:	bf00      	nop
 800cc12:	f7fe fc91 	bl	800b538 <xTaskIncrementTick>
 800cc16:	4603      	mov	r3, r0
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d003      	beq.n	800cc24 <SysTick_Handler+0x2c>
 800cc1c:	4b06      	ldr	r3, [pc, #24]	; (800cc38 <SysTick_Handler+0x40>)
 800cc1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc22:	601a      	str	r2, [r3, #0]
 800cc24:	2300      	movs	r3, #0
 800cc26:	603b      	str	r3, [r7, #0]
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	f383 8811 	msr	BASEPRI, r3
 800cc2e:	bf00      	nop
 800cc30:	bf00      	nop
 800cc32:	3708      	adds	r7, #8
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}
 800cc38:	e000ed04 	.word	0xe000ed04

0800cc3c <vPortSuppressTicksAndSleep>:
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b088      	sub	sp, #32
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
 800cc44:	4b5b      	ldr	r3, [pc, #364]	; (800cdb4 <vPortSuppressTicksAndSleep+0x178>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	687a      	ldr	r2, [r7, #4]
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d902      	bls.n	800cc54 <vPortSuppressTicksAndSleep+0x18>
 800cc4e:	4b59      	ldr	r3, [pc, #356]	; (800cdb4 <vPortSuppressTicksAndSleep+0x178>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	607b      	str	r3, [r7, #4]
 800cc54:	b672      	cpsid	i
 800cc56:	f3bf 8f4f 	dsb	sy
 800cc5a:	f3bf 8f6f 	isb	sy
 800cc5e:	f7fe ffe9 	bl	800bc34 <eTaskConfirmSleepModeStatus>
 800cc62:	4603      	mov	r3, r0
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d101      	bne.n	800cc6c <vPortSuppressTicksAndSleep+0x30>
 800cc68:	b662      	cpsie	i
 800cc6a:	e09e      	b.n	800cdaa <vPortSuppressTicksAndSleep+0x16e>
 800cc6c:	4b52      	ldr	r3, [pc, #328]	; (800cdb8 <vPortSuppressTicksAndSleep+0x17c>)
 800cc6e:	2206      	movs	r2, #6
 800cc70:	601a      	str	r2, [r3, #0]
 800cc72:	4b52      	ldr	r3, [pc, #328]	; (800cdbc <vPortSuppressTicksAndSleep+0x180>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	617b      	str	r3, [r7, #20]
 800cc78:	697b      	ldr	r3, [r7, #20]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d102      	bne.n	800cc84 <vPortSuppressTicksAndSleep+0x48>
 800cc7e:	4b50      	ldr	r3, [pc, #320]	; (800cdc0 <vPortSuppressTicksAndSleep+0x184>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	617b      	str	r3, [r7, #20]
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	3b01      	subs	r3, #1
 800cc88:	4a4d      	ldr	r2, [pc, #308]	; (800cdc0 <vPortSuppressTicksAndSleep+0x184>)
 800cc8a:	6812      	ldr	r2, [r2, #0]
 800cc8c:	fb02 f303 	mul.w	r3, r2, r3
 800cc90:	697a      	ldr	r2, [r7, #20]
 800cc92:	4413      	add	r3, r2
 800cc94:	61fb      	str	r3, [r7, #28]
 800cc96:	4b4b      	ldr	r3, [pc, #300]	; (800cdc4 <vPortSuppressTicksAndSleep+0x188>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d008      	beq.n	800ccb4 <vPortSuppressTicksAndSleep+0x78>
 800cca2:	4b48      	ldr	r3, [pc, #288]	; (800cdc4 <vPortSuppressTicksAndSleep+0x188>)
 800cca4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800cca8:	601a      	str	r2, [r3, #0]
 800ccaa:	4b45      	ldr	r3, [pc, #276]	; (800cdc0 <vPortSuppressTicksAndSleep+0x184>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	69fa      	ldr	r2, [r7, #28]
 800ccb0:	1ad3      	subs	r3, r2, r3
 800ccb2:	61fb      	str	r3, [r7, #28]
 800ccb4:	4b44      	ldr	r3, [pc, #272]	; (800cdc8 <vPortSuppressTicksAndSleep+0x18c>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	69fa      	ldr	r2, [r7, #28]
 800ccba:	429a      	cmp	r2, r3
 800ccbc:	d904      	bls.n	800ccc8 <vPortSuppressTicksAndSleep+0x8c>
 800ccbe:	4b42      	ldr	r3, [pc, #264]	; (800cdc8 <vPortSuppressTicksAndSleep+0x18c>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	69fa      	ldr	r2, [r7, #28]
 800ccc4:	1ad3      	subs	r3, r2, r3
 800ccc6:	61fb      	str	r3, [r7, #28]
 800ccc8:	4a40      	ldr	r2, [pc, #256]	; (800cdcc <vPortSuppressTicksAndSleep+0x190>)
 800ccca:	69fb      	ldr	r3, [r7, #28]
 800cccc:	6013      	str	r3, [r2, #0]
 800ccce:	4b3b      	ldr	r3, [pc, #236]	; (800cdbc <vPortSuppressTicksAndSleep+0x180>)
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	601a      	str	r2, [r3, #0]
 800ccd4:	4b38      	ldr	r3, [pc, #224]	; (800cdb8 <vPortSuppressTicksAndSleep+0x17c>)
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	4a37      	ldr	r2, [pc, #220]	; (800cdb8 <vPortSuppressTicksAndSleep+0x17c>)
 800ccda:	f043 0301 	orr.w	r3, r3, #1
 800ccde:	6013      	str	r3, [r2, #0]
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	60fb      	str	r3, [r7, #12]
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d004      	beq.n	800ccf4 <vPortSuppressTicksAndSleep+0xb8>
 800ccea:	f3bf 8f4f 	dsb	sy
 800ccee:	bf30      	wfi
 800ccf0:	f3bf 8f6f 	isb	sy
 800ccf4:	b662      	cpsie	i
 800ccf6:	f3bf 8f4f 	dsb	sy
 800ccfa:	f3bf 8f6f 	isb	sy
 800ccfe:	b672      	cpsid	i
 800cd00:	f3bf 8f4f 	dsb	sy
 800cd04:	f3bf 8f6f 	isb	sy
 800cd08:	4b2b      	ldr	r3, [pc, #172]	; (800cdb8 <vPortSuppressTicksAndSleep+0x17c>)
 800cd0a:	2206      	movs	r2, #6
 800cd0c:	601a      	str	r2, [r3, #0]
 800cd0e:	4b2a      	ldr	r3, [pc, #168]	; (800cdb8 <vPortSuppressTicksAndSleep+0x17c>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d01d      	beq.n	800cd56 <vPortSuppressTicksAndSleep+0x11a>
 800cd1a:	4b29      	ldr	r3, [pc, #164]	; (800cdc0 <vPortSuppressTicksAndSleep+0x184>)
 800cd1c:	681a      	ldr	r2, [r3, #0]
 800cd1e:	4b27      	ldr	r3, [pc, #156]	; (800cdbc <vPortSuppressTicksAndSleep+0x180>)
 800cd20:	6819      	ldr	r1, [r3, #0]
 800cd22:	69fb      	ldr	r3, [r7, #28]
 800cd24:	1acb      	subs	r3, r1, r3
 800cd26:	4413      	add	r3, r2
 800cd28:	3b01      	subs	r3, #1
 800cd2a:	613b      	str	r3, [r7, #16]
 800cd2c:	4b26      	ldr	r3, [pc, #152]	; (800cdc8 <vPortSuppressTicksAndSleep+0x18c>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	693a      	ldr	r2, [r7, #16]
 800cd32:	429a      	cmp	r2, r3
 800cd34:	d904      	bls.n	800cd40 <vPortSuppressTicksAndSleep+0x104>
 800cd36:	4b22      	ldr	r3, [pc, #136]	; (800cdc0 <vPortSuppressTicksAndSleep+0x184>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	693a      	ldr	r2, [r7, #16]
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	d903      	bls.n	800cd48 <vPortSuppressTicksAndSleep+0x10c>
 800cd40:	4b1f      	ldr	r3, [pc, #124]	; (800cdc0 <vPortSuppressTicksAndSleep+0x184>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	3b01      	subs	r3, #1
 800cd46:	613b      	str	r3, [r7, #16]
 800cd48:	4a20      	ldr	r2, [pc, #128]	; (800cdcc <vPortSuppressTicksAndSleep+0x190>)
 800cd4a:	693b      	ldr	r3, [r7, #16]
 800cd4c:	6013      	str	r3, [r2, #0]
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	3b01      	subs	r3, #1
 800cd52:	61bb      	str	r3, [r7, #24]
 800cd54:	e01a      	b.n	800cd8c <vPortSuppressTicksAndSleep+0x150>
 800cd56:	4b19      	ldr	r3, [pc, #100]	; (800cdbc <vPortSuppressTicksAndSleep+0x180>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	617b      	str	r3, [r7, #20]
 800cd5c:	4b18      	ldr	r3, [pc, #96]	; (800cdc0 <vPortSuppressTicksAndSleep+0x184>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	687a      	ldr	r2, [r7, #4]
 800cd62:	fb02 f203 	mul.w	r2, r2, r3
 800cd66:	697b      	ldr	r3, [r7, #20]
 800cd68:	1ad3      	subs	r3, r2, r3
 800cd6a:	60bb      	str	r3, [r7, #8]
 800cd6c:	4b14      	ldr	r3, [pc, #80]	; (800cdc0 <vPortSuppressTicksAndSleep+0x184>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	68ba      	ldr	r2, [r7, #8]
 800cd72:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd76:	61bb      	str	r3, [r7, #24]
 800cd78:	69bb      	ldr	r3, [r7, #24]
 800cd7a:	3301      	adds	r3, #1
 800cd7c:	4a10      	ldr	r2, [pc, #64]	; (800cdc0 <vPortSuppressTicksAndSleep+0x184>)
 800cd7e:	6812      	ldr	r2, [r2, #0]
 800cd80:	fb02 f203 	mul.w	r2, r2, r3
 800cd84:	4911      	ldr	r1, [pc, #68]	; (800cdcc <vPortSuppressTicksAndSleep+0x190>)
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	1ad3      	subs	r3, r2, r3
 800cd8a:	600b      	str	r3, [r1, #0]
 800cd8c:	4b0b      	ldr	r3, [pc, #44]	; (800cdbc <vPortSuppressTicksAndSleep+0x180>)
 800cd8e:	2200      	movs	r2, #0
 800cd90:	601a      	str	r2, [r3, #0]
 800cd92:	4b09      	ldr	r3, [pc, #36]	; (800cdb8 <vPortSuppressTicksAndSleep+0x17c>)
 800cd94:	2207      	movs	r2, #7
 800cd96:	601a      	str	r2, [r3, #0]
 800cd98:	4b09      	ldr	r3, [pc, #36]	; (800cdc0 <vPortSuppressTicksAndSleep+0x184>)
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	4a0b      	ldr	r2, [pc, #44]	; (800cdcc <vPortSuppressTicksAndSleep+0x190>)
 800cd9e:	3b01      	subs	r3, #1
 800cda0:	6013      	str	r3, [r2, #0]
 800cda2:	69b8      	ldr	r0, [r7, #24]
 800cda4:	f7fe fb6e 	bl	800b484 <vTaskStepTick>
 800cda8:	b662      	cpsie	i
 800cdaa:	bf00      	nop
 800cdac:	3720      	adds	r7, #32
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}
 800cdb2:	bf00      	nop
 800cdb4:	20000238 	.word	0x20000238
 800cdb8:	e000e010 	.word	0xe000e010
 800cdbc:	e000e018 	.word	0xe000e018
 800cdc0:	20000234 	.word	0x20000234
 800cdc4:	e000ed04 	.word	0xe000ed04
 800cdc8:	2000023c 	.word	0x2000023c
 800cdcc:	e000e014 	.word	0xe000e014

0800cdd0 <vPortSetupTimerInterrupt>:
 800cdd0:	b480      	push	{r7}
 800cdd2:	af00      	add	r7, sp, #0
 800cdd4:	4b14      	ldr	r3, [pc, #80]	; (800ce28 <vPortSetupTimerInterrupt+0x58>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	4a14      	ldr	r2, [pc, #80]	; (800ce2c <vPortSetupTimerInterrupt+0x5c>)
 800cdda:	fba2 2303 	umull	r2, r3, r2, r3
 800cdde:	099b      	lsrs	r3, r3, #6
 800cde0:	4a13      	ldr	r2, [pc, #76]	; (800ce30 <vPortSetupTimerInterrupt+0x60>)
 800cde2:	6013      	str	r3, [r2, #0]
 800cde4:	4b12      	ldr	r3, [pc, #72]	; (800ce30 <vPortSetupTimerInterrupt+0x60>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800cdec:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdf0:	4a10      	ldr	r2, [pc, #64]	; (800ce34 <vPortSetupTimerInterrupt+0x64>)
 800cdf2:	6013      	str	r3, [r2, #0]
 800cdf4:	4b10      	ldr	r3, [pc, #64]	; (800ce38 <vPortSetupTimerInterrupt+0x68>)
 800cdf6:	225e      	movs	r2, #94	; 0x5e
 800cdf8:	601a      	str	r2, [r3, #0]
 800cdfa:	4b10      	ldr	r3, [pc, #64]	; (800ce3c <vPortSetupTimerInterrupt+0x6c>)
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	601a      	str	r2, [r3, #0]
 800ce00:	4b0f      	ldr	r3, [pc, #60]	; (800ce40 <vPortSetupTimerInterrupt+0x70>)
 800ce02:	2200      	movs	r2, #0
 800ce04:	601a      	str	r2, [r3, #0]
 800ce06:	4b08      	ldr	r3, [pc, #32]	; (800ce28 <vPortSetupTimerInterrupt+0x58>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	4a08      	ldr	r2, [pc, #32]	; (800ce2c <vPortSetupTimerInterrupt+0x5c>)
 800ce0c:	fba2 2303 	umull	r2, r3, r2, r3
 800ce10:	099b      	lsrs	r3, r3, #6
 800ce12:	4a0c      	ldr	r2, [pc, #48]	; (800ce44 <vPortSetupTimerInterrupt+0x74>)
 800ce14:	3b01      	subs	r3, #1
 800ce16:	6013      	str	r3, [r2, #0]
 800ce18:	4b08      	ldr	r3, [pc, #32]	; (800ce3c <vPortSetupTimerInterrupt+0x6c>)
 800ce1a:	2207      	movs	r2, #7
 800ce1c:	601a      	str	r2, [r3, #0]
 800ce1e:	bf00      	nop
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bc80      	pop	{r7}
 800ce24:	4770      	bx	lr
 800ce26:	bf00      	nop
 800ce28:	20000014 	.word	0x20000014
 800ce2c:	10624dd3 	.word	0x10624dd3
 800ce30:	20000234 	.word	0x20000234
 800ce34:	20000238 	.word	0x20000238
 800ce38:	2000023c 	.word	0x2000023c
 800ce3c:	e000e010 	.word	0xe000e010
 800ce40:	e000e018 	.word	0xe000e018
 800ce44:	e000e014 	.word	0xe000e014

0800ce48 <vPortValidateInterruptPriority>:
 800ce48:	b480      	push	{r7}
 800ce4a:	b085      	sub	sp, #20
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	f3ef 8305 	mrs	r3, IPSR
 800ce52:	60fb      	str	r3, [r7, #12]
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	2b0f      	cmp	r3, #15
 800ce58:	d914      	bls.n	800ce84 <vPortValidateInterruptPriority+0x3c>
 800ce5a:	4a16      	ldr	r2, [pc, #88]	; (800ceb4 <vPortValidateInterruptPriority+0x6c>)
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	4413      	add	r3, r2
 800ce60:	781b      	ldrb	r3, [r3, #0]
 800ce62:	72fb      	strb	r3, [r7, #11]
 800ce64:	4b14      	ldr	r3, [pc, #80]	; (800ceb8 <vPortValidateInterruptPriority+0x70>)
 800ce66:	781b      	ldrb	r3, [r3, #0]
 800ce68:	7afa      	ldrb	r2, [r7, #11]
 800ce6a:	429a      	cmp	r2, r3
 800ce6c:	d20a      	bcs.n	800ce84 <vPortValidateInterruptPriority+0x3c>
 800ce6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce72:	f383 8811 	msr	BASEPRI, r3
 800ce76:	f3bf 8f6f 	isb	sy
 800ce7a:	f3bf 8f4f 	dsb	sy
 800ce7e:	607b      	str	r3, [r7, #4]
 800ce80:	bf00      	nop
 800ce82:	e7fe      	b.n	800ce82 <vPortValidateInterruptPriority+0x3a>
 800ce84:	4b0d      	ldr	r3, [pc, #52]	; (800cebc <vPortValidateInterruptPriority+0x74>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ce8c:	4b0c      	ldr	r3, [pc, #48]	; (800cec0 <vPortValidateInterruptPriority+0x78>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d90a      	bls.n	800ceaa <vPortValidateInterruptPriority+0x62>
 800ce94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce98:	f383 8811 	msr	BASEPRI, r3
 800ce9c:	f3bf 8f6f 	isb	sy
 800cea0:	f3bf 8f4f 	dsb	sy
 800cea4:	603b      	str	r3, [r7, #0]
 800cea6:	bf00      	nop
 800cea8:	e7fe      	b.n	800cea8 <vPortValidateInterruptPriority+0x60>
 800ceaa:	bf00      	nop
 800ceac:	3714      	adds	r7, #20
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bc80      	pop	{r7}
 800ceb2:	4770      	bx	lr
 800ceb4:	e000e3f0 	.word	0xe000e3f0
 800ceb8:	20000240 	.word	0x20000240
 800cebc:	e000ed0c 	.word	0xe000ed0c
 800cec0:	20000244 	.word	0x20000244

0800cec4 <__errno>:
 800cec4:	4b01      	ldr	r3, [pc, #4]	; (800cecc <__errno+0x8>)
 800cec6:	6818      	ldr	r0, [r3, #0]
 800cec8:	4770      	bx	lr
 800ceca:	bf00      	nop
 800cecc:	2000003c 	.word	0x2000003c

0800ced0 <__libc_init_array>:
 800ced0:	b570      	push	{r4, r5, r6, lr}
 800ced2:	2600      	movs	r6, #0
 800ced4:	4d0c      	ldr	r5, [pc, #48]	; (800cf08 <__libc_init_array+0x38>)
 800ced6:	4c0d      	ldr	r4, [pc, #52]	; (800cf0c <__libc_init_array+0x3c>)
 800ced8:	1b64      	subs	r4, r4, r5
 800ceda:	10a4      	asrs	r4, r4, #2
 800cedc:	42a6      	cmp	r6, r4
 800cede:	d109      	bne.n	800cef4 <__libc_init_array+0x24>
 800cee0:	f000 fd4c 	bl	800d97c <_init>
 800cee4:	2600      	movs	r6, #0
 800cee6:	4d0a      	ldr	r5, [pc, #40]	; (800cf10 <__libc_init_array+0x40>)
 800cee8:	4c0a      	ldr	r4, [pc, #40]	; (800cf14 <__libc_init_array+0x44>)
 800ceea:	1b64      	subs	r4, r4, r5
 800ceec:	10a4      	asrs	r4, r4, #2
 800ceee:	42a6      	cmp	r6, r4
 800cef0:	d105      	bne.n	800cefe <__libc_init_array+0x2e>
 800cef2:	bd70      	pop	{r4, r5, r6, pc}
 800cef4:	f855 3b04 	ldr.w	r3, [r5], #4
 800cef8:	4798      	blx	r3
 800cefa:	3601      	adds	r6, #1
 800cefc:	e7ee      	b.n	800cedc <__libc_init_array+0xc>
 800cefe:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf02:	4798      	blx	r3
 800cf04:	3601      	adds	r6, #1
 800cf06:	e7f2      	b.n	800ceee <__libc_init_array+0x1e>
 800cf08:	0800dcc8 	.word	0x0800dcc8
 800cf0c:	0800dcc8 	.word	0x0800dcc8
 800cf10:	0800dcc8 	.word	0x0800dcc8
 800cf14:	0800dccc 	.word	0x0800dccc

0800cf18 <malloc>:
 800cf18:	4b02      	ldr	r3, [pc, #8]	; (800cf24 <malloc+0xc>)
 800cf1a:	4601      	mov	r1, r0
 800cf1c:	6818      	ldr	r0, [r3, #0]
 800cf1e:	f000 b86d 	b.w	800cffc <_malloc_r>
 800cf22:	bf00      	nop
 800cf24:	2000003c 	.word	0x2000003c

0800cf28 <free>:
 800cf28:	4b02      	ldr	r3, [pc, #8]	; (800cf34 <free+0xc>)
 800cf2a:	4601      	mov	r1, r0
 800cf2c:	6818      	ldr	r0, [r3, #0]
 800cf2e:	f000 b819 	b.w	800cf64 <_free_r>
 800cf32:	bf00      	nop
 800cf34:	2000003c 	.word	0x2000003c

0800cf38 <memcpy>:
 800cf38:	440a      	add	r2, r1
 800cf3a:	4291      	cmp	r1, r2
 800cf3c:	f100 33ff 	add.w	r3, r0, #4294967295
 800cf40:	d100      	bne.n	800cf44 <memcpy+0xc>
 800cf42:	4770      	bx	lr
 800cf44:	b510      	push	{r4, lr}
 800cf46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf4a:	4291      	cmp	r1, r2
 800cf4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf50:	d1f9      	bne.n	800cf46 <memcpy+0xe>
 800cf52:	bd10      	pop	{r4, pc}

0800cf54 <memset>:
 800cf54:	4603      	mov	r3, r0
 800cf56:	4402      	add	r2, r0
 800cf58:	4293      	cmp	r3, r2
 800cf5a:	d100      	bne.n	800cf5e <memset+0xa>
 800cf5c:	4770      	bx	lr
 800cf5e:	f803 1b01 	strb.w	r1, [r3], #1
 800cf62:	e7f9      	b.n	800cf58 <memset+0x4>

0800cf64 <_free_r>:
 800cf64:	b538      	push	{r3, r4, r5, lr}
 800cf66:	4605      	mov	r5, r0
 800cf68:	2900      	cmp	r1, #0
 800cf6a:	d043      	beq.n	800cff4 <_free_r+0x90>
 800cf6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf70:	1f0c      	subs	r4, r1, #4
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	bfb8      	it	lt
 800cf76:	18e4      	addlt	r4, r4, r3
 800cf78:	f000 f9aa 	bl	800d2d0 <__malloc_lock>
 800cf7c:	4a1e      	ldr	r2, [pc, #120]	; (800cff8 <_free_r+0x94>)
 800cf7e:	6813      	ldr	r3, [r2, #0]
 800cf80:	4610      	mov	r0, r2
 800cf82:	b933      	cbnz	r3, 800cf92 <_free_r+0x2e>
 800cf84:	6063      	str	r3, [r4, #4]
 800cf86:	6014      	str	r4, [r2, #0]
 800cf88:	4628      	mov	r0, r5
 800cf8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf8e:	f000 b9a5 	b.w	800d2dc <__malloc_unlock>
 800cf92:	42a3      	cmp	r3, r4
 800cf94:	d90a      	bls.n	800cfac <_free_r+0x48>
 800cf96:	6821      	ldr	r1, [r4, #0]
 800cf98:	1862      	adds	r2, r4, r1
 800cf9a:	4293      	cmp	r3, r2
 800cf9c:	bf01      	itttt	eq
 800cf9e:	681a      	ldreq	r2, [r3, #0]
 800cfa0:	685b      	ldreq	r3, [r3, #4]
 800cfa2:	1852      	addeq	r2, r2, r1
 800cfa4:	6022      	streq	r2, [r4, #0]
 800cfa6:	6063      	str	r3, [r4, #4]
 800cfa8:	6004      	str	r4, [r0, #0]
 800cfaa:	e7ed      	b.n	800cf88 <_free_r+0x24>
 800cfac:	461a      	mov	r2, r3
 800cfae:	685b      	ldr	r3, [r3, #4]
 800cfb0:	b10b      	cbz	r3, 800cfb6 <_free_r+0x52>
 800cfb2:	42a3      	cmp	r3, r4
 800cfb4:	d9fa      	bls.n	800cfac <_free_r+0x48>
 800cfb6:	6811      	ldr	r1, [r2, #0]
 800cfb8:	1850      	adds	r0, r2, r1
 800cfba:	42a0      	cmp	r0, r4
 800cfbc:	d10b      	bne.n	800cfd6 <_free_r+0x72>
 800cfbe:	6820      	ldr	r0, [r4, #0]
 800cfc0:	4401      	add	r1, r0
 800cfc2:	1850      	adds	r0, r2, r1
 800cfc4:	4283      	cmp	r3, r0
 800cfc6:	6011      	str	r1, [r2, #0]
 800cfc8:	d1de      	bne.n	800cf88 <_free_r+0x24>
 800cfca:	6818      	ldr	r0, [r3, #0]
 800cfcc:	685b      	ldr	r3, [r3, #4]
 800cfce:	4401      	add	r1, r0
 800cfd0:	6011      	str	r1, [r2, #0]
 800cfd2:	6053      	str	r3, [r2, #4]
 800cfd4:	e7d8      	b.n	800cf88 <_free_r+0x24>
 800cfd6:	d902      	bls.n	800cfde <_free_r+0x7a>
 800cfd8:	230c      	movs	r3, #12
 800cfda:	602b      	str	r3, [r5, #0]
 800cfdc:	e7d4      	b.n	800cf88 <_free_r+0x24>
 800cfde:	6820      	ldr	r0, [r4, #0]
 800cfe0:	1821      	adds	r1, r4, r0
 800cfe2:	428b      	cmp	r3, r1
 800cfe4:	bf01      	itttt	eq
 800cfe6:	6819      	ldreq	r1, [r3, #0]
 800cfe8:	685b      	ldreq	r3, [r3, #4]
 800cfea:	1809      	addeq	r1, r1, r0
 800cfec:	6021      	streq	r1, [r4, #0]
 800cfee:	6063      	str	r3, [r4, #4]
 800cff0:	6054      	str	r4, [r2, #4]
 800cff2:	e7c9      	b.n	800cf88 <_free_r+0x24>
 800cff4:	bd38      	pop	{r3, r4, r5, pc}
 800cff6:	bf00      	nop
 800cff8:	20000248 	.word	0x20000248

0800cffc <_malloc_r>:
 800cffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cffe:	1ccd      	adds	r5, r1, #3
 800d000:	f025 0503 	bic.w	r5, r5, #3
 800d004:	3508      	adds	r5, #8
 800d006:	2d0c      	cmp	r5, #12
 800d008:	bf38      	it	cc
 800d00a:	250c      	movcc	r5, #12
 800d00c:	2d00      	cmp	r5, #0
 800d00e:	4606      	mov	r6, r0
 800d010:	db01      	blt.n	800d016 <_malloc_r+0x1a>
 800d012:	42a9      	cmp	r1, r5
 800d014:	d903      	bls.n	800d01e <_malloc_r+0x22>
 800d016:	230c      	movs	r3, #12
 800d018:	6033      	str	r3, [r6, #0]
 800d01a:	2000      	movs	r0, #0
 800d01c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d01e:	f000 f957 	bl	800d2d0 <__malloc_lock>
 800d022:	4921      	ldr	r1, [pc, #132]	; (800d0a8 <_malloc_r+0xac>)
 800d024:	680a      	ldr	r2, [r1, #0]
 800d026:	4614      	mov	r4, r2
 800d028:	b99c      	cbnz	r4, 800d052 <_malloc_r+0x56>
 800d02a:	4f20      	ldr	r7, [pc, #128]	; (800d0ac <_malloc_r+0xb0>)
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	b923      	cbnz	r3, 800d03a <_malloc_r+0x3e>
 800d030:	4621      	mov	r1, r4
 800d032:	4630      	mov	r0, r6
 800d034:	f000 f83c 	bl	800d0b0 <_sbrk_r>
 800d038:	6038      	str	r0, [r7, #0]
 800d03a:	4629      	mov	r1, r5
 800d03c:	4630      	mov	r0, r6
 800d03e:	f000 f837 	bl	800d0b0 <_sbrk_r>
 800d042:	1c43      	adds	r3, r0, #1
 800d044:	d123      	bne.n	800d08e <_malloc_r+0x92>
 800d046:	230c      	movs	r3, #12
 800d048:	4630      	mov	r0, r6
 800d04a:	6033      	str	r3, [r6, #0]
 800d04c:	f000 f946 	bl	800d2dc <__malloc_unlock>
 800d050:	e7e3      	b.n	800d01a <_malloc_r+0x1e>
 800d052:	6823      	ldr	r3, [r4, #0]
 800d054:	1b5b      	subs	r3, r3, r5
 800d056:	d417      	bmi.n	800d088 <_malloc_r+0x8c>
 800d058:	2b0b      	cmp	r3, #11
 800d05a:	d903      	bls.n	800d064 <_malloc_r+0x68>
 800d05c:	6023      	str	r3, [r4, #0]
 800d05e:	441c      	add	r4, r3
 800d060:	6025      	str	r5, [r4, #0]
 800d062:	e004      	b.n	800d06e <_malloc_r+0x72>
 800d064:	6863      	ldr	r3, [r4, #4]
 800d066:	42a2      	cmp	r2, r4
 800d068:	bf0c      	ite	eq
 800d06a:	600b      	streq	r3, [r1, #0]
 800d06c:	6053      	strne	r3, [r2, #4]
 800d06e:	4630      	mov	r0, r6
 800d070:	f000 f934 	bl	800d2dc <__malloc_unlock>
 800d074:	f104 000b 	add.w	r0, r4, #11
 800d078:	1d23      	adds	r3, r4, #4
 800d07a:	f020 0007 	bic.w	r0, r0, #7
 800d07e:	1ac2      	subs	r2, r0, r3
 800d080:	d0cc      	beq.n	800d01c <_malloc_r+0x20>
 800d082:	1a1b      	subs	r3, r3, r0
 800d084:	50a3      	str	r3, [r4, r2]
 800d086:	e7c9      	b.n	800d01c <_malloc_r+0x20>
 800d088:	4622      	mov	r2, r4
 800d08a:	6864      	ldr	r4, [r4, #4]
 800d08c:	e7cc      	b.n	800d028 <_malloc_r+0x2c>
 800d08e:	1cc4      	adds	r4, r0, #3
 800d090:	f024 0403 	bic.w	r4, r4, #3
 800d094:	42a0      	cmp	r0, r4
 800d096:	d0e3      	beq.n	800d060 <_malloc_r+0x64>
 800d098:	1a21      	subs	r1, r4, r0
 800d09a:	4630      	mov	r0, r6
 800d09c:	f000 f808 	bl	800d0b0 <_sbrk_r>
 800d0a0:	3001      	adds	r0, #1
 800d0a2:	d1dd      	bne.n	800d060 <_malloc_r+0x64>
 800d0a4:	e7cf      	b.n	800d046 <_malloc_r+0x4a>
 800d0a6:	bf00      	nop
 800d0a8:	20000248 	.word	0x20000248
 800d0ac:	2000024c 	.word	0x2000024c

0800d0b0 <_sbrk_r>:
 800d0b0:	b538      	push	{r3, r4, r5, lr}
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	4d05      	ldr	r5, [pc, #20]	; (800d0cc <_sbrk_r+0x1c>)
 800d0b6:	4604      	mov	r4, r0
 800d0b8:	4608      	mov	r0, r1
 800d0ba:	602b      	str	r3, [r5, #0]
 800d0bc:	f7f5 fddc 	bl	8002c78 <_sbrk>
 800d0c0:	1c43      	adds	r3, r0, #1
 800d0c2:	d102      	bne.n	800d0ca <_sbrk_r+0x1a>
 800d0c4:	682b      	ldr	r3, [r5, #0]
 800d0c6:	b103      	cbz	r3, 800d0ca <_sbrk_r+0x1a>
 800d0c8:	6023      	str	r3, [r4, #0]
 800d0ca:	bd38      	pop	{r3, r4, r5, pc}
 800d0cc:	20000e48 	.word	0x20000e48

0800d0d0 <sniprintf>:
 800d0d0:	b40c      	push	{r2, r3}
 800d0d2:	b530      	push	{r4, r5, lr}
 800d0d4:	4b17      	ldr	r3, [pc, #92]	; (800d134 <sniprintf+0x64>)
 800d0d6:	1e0c      	subs	r4, r1, #0
 800d0d8:	681d      	ldr	r5, [r3, #0]
 800d0da:	b09d      	sub	sp, #116	; 0x74
 800d0dc:	da08      	bge.n	800d0f0 <sniprintf+0x20>
 800d0de:	238b      	movs	r3, #139	; 0x8b
 800d0e0:	f04f 30ff 	mov.w	r0, #4294967295
 800d0e4:	602b      	str	r3, [r5, #0]
 800d0e6:	b01d      	add	sp, #116	; 0x74
 800d0e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d0ec:	b002      	add	sp, #8
 800d0ee:	4770      	bx	lr
 800d0f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d0f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d0f8:	bf0c      	ite	eq
 800d0fa:	4623      	moveq	r3, r4
 800d0fc:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d100:	9304      	str	r3, [sp, #16]
 800d102:	9307      	str	r3, [sp, #28]
 800d104:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d108:	9002      	str	r0, [sp, #8]
 800d10a:	9006      	str	r0, [sp, #24]
 800d10c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d110:	4628      	mov	r0, r5
 800d112:	ab21      	add	r3, sp, #132	; 0x84
 800d114:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d116:	a902      	add	r1, sp, #8
 800d118:	9301      	str	r3, [sp, #4]
 800d11a:	f000 f941 	bl	800d3a0 <_svfiprintf_r>
 800d11e:	1c43      	adds	r3, r0, #1
 800d120:	bfbc      	itt	lt
 800d122:	238b      	movlt	r3, #139	; 0x8b
 800d124:	602b      	strlt	r3, [r5, #0]
 800d126:	2c00      	cmp	r4, #0
 800d128:	d0dd      	beq.n	800d0e6 <sniprintf+0x16>
 800d12a:	2200      	movs	r2, #0
 800d12c:	9b02      	ldr	r3, [sp, #8]
 800d12e:	701a      	strb	r2, [r3, #0]
 800d130:	e7d9      	b.n	800d0e6 <sniprintf+0x16>
 800d132:	bf00      	nop
 800d134:	2000003c 	.word	0x2000003c

0800d138 <siprintf>:
 800d138:	b40e      	push	{r1, r2, r3}
 800d13a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d13e:	b500      	push	{lr}
 800d140:	b09c      	sub	sp, #112	; 0x70
 800d142:	ab1d      	add	r3, sp, #116	; 0x74
 800d144:	9002      	str	r0, [sp, #8]
 800d146:	9006      	str	r0, [sp, #24]
 800d148:	9107      	str	r1, [sp, #28]
 800d14a:	9104      	str	r1, [sp, #16]
 800d14c:	4808      	ldr	r0, [pc, #32]	; (800d170 <siprintf+0x38>)
 800d14e:	4909      	ldr	r1, [pc, #36]	; (800d174 <siprintf+0x3c>)
 800d150:	f853 2b04 	ldr.w	r2, [r3], #4
 800d154:	9105      	str	r1, [sp, #20]
 800d156:	6800      	ldr	r0, [r0, #0]
 800d158:	a902      	add	r1, sp, #8
 800d15a:	9301      	str	r3, [sp, #4]
 800d15c:	f000 f920 	bl	800d3a0 <_svfiprintf_r>
 800d160:	2200      	movs	r2, #0
 800d162:	9b02      	ldr	r3, [sp, #8]
 800d164:	701a      	strb	r2, [r3, #0]
 800d166:	b01c      	add	sp, #112	; 0x70
 800d168:	f85d eb04 	ldr.w	lr, [sp], #4
 800d16c:	b003      	add	sp, #12
 800d16e:	4770      	bx	lr
 800d170:	2000003c 	.word	0x2000003c
 800d174:	ffff0208 	.word	0xffff0208

0800d178 <strcpy>:
 800d178:	4603      	mov	r3, r0
 800d17a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d17e:	f803 2b01 	strb.w	r2, [r3], #1
 800d182:	2a00      	cmp	r2, #0
 800d184:	d1f9      	bne.n	800d17a <strcpy+0x2>
 800d186:	4770      	bx	lr

0800d188 <strncpy>:
 800d188:	4603      	mov	r3, r0
 800d18a:	b510      	push	{r4, lr}
 800d18c:	3901      	subs	r1, #1
 800d18e:	b132      	cbz	r2, 800d19e <strncpy+0x16>
 800d190:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d194:	3a01      	subs	r2, #1
 800d196:	f803 4b01 	strb.w	r4, [r3], #1
 800d19a:	2c00      	cmp	r4, #0
 800d19c:	d1f7      	bne.n	800d18e <strncpy+0x6>
 800d19e:	2100      	movs	r1, #0
 800d1a0:	441a      	add	r2, r3
 800d1a2:	4293      	cmp	r3, r2
 800d1a4:	d100      	bne.n	800d1a8 <strncpy+0x20>
 800d1a6:	bd10      	pop	{r4, pc}
 800d1a8:	f803 1b01 	strb.w	r1, [r3], #1
 800d1ac:	e7f9      	b.n	800d1a2 <strncpy+0x1a>
	...

0800d1b0 <_strtol_l.isra.0>:
 800d1b0:	2b01      	cmp	r3, #1
 800d1b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1b6:	4686      	mov	lr, r0
 800d1b8:	d001      	beq.n	800d1be <_strtol_l.isra.0+0xe>
 800d1ba:	2b24      	cmp	r3, #36	; 0x24
 800d1bc:	d906      	bls.n	800d1cc <_strtol_l.isra.0+0x1c>
 800d1be:	f7ff fe81 	bl	800cec4 <__errno>
 800d1c2:	2316      	movs	r3, #22
 800d1c4:	6003      	str	r3, [r0, #0]
 800d1c6:	2000      	movs	r0, #0
 800d1c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1cc:	468c      	mov	ip, r1
 800d1ce:	4e3a      	ldr	r6, [pc, #232]	; (800d2b8 <_strtol_l.isra.0+0x108>)
 800d1d0:	4660      	mov	r0, ip
 800d1d2:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800d1d6:	5da5      	ldrb	r5, [r4, r6]
 800d1d8:	f015 0508 	ands.w	r5, r5, #8
 800d1dc:	d1f8      	bne.n	800d1d0 <_strtol_l.isra.0+0x20>
 800d1de:	2c2d      	cmp	r4, #45	; 0x2d
 800d1e0:	d133      	bne.n	800d24a <_strtol_l.isra.0+0x9a>
 800d1e2:	f04f 0801 	mov.w	r8, #1
 800d1e6:	f89c 4000 	ldrb.w	r4, [ip]
 800d1ea:	f100 0c02 	add.w	ip, r0, #2
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d05d      	beq.n	800d2ae <_strtol_l.isra.0+0xfe>
 800d1f2:	2b10      	cmp	r3, #16
 800d1f4:	d10c      	bne.n	800d210 <_strtol_l.isra.0+0x60>
 800d1f6:	2c30      	cmp	r4, #48	; 0x30
 800d1f8:	d10a      	bne.n	800d210 <_strtol_l.isra.0+0x60>
 800d1fa:	f89c 0000 	ldrb.w	r0, [ip]
 800d1fe:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d202:	2858      	cmp	r0, #88	; 0x58
 800d204:	d14e      	bne.n	800d2a4 <_strtol_l.isra.0+0xf4>
 800d206:	2310      	movs	r3, #16
 800d208:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800d20c:	f10c 0c02 	add.w	ip, ip, #2
 800d210:	2500      	movs	r5, #0
 800d212:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800d216:	3f01      	subs	r7, #1
 800d218:	fbb7 f9f3 	udiv	r9, r7, r3
 800d21c:	4628      	mov	r0, r5
 800d21e:	fb03 7a19 	mls	sl, r3, r9, r7
 800d222:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800d226:	2e09      	cmp	r6, #9
 800d228:	d818      	bhi.n	800d25c <_strtol_l.isra.0+0xac>
 800d22a:	4634      	mov	r4, r6
 800d22c:	42a3      	cmp	r3, r4
 800d22e:	dd24      	ble.n	800d27a <_strtol_l.isra.0+0xca>
 800d230:	2d00      	cmp	r5, #0
 800d232:	db1f      	blt.n	800d274 <_strtol_l.isra.0+0xc4>
 800d234:	4581      	cmp	r9, r0
 800d236:	d31d      	bcc.n	800d274 <_strtol_l.isra.0+0xc4>
 800d238:	d101      	bne.n	800d23e <_strtol_l.isra.0+0x8e>
 800d23a:	45a2      	cmp	sl, r4
 800d23c:	db1a      	blt.n	800d274 <_strtol_l.isra.0+0xc4>
 800d23e:	2501      	movs	r5, #1
 800d240:	fb00 4003 	mla	r0, r0, r3, r4
 800d244:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800d248:	e7eb      	b.n	800d222 <_strtol_l.isra.0+0x72>
 800d24a:	2c2b      	cmp	r4, #43	; 0x2b
 800d24c:	bf08      	it	eq
 800d24e:	f89c 4000 	ldrbeq.w	r4, [ip]
 800d252:	46a8      	mov	r8, r5
 800d254:	bf08      	it	eq
 800d256:	f100 0c02 	addeq.w	ip, r0, #2
 800d25a:	e7c8      	b.n	800d1ee <_strtol_l.isra.0+0x3e>
 800d25c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800d260:	2e19      	cmp	r6, #25
 800d262:	d801      	bhi.n	800d268 <_strtol_l.isra.0+0xb8>
 800d264:	3c37      	subs	r4, #55	; 0x37
 800d266:	e7e1      	b.n	800d22c <_strtol_l.isra.0+0x7c>
 800d268:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800d26c:	2e19      	cmp	r6, #25
 800d26e:	d804      	bhi.n	800d27a <_strtol_l.isra.0+0xca>
 800d270:	3c57      	subs	r4, #87	; 0x57
 800d272:	e7db      	b.n	800d22c <_strtol_l.isra.0+0x7c>
 800d274:	f04f 35ff 	mov.w	r5, #4294967295
 800d278:	e7e4      	b.n	800d244 <_strtol_l.isra.0+0x94>
 800d27a:	2d00      	cmp	r5, #0
 800d27c:	da08      	bge.n	800d290 <_strtol_l.isra.0+0xe0>
 800d27e:	2322      	movs	r3, #34	; 0x22
 800d280:	4638      	mov	r0, r7
 800d282:	f8ce 3000 	str.w	r3, [lr]
 800d286:	2a00      	cmp	r2, #0
 800d288:	d09e      	beq.n	800d1c8 <_strtol_l.isra.0+0x18>
 800d28a:	f10c 31ff 	add.w	r1, ip, #4294967295
 800d28e:	e007      	b.n	800d2a0 <_strtol_l.isra.0+0xf0>
 800d290:	f1b8 0f00 	cmp.w	r8, #0
 800d294:	d000      	beq.n	800d298 <_strtol_l.isra.0+0xe8>
 800d296:	4240      	negs	r0, r0
 800d298:	2a00      	cmp	r2, #0
 800d29a:	d095      	beq.n	800d1c8 <_strtol_l.isra.0+0x18>
 800d29c:	2d00      	cmp	r5, #0
 800d29e:	d1f4      	bne.n	800d28a <_strtol_l.isra.0+0xda>
 800d2a0:	6011      	str	r1, [r2, #0]
 800d2a2:	e791      	b.n	800d1c8 <_strtol_l.isra.0+0x18>
 800d2a4:	2430      	movs	r4, #48	; 0x30
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d1b2      	bne.n	800d210 <_strtol_l.isra.0+0x60>
 800d2aa:	2308      	movs	r3, #8
 800d2ac:	e7b0      	b.n	800d210 <_strtol_l.isra.0+0x60>
 800d2ae:	2c30      	cmp	r4, #48	; 0x30
 800d2b0:	d0a3      	beq.n	800d1fa <_strtol_l.isra.0+0x4a>
 800d2b2:	230a      	movs	r3, #10
 800d2b4:	e7ac      	b.n	800d210 <_strtol_l.isra.0+0x60>
 800d2b6:	bf00      	nop
 800d2b8:	0800db95 	.word	0x0800db95

0800d2bc <strtol>:
 800d2bc:	4613      	mov	r3, r2
 800d2be:	460a      	mov	r2, r1
 800d2c0:	4601      	mov	r1, r0
 800d2c2:	4802      	ldr	r0, [pc, #8]	; (800d2cc <strtol+0x10>)
 800d2c4:	6800      	ldr	r0, [r0, #0]
 800d2c6:	f7ff bf73 	b.w	800d1b0 <_strtol_l.isra.0>
 800d2ca:	bf00      	nop
 800d2cc:	2000003c 	.word	0x2000003c

0800d2d0 <__malloc_lock>:
 800d2d0:	4801      	ldr	r0, [pc, #4]	; (800d2d8 <__malloc_lock+0x8>)
 800d2d2:	f000 bafb 	b.w	800d8cc <__retarget_lock_acquire_recursive>
 800d2d6:	bf00      	nop
 800d2d8:	20000e50 	.word	0x20000e50

0800d2dc <__malloc_unlock>:
 800d2dc:	4801      	ldr	r0, [pc, #4]	; (800d2e4 <__malloc_unlock+0x8>)
 800d2de:	f000 baf6 	b.w	800d8ce <__retarget_lock_release_recursive>
 800d2e2:	bf00      	nop
 800d2e4:	20000e50 	.word	0x20000e50

0800d2e8 <__ssputs_r>:
 800d2e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2ec:	688e      	ldr	r6, [r1, #8]
 800d2ee:	4682      	mov	sl, r0
 800d2f0:	429e      	cmp	r6, r3
 800d2f2:	460c      	mov	r4, r1
 800d2f4:	4690      	mov	r8, r2
 800d2f6:	461f      	mov	r7, r3
 800d2f8:	d838      	bhi.n	800d36c <__ssputs_r+0x84>
 800d2fa:	898a      	ldrh	r2, [r1, #12]
 800d2fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d300:	d032      	beq.n	800d368 <__ssputs_r+0x80>
 800d302:	6825      	ldr	r5, [r4, #0]
 800d304:	6909      	ldr	r1, [r1, #16]
 800d306:	3301      	adds	r3, #1
 800d308:	eba5 0901 	sub.w	r9, r5, r1
 800d30c:	6965      	ldr	r5, [r4, #20]
 800d30e:	444b      	add	r3, r9
 800d310:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d314:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d318:	106d      	asrs	r5, r5, #1
 800d31a:	429d      	cmp	r5, r3
 800d31c:	bf38      	it	cc
 800d31e:	461d      	movcc	r5, r3
 800d320:	0553      	lsls	r3, r2, #21
 800d322:	d531      	bpl.n	800d388 <__ssputs_r+0xa0>
 800d324:	4629      	mov	r1, r5
 800d326:	f7ff fe69 	bl	800cffc <_malloc_r>
 800d32a:	4606      	mov	r6, r0
 800d32c:	b950      	cbnz	r0, 800d344 <__ssputs_r+0x5c>
 800d32e:	230c      	movs	r3, #12
 800d330:	f04f 30ff 	mov.w	r0, #4294967295
 800d334:	f8ca 3000 	str.w	r3, [sl]
 800d338:	89a3      	ldrh	r3, [r4, #12]
 800d33a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d33e:	81a3      	strh	r3, [r4, #12]
 800d340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d344:	464a      	mov	r2, r9
 800d346:	6921      	ldr	r1, [r4, #16]
 800d348:	f7ff fdf6 	bl	800cf38 <memcpy>
 800d34c:	89a3      	ldrh	r3, [r4, #12]
 800d34e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d356:	81a3      	strh	r3, [r4, #12]
 800d358:	6126      	str	r6, [r4, #16]
 800d35a:	444e      	add	r6, r9
 800d35c:	6026      	str	r6, [r4, #0]
 800d35e:	463e      	mov	r6, r7
 800d360:	6165      	str	r5, [r4, #20]
 800d362:	eba5 0509 	sub.w	r5, r5, r9
 800d366:	60a5      	str	r5, [r4, #8]
 800d368:	42be      	cmp	r6, r7
 800d36a:	d900      	bls.n	800d36e <__ssputs_r+0x86>
 800d36c:	463e      	mov	r6, r7
 800d36e:	4632      	mov	r2, r6
 800d370:	4641      	mov	r1, r8
 800d372:	6820      	ldr	r0, [r4, #0]
 800d374:	f000 faba 	bl	800d8ec <memmove>
 800d378:	68a3      	ldr	r3, [r4, #8]
 800d37a:	6822      	ldr	r2, [r4, #0]
 800d37c:	1b9b      	subs	r3, r3, r6
 800d37e:	4432      	add	r2, r6
 800d380:	2000      	movs	r0, #0
 800d382:	60a3      	str	r3, [r4, #8]
 800d384:	6022      	str	r2, [r4, #0]
 800d386:	e7db      	b.n	800d340 <__ssputs_r+0x58>
 800d388:	462a      	mov	r2, r5
 800d38a:	f000 fac9 	bl	800d920 <_realloc_r>
 800d38e:	4606      	mov	r6, r0
 800d390:	2800      	cmp	r0, #0
 800d392:	d1e1      	bne.n	800d358 <__ssputs_r+0x70>
 800d394:	4650      	mov	r0, sl
 800d396:	6921      	ldr	r1, [r4, #16]
 800d398:	f7ff fde4 	bl	800cf64 <_free_r>
 800d39c:	e7c7      	b.n	800d32e <__ssputs_r+0x46>
	...

0800d3a0 <_svfiprintf_r>:
 800d3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3a4:	4698      	mov	r8, r3
 800d3a6:	898b      	ldrh	r3, [r1, #12]
 800d3a8:	4607      	mov	r7, r0
 800d3aa:	061b      	lsls	r3, r3, #24
 800d3ac:	460d      	mov	r5, r1
 800d3ae:	4614      	mov	r4, r2
 800d3b0:	b09d      	sub	sp, #116	; 0x74
 800d3b2:	d50e      	bpl.n	800d3d2 <_svfiprintf_r+0x32>
 800d3b4:	690b      	ldr	r3, [r1, #16]
 800d3b6:	b963      	cbnz	r3, 800d3d2 <_svfiprintf_r+0x32>
 800d3b8:	2140      	movs	r1, #64	; 0x40
 800d3ba:	f7ff fe1f 	bl	800cffc <_malloc_r>
 800d3be:	6028      	str	r0, [r5, #0]
 800d3c0:	6128      	str	r0, [r5, #16]
 800d3c2:	b920      	cbnz	r0, 800d3ce <_svfiprintf_r+0x2e>
 800d3c4:	230c      	movs	r3, #12
 800d3c6:	603b      	str	r3, [r7, #0]
 800d3c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d3cc:	e0d1      	b.n	800d572 <_svfiprintf_r+0x1d2>
 800d3ce:	2340      	movs	r3, #64	; 0x40
 800d3d0:	616b      	str	r3, [r5, #20]
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	9309      	str	r3, [sp, #36]	; 0x24
 800d3d6:	2320      	movs	r3, #32
 800d3d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d3dc:	2330      	movs	r3, #48	; 0x30
 800d3de:	f04f 0901 	mov.w	r9, #1
 800d3e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d3e6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d58c <_svfiprintf_r+0x1ec>
 800d3ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d3ee:	4623      	mov	r3, r4
 800d3f0:	469a      	mov	sl, r3
 800d3f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3f6:	b10a      	cbz	r2, 800d3fc <_svfiprintf_r+0x5c>
 800d3f8:	2a25      	cmp	r2, #37	; 0x25
 800d3fa:	d1f9      	bne.n	800d3f0 <_svfiprintf_r+0x50>
 800d3fc:	ebba 0b04 	subs.w	fp, sl, r4
 800d400:	d00b      	beq.n	800d41a <_svfiprintf_r+0x7a>
 800d402:	465b      	mov	r3, fp
 800d404:	4622      	mov	r2, r4
 800d406:	4629      	mov	r1, r5
 800d408:	4638      	mov	r0, r7
 800d40a:	f7ff ff6d 	bl	800d2e8 <__ssputs_r>
 800d40e:	3001      	adds	r0, #1
 800d410:	f000 80aa 	beq.w	800d568 <_svfiprintf_r+0x1c8>
 800d414:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d416:	445a      	add	r2, fp
 800d418:	9209      	str	r2, [sp, #36]	; 0x24
 800d41a:	f89a 3000 	ldrb.w	r3, [sl]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	f000 80a2 	beq.w	800d568 <_svfiprintf_r+0x1c8>
 800d424:	2300      	movs	r3, #0
 800d426:	f04f 32ff 	mov.w	r2, #4294967295
 800d42a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d42e:	f10a 0a01 	add.w	sl, sl, #1
 800d432:	9304      	str	r3, [sp, #16]
 800d434:	9307      	str	r3, [sp, #28]
 800d436:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d43a:	931a      	str	r3, [sp, #104]	; 0x68
 800d43c:	4654      	mov	r4, sl
 800d43e:	2205      	movs	r2, #5
 800d440:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d444:	4851      	ldr	r0, [pc, #324]	; (800d58c <_svfiprintf_r+0x1ec>)
 800d446:	f000 fa43 	bl	800d8d0 <memchr>
 800d44a:	9a04      	ldr	r2, [sp, #16]
 800d44c:	b9d8      	cbnz	r0, 800d486 <_svfiprintf_r+0xe6>
 800d44e:	06d0      	lsls	r0, r2, #27
 800d450:	bf44      	itt	mi
 800d452:	2320      	movmi	r3, #32
 800d454:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d458:	0711      	lsls	r1, r2, #28
 800d45a:	bf44      	itt	mi
 800d45c:	232b      	movmi	r3, #43	; 0x2b
 800d45e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d462:	f89a 3000 	ldrb.w	r3, [sl]
 800d466:	2b2a      	cmp	r3, #42	; 0x2a
 800d468:	d015      	beq.n	800d496 <_svfiprintf_r+0xf6>
 800d46a:	4654      	mov	r4, sl
 800d46c:	2000      	movs	r0, #0
 800d46e:	f04f 0c0a 	mov.w	ip, #10
 800d472:	9a07      	ldr	r2, [sp, #28]
 800d474:	4621      	mov	r1, r4
 800d476:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d47a:	3b30      	subs	r3, #48	; 0x30
 800d47c:	2b09      	cmp	r3, #9
 800d47e:	d94e      	bls.n	800d51e <_svfiprintf_r+0x17e>
 800d480:	b1b0      	cbz	r0, 800d4b0 <_svfiprintf_r+0x110>
 800d482:	9207      	str	r2, [sp, #28]
 800d484:	e014      	b.n	800d4b0 <_svfiprintf_r+0x110>
 800d486:	eba0 0308 	sub.w	r3, r0, r8
 800d48a:	fa09 f303 	lsl.w	r3, r9, r3
 800d48e:	4313      	orrs	r3, r2
 800d490:	46a2      	mov	sl, r4
 800d492:	9304      	str	r3, [sp, #16]
 800d494:	e7d2      	b.n	800d43c <_svfiprintf_r+0x9c>
 800d496:	9b03      	ldr	r3, [sp, #12]
 800d498:	1d19      	adds	r1, r3, #4
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	9103      	str	r1, [sp, #12]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	bfbb      	ittet	lt
 800d4a2:	425b      	neglt	r3, r3
 800d4a4:	f042 0202 	orrlt.w	r2, r2, #2
 800d4a8:	9307      	strge	r3, [sp, #28]
 800d4aa:	9307      	strlt	r3, [sp, #28]
 800d4ac:	bfb8      	it	lt
 800d4ae:	9204      	strlt	r2, [sp, #16]
 800d4b0:	7823      	ldrb	r3, [r4, #0]
 800d4b2:	2b2e      	cmp	r3, #46	; 0x2e
 800d4b4:	d10c      	bne.n	800d4d0 <_svfiprintf_r+0x130>
 800d4b6:	7863      	ldrb	r3, [r4, #1]
 800d4b8:	2b2a      	cmp	r3, #42	; 0x2a
 800d4ba:	d135      	bne.n	800d528 <_svfiprintf_r+0x188>
 800d4bc:	9b03      	ldr	r3, [sp, #12]
 800d4be:	3402      	adds	r4, #2
 800d4c0:	1d1a      	adds	r2, r3, #4
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	9203      	str	r2, [sp, #12]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	bfb8      	it	lt
 800d4ca:	f04f 33ff 	movlt.w	r3, #4294967295
 800d4ce:	9305      	str	r3, [sp, #20]
 800d4d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d59c <_svfiprintf_r+0x1fc>
 800d4d4:	2203      	movs	r2, #3
 800d4d6:	4650      	mov	r0, sl
 800d4d8:	7821      	ldrb	r1, [r4, #0]
 800d4da:	f000 f9f9 	bl	800d8d0 <memchr>
 800d4de:	b140      	cbz	r0, 800d4f2 <_svfiprintf_r+0x152>
 800d4e0:	2340      	movs	r3, #64	; 0x40
 800d4e2:	eba0 000a 	sub.w	r0, r0, sl
 800d4e6:	fa03 f000 	lsl.w	r0, r3, r0
 800d4ea:	9b04      	ldr	r3, [sp, #16]
 800d4ec:	3401      	adds	r4, #1
 800d4ee:	4303      	orrs	r3, r0
 800d4f0:	9304      	str	r3, [sp, #16]
 800d4f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4f6:	2206      	movs	r2, #6
 800d4f8:	4825      	ldr	r0, [pc, #148]	; (800d590 <_svfiprintf_r+0x1f0>)
 800d4fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d4fe:	f000 f9e7 	bl	800d8d0 <memchr>
 800d502:	2800      	cmp	r0, #0
 800d504:	d038      	beq.n	800d578 <_svfiprintf_r+0x1d8>
 800d506:	4b23      	ldr	r3, [pc, #140]	; (800d594 <_svfiprintf_r+0x1f4>)
 800d508:	bb1b      	cbnz	r3, 800d552 <_svfiprintf_r+0x1b2>
 800d50a:	9b03      	ldr	r3, [sp, #12]
 800d50c:	3307      	adds	r3, #7
 800d50e:	f023 0307 	bic.w	r3, r3, #7
 800d512:	3308      	adds	r3, #8
 800d514:	9303      	str	r3, [sp, #12]
 800d516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d518:	4433      	add	r3, r6
 800d51a:	9309      	str	r3, [sp, #36]	; 0x24
 800d51c:	e767      	b.n	800d3ee <_svfiprintf_r+0x4e>
 800d51e:	460c      	mov	r4, r1
 800d520:	2001      	movs	r0, #1
 800d522:	fb0c 3202 	mla	r2, ip, r2, r3
 800d526:	e7a5      	b.n	800d474 <_svfiprintf_r+0xd4>
 800d528:	2300      	movs	r3, #0
 800d52a:	f04f 0c0a 	mov.w	ip, #10
 800d52e:	4619      	mov	r1, r3
 800d530:	3401      	adds	r4, #1
 800d532:	9305      	str	r3, [sp, #20]
 800d534:	4620      	mov	r0, r4
 800d536:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d53a:	3a30      	subs	r2, #48	; 0x30
 800d53c:	2a09      	cmp	r2, #9
 800d53e:	d903      	bls.n	800d548 <_svfiprintf_r+0x1a8>
 800d540:	2b00      	cmp	r3, #0
 800d542:	d0c5      	beq.n	800d4d0 <_svfiprintf_r+0x130>
 800d544:	9105      	str	r1, [sp, #20]
 800d546:	e7c3      	b.n	800d4d0 <_svfiprintf_r+0x130>
 800d548:	4604      	mov	r4, r0
 800d54a:	2301      	movs	r3, #1
 800d54c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d550:	e7f0      	b.n	800d534 <_svfiprintf_r+0x194>
 800d552:	ab03      	add	r3, sp, #12
 800d554:	9300      	str	r3, [sp, #0]
 800d556:	462a      	mov	r2, r5
 800d558:	4638      	mov	r0, r7
 800d55a:	4b0f      	ldr	r3, [pc, #60]	; (800d598 <_svfiprintf_r+0x1f8>)
 800d55c:	a904      	add	r1, sp, #16
 800d55e:	f3af 8000 	nop.w
 800d562:	1c42      	adds	r2, r0, #1
 800d564:	4606      	mov	r6, r0
 800d566:	d1d6      	bne.n	800d516 <_svfiprintf_r+0x176>
 800d568:	89ab      	ldrh	r3, [r5, #12]
 800d56a:	065b      	lsls	r3, r3, #25
 800d56c:	f53f af2c 	bmi.w	800d3c8 <_svfiprintf_r+0x28>
 800d570:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d572:	b01d      	add	sp, #116	; 0x74
 800d574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d578:	ab03      	add	r3, sp, #12
 800d57a:	9300      	str	r3, [sp, #0]
 800d57c:	462a      	mov	r2, r5
 800d57e:	4638      	mov	r0, r7
 800d580:	4b05      	ldr	r3, [pc, #20]	; (800d598 <_svfiprintf_r+0x1f8>)
 800d582:	a904      	add	r1, sp, #16
 800d584:	f000 f87c 	bl	800d680 <_printf_i>
 800d588:	e7eb      	b.n	800d562 <_svfiprintf_r+0x1c2>
 800d58a:	bf00      	nop
 800d58c:	0800dc95 	.word	0x0800dc95
 800d590:	0800dc9f 	.word	0x0800dc9f
 800d594:	00000000 	.word	0x00000000
 800d598:	0800d2e9 	.word	0x0800d2e9
 800d59c:	0800dc9b 	.word	0x0800dc9b

0800d5a0 <_printf_common>:
 800d5a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5a4:	4616      	mov	r6, r2
 800d5a6:	4699      	mov	r9, r3
 800d5a8:	688a      	ldr	r2, [r1, #8]
 800d5aa:	690b      	ldr	r3, [r1, #16]
 800d5ac:	4607      	mov	r7, r0
 800d5ae:	4293      	cmp	r3, r2
 800d5b0:	bfb8      	it	lt
 800d5b2:	4613      	movlt	r3, r2
 800d5b4:	6033      	str	r3, [r6, #0]
 800d5b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d5ba:	460c      	mov	r4, r1
 800d5bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d5c0:	b10a      	cbz	r2, 800d5c6 <_printf_common+0x26>
 800d5c2:	3301      	adds	r3, #1
 800d5c4:	6033      	str	r3, [r6, #0]
 800d5c6:	6823      	ldr	r3, [r4, #0]
 800d5c8:	0699      	lsls	r1, r3, #26
 800d5ca:	bf42      	ittt	mi
 800d5cc:	6833      	ldrmi	r3, [r6, #0]
 800d5ce:	3302      	addmi	r3, #2
 800d5d0:	6033      	strmi	r3, [r6, #0]
 800d5d2:	6825      	ldr	r5, [r4, #0]
 800d5d4:	f015 0506 	ands.w	r5, r5, #6
 800d5d8:	d106      	bne.n	800d5e8 <_printf_common+0x48>
 800d5da:	f104 0a19 	add.w	sl, r4, #25
 800d5de:	68e3      	ldr	r3, [r4, #12]
 800d5e0:	6832      	ldr	r2, [r6, #0]
 800d5e2:	1a9b      	subs	r3, r3, r2
 800d5e4:	42ab      	cmp	r3, r5
 800d5e6:	dc28      	bgt.n	800d63a <_printf_common+0x9a>
 800d5e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d5ec:	1e13      	subs	r3, r2, #0
 800d5ee:	6822      	ldr	r2, [r4, #0]
 800d5f0:	bf18      	it	ne
 800d5f2:	2301      	movne	r3, #1
 800d5f4:	0692      	lsls	r2, r2, #26
 800d5f6:	d42d      	bmi.n	800d654 <_printf_common+0xb4>
 800d5f8:	4649      	mov	r1, r9
 800d5fa:	4638      	mov	r0, r7
 800d5fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d600:	47c0      	blx	r8
 800d602:	3001      	adds	r0, #1
 800d604:	d020      	beq.n	800d648 <_printf_common+0xa8>
 800d606:	6823      	ldr	r3, [r4, #0]
 800d608:	68e5      	ldr	r5, [r4, #12]
 800d60a:	f003 0306 	and.w	r3, r3, #6
 800d60e:	2b04      	cmp	r3, #4
 800d610:	bf18      	it	ne
 800d612:	2500      	movne	r5, #0
 800d614:	6832      	ldr	r2, [r6, #0]
 800d616:	f04f 0600 	mov.w	r6, #0
 800d61a:	68a3      	ldr	r3, [r4, #8]
 800d61c:	bf08      	it	eq
 800d61e:	1aad      	subeq	r5, r5, r2
 800d620:	6922      	ldr	r2, [r4, #16]
 800d622:	bf08      	it	eq
 800d624:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d628:	4293      	cmp	r3, r2
 800d62a:	bfc4      	itt	gt
 800d62c:	1a9b      	subgt	r3, r3, r2
 800d62e:	18ed      	addgt	r5, r5, r3
 800d630:	341a      	adds	r4, #26
 800d632:	42b5      	cmp	r5, r6
 800d634:	d11a      	bne.n	800d66c <_printf_common+0xcc>
 800d636:	2000      	movs	r0, #0
 800d638:	e008      	b.n	800d64c <_printf_common+0xac>
 800d63a:	2301      	movs	r3, #1
 800d63c:	4652      	mov	r2, sl
 800d63e:	4649      	mov	r1, r9
 800d640:	4638      	mov	r0, r7
 800d642:	47c0      	blx	r8
 800d644:	3001      	adds	r0, #1
 800d646:	d103      	bne.n	800d650 <_printf_common+0xb0>
 800d648:	f04f 30ff 	mov.w	r0, #4294967295
 800d64c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d650:	3501      	adds	r5, #1
 800d652:	e7c4      	b.n	800d5de <_printf_common+0x3e>
 800d654:	2030      	movs	r0, #48	; 0x30
 800d656:	18e1      	adds	r1, r4, r3
 800d658:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d65c:	1c5a      	adds	r2, r3, #1
 800d65e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d662:	4422      	add	r2, r4
 800d664:	3302      	adds	r3, #2
 800d666:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d66a:	e7c5      	b.n	800d5f8 <_printf_common+0x58>
 800d66c:	2301      	movs	r3, #1
 800d66e:	4622      	mov	r2, r4
 800d670:	4649      	mov	r1, r9
 800d672:	4638      	mov	r0, r7
 800d674:	47c0      	blx	r8
 800d676:	3001      	adds	r0, #1
 800d678:	d0e6      	beq.n	800d648 <_printf_common+0xa8>
 800d67a:	3601      	adds	r6, #1
 800d67c:	e7d9      	b.n	800d632 <_printf_common+0x92>
	...

0800d680 <_printf_i>:
 800d680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d684:	460c      	mov	r4, r1
 800d686:	7e27      	ldrb	r7, [r4, #24]
 800d688:	4691      	mov	r9, r2
 800d68a:	2f78      	cmp	r7, #120	; 0x78
 800d68c:	4680      	mov	r8, r0
 800d68e:	469a      	mov	sl, r3
 800d690:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d692:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d696:	d807      	bhi.n	800d6a8 <_printf_i+0x28>
 800d698:	2f62      	cmp	r7, #98	; 0x62
 800d69a:	d80a      	bhi.n	800d6b2 <_printf_i+0x32>
 800d69c:	2f00      	cmp	r7, #0
 800d69e:	f000 80d9 	beq.w	800d854 <_printf_i+0x1d4>
 800d6a2:	2f58      	cmp	r7, #88	; 0x58
 800d6a4:	f000 80a4 	beq.w	800d7f0 <_printf_i+0x170>
 800d6a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d6ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d6b0:	e03a      	b.n	800d728 <_printf_i+0xa8>
 800d6b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d6b6:	2b15      	cmp	r3, #21
 800d6b8:	d8f6      	bhi.n	800d6a8 <_printf_i+0x28>
 800d6ba:	a001      	add	r0, pc, #4	; (adr r0, 800d6c0 <_printf_i+0x40>)
 800d6bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d6c0:	0800d719 	.word	0x0800d719
 800d6c4:	0800d72d 	.word	0x0800d72d
 800d6c8:	0800d6a9 	.word	0x0800d6a9
 800d6cc:	0800d6a9 	.word	0x0800d6a9
 800d6d0:	0800d6a9 	.word	0x0800d6a9
 800d6d4:	0800d6a9 	.word	0x0800d6a9
 800d6d8:	0800d72d 	.word	0x0800d72d
 800d6dc:	0800d6a9 	.word	0x0800d6a9
 800d6e0:	0800d6a9 	.word	0x0800d6a9
 800d6e4:	0800d6a9 	.word	0x0800d6a9
 800d6e8:	0800d6a9 	.word	0x0800d6a9
 800d6ec:	0800d83b 	.word	0x0800d83b
 800d6f0:	0800d75d 	.word	0x0800d75d
 800d6f4:	0800d81d 	.word	0x0800d81d
 800d6f8:	0800d6a9 	.word	0x0800d6a9
 800d6fc:	0800d6a9 	.word	0x0800d6a9
 800d700:	0800d85d 	.word	0x0800d85d
 800d704:	0800d6a9 	.word	0x0800d6a9
 800d708:	0800d75d 	.word	0x0800d75d
 800d70c:	0800d6a9 	.word	0x0800d6a9
 800d710:	0800d6a9 	.word	0x0800d6a9
 800d714:	0800d825 	.word	0x0800d825
 800d718:	680b      	ldr	r3, [r1, #0]
 800d71a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d71e:	1d1a      	adds	r2, r3, #4
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	600a      	str	r2, [r1, #0]
 800d724:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d728:	2301      	movs	r3, #1
 800d72a:	e0a4      	b.n	800d876 <_printf_i+0x1f6>
 800d72c:	6825      	ldr	r5, [r4, #0]
 800d72e:	6808      	ldr	r0, [r1, #0]
 800d730:	062e      	lsls	r6, r5, #24
 800d732:	f100 0304 	add.w	r3, r0, #4
 800d736:	d50a      	bpl.n	800d74e <_printf_i+0xce>
 800d738:	6805      	ldr	r5, [r0, #0]
 800d73a:	600b      	str	r3, [r1, #0]
 800d73c:	2d00      	cmp	r5, #0
 800d73e:	da03      	bge.n	800d748 <_printf_i+0xc8>
 800d740:	232d      	movs	r3, #45	; 0x2d
 800d742:	426d      	negs	r5, r5
 800d744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d748:	230a      	movs	r3, #10
 800d74a:	485e      	ldr	r0, [pc, #376]	; (800d8c4 <_printf_i+0x244>)
 800d74c:	e019      	b.n	800d782 <_printf_i+0x102>
 800d74e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d752:	6805      	ldr	r5, [r0, #0]
 800d754:	600b      	str	r3, [r1, #0]
 800d756:	bf18      	it	ne
 800d758:	b22d      	sxthne	r5, r5
 800d75a:	e7ef      	b.n	800d73c <_printf_i+0xbc>
 800d75c:	680b      	ldr	r3, [r1, #0]
 800d75e:	6825      	ldr	r5, [r4, #0]
 800d760:	1d18      	adds	r0, r3, #4
 800d762:	6008      	str	r0, [r1, #0]
 800d764:	0628      	lsls	r0, r5, #24
 800d766:	d501      	bpl.n	800d76c <_printf_i+0xec>
 800d768:	681d      	ldr	r5, [r3, #0]
 800d76a:	e002      	b.n	800d772 <_printf_i+0xf2>
 800d76c:	0669      	lsls	r1, r5, #25
 800d76e:	d5fb      	bpl.n	800d768 <_printf_i+0xe8>
 800d770:	881d      	ldrh	r5, [r3, #0]
 800d772:	2f6f      	cmp	r7, #111	; 0x6f
 800d774:	bf0c      	ite	eq
 800d776:	2308      	moveq	r3, #8
 800d778:	230a      	movne	r3, #10
 800d77a:	4852      	ldr	r0, [pc, #328]	; (800d8c4 <_printf_i+0x244>)
 800d77c:	2100      	movs	r1, #0
 800d77e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d782:	6866      	ldr	r6, [r4, #4]
 800d784:	2e00      	cmp	r6, #0
 800d786:	bfa8      	it	ge
 800d788:	6821      	ldrge	r1, [r4, #0]
 800d78a:	60a6      	str	r6, [r4, #8]
 800d78c:	bfa4      	itt	ge
 800d78e:	f021 0104 	bicge.w	r1, r1, #4
 800d792:	6021      	strge	r1, [r4, #0]
 800d794:	b90d      	cbnz	r5, 800d79a <_printf_i+0x11a>
 800d796:	2e00      	cmp	r6, #0
 800d798:	d04d      	beq.n	800d836 <_printf_i+0x1b6>
 800d79a:	4616      	mov	r6, r2
 800d79c:	fbb5 f1f3 	udiv	r1, r5, r3
 800d7a0:	fb03 5711 	mls	r7, r3, r1, r5
 800d7a4:	5dc7      	ldrb	r7, [r0, r7]
 800d7a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d7aa:	462f      	mov	r7, r5
 800d7ac:	42bb      	cmp	r3, r7
 800d7ae:	460d      	mov	r5, r1
 800d7b0:	d9f4      	bls.n	800d79c <_printf_i+0x11c>
 800d7b2:	2b08      	cmp	r3, #8
 800d7b4:	d10b      	bne.n	800d7ce <_printf_i+0x14e>
 800d7b6:	6823      	ldr	r3, [r4, #0]
 800d7b8:	07df      	lsls	r7, r3, #31
 800d7ba:	d508      	bpl.n	800d7ce <_printf_i+0x14e>
 800d7bc:	6923      	ldr	r3, [r4, #16]
 800d7be:	6861      	ldr	r1, [r4, #4]
 800d7c0:	4299      	cmp	r1, r3
 800d7c2:	bfde      	ittt	le
 800d7c4:	2330      	movle	r3, #48	; 0x30
 800d7c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d7ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d7ce:	1b92      	subs	r2, r2, r6
 800d7d0:	6122      	str	r2, [r4, #16]
 800d7d2:	464b      	mov	r3, r9
 800d7d4:	4621      	mov	r1, r4
 800d7d6:	4640      	mov	r0, r8
 800d7d8:	f8cd a000 	str.w	sl, [sp]
 800d7dc:	aa03      	add	r2, sp, #12
 800d7de:	f7ff fedf 	bl	800d5a0 <_printf_common>
 800d7e2:	3001      	adds	r0, #1
 800d7e4:	d14c      	bne.n	800d880 <_printf_i+0x200>
 800d7e6:	f04f 30ff 	mov.w	r0, #4294967295
 800d7ea:	b004      	add	sp, #16
 800d7ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7f0:	4834      	ldr	r0, [pc, #208]	; (800d8c4 <_printf_i+0x244>)
 800d7f2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d7f6:	680e      	ldr	r6, [r1, #0]
 800d7f8:	6823      	ldr	r3, [r4, #0]
 800d7fa:	f856 5b04 	ldr.w	r5, [r6], #4
 800d7fe:	061f      	lsls	r7, r3, #24
 800d800:	600e      	str	r6, [r1, #0]
 800d802:	d514      	bpl.n	800d82e <_printf_i+0x1ae>
 800d804:	07d9      	lsls	r1, r3, #31
 800d806:	bf44      	itt	mi
 800d808:	f043 0320 	orrmi.w	r3, r3, #32
 800d80c:	6023      	strmi	r3, [r4, #0]
 800d80e:	b91d      	cbnz	r5, 800d818 <_printf_i+0x198>
 800d810:	6823      	ldr	r3, [r4, #0]
 800d812:	f023 0320 	bic.w	r3, r3, #32
 800d816:	6023      	str	r3, [r4, #0]
 800d818:	2310      	movs	r3, #16
 800d81a:	e7af      	b.n	800d77c <_printf_i+0xfc>
 800d81c:	6823      	ldr	r3, [r4, #0]
 800d81e:	f043 0320 	orr.w	r3, r3, #32
 800d822:	6023      	str	r3, [r4, #0]
 800d824:	2378      	movs	r3, #120	; 0x78
 800d826:	4828      	ldr	r0, [pc, #160]	; (800d8c8 <_printf_i+0x248>)
 800d828:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d82c:	e7e3      	b.n	800d7f6 <_printf_i+0x176>
 800d82e:	065e      	lsls	r6, r3, #25
 800d830:	bf48      	it	mi
 800d832:	b2ad      	uxthmi	r5, r5
 800d834:	e7e6      	b.n	800d804 <_printf_i+0x184>
 800d836:	4616      	mov	r6, r2
 800d838:	e7bb      	b.n	800d7b2 <_printf_i+0x132>
 800d83a:	680b      	ldr	r3, [r1, #0]
 800d83c:	6826      	ldr	r6, [r4, #0]
 800d83e:	1d1d      	adds	r5, r3, #4
 800d840:	6960      	ldr	r0, [r4, #20]
 800d842:	600d      	str	r5, [r1, #0]
 800d844:	0635      	lsls	r5, r6, #24
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	d501      	bpl.n	800d84e <_printf_i+0x1ce>
 800d84a:	6018      	str	r0, [r3, #0]
 800d84c:	e002      	b.n	800d854 <_printf_i+0x1d4>
 800d84e:	0671      	lsls	r1, r6, #25
 800d850:	d5fb      	bpl.n	800d84a <_printf_i+0x1ca>
 800d852:	8018      	strh	r0, [r3, #0]
 800d854:	2300      	movs	r3, #0
 800d856:	4616      	mov	r6, r2
 800d858:	6123      	str	r3, [r4, #16]
 800d85a:	e7ba      	b.n	800d7d2 <_printf_i+0x152>
 800d85c:	680b      	ldr	r3, [r1, #0]
 800d85e:	1d1a      	adds	r2, r3, #4
 800d860:	600a      	str	r2, [r1, #0]
 800d862:	681e      	ldr	r6, [r3, #0]
 800d864:	2100      	movs	r1, #0
 800d866:	4630      	mov	r0, r6
 800d868:	6862      	ldr	r2, [r4, #4]
 800d86a:	f000 f831 	bl	800d8d0 <memchr>
 800d86e:	b108      	cbz	r0, 800d874 <_printf_i+0x1f4>
 800d870:	1b80      	subs	r0, r0, r6
 800d872:	6060      	str	r0, [r4, #4]
 800d874:	6863      	ldr	r3, [r4, #4]
 800d876:	6123      	str	r3, [r4, #16]
 800d878:	2300      	movs	r3, #0
 800d87a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d87e:	e7a8      	b.n	800d7d2 <_printf_i+0x152>
 800d880:	4632      	mov	r2, r6
 800d882:	4649      	mov	r1, r9
 800d884:	4640      	mov	r0, r8
 800d886:	6923      	ldr	r3, [r4, #16]
 800d888:	47d0      	blx	sl
 800d88a:	3001      	adds	r0, #1
 800d88c:	d0ab      	beq.n	800d7e6 <_printf_i+0x166>
 800d88e:	6823      	ldr	r3, [r4, #0]
 800d890:	079b      	lsls	r3, r3, #30
 800d892:	d413      	bmi.n	800d8bc <_printf_i+0x23c>
 800d894:	68e0      	ldr	r0, [r4, #12]
 800d896:	9b03      	ldr	r3, [sp, #12]
 800d898:	4298      	cmp	r0, r3
 800d89a:	bfb8      	it	lt
 800d89c:	4618      	movlt	r0, r3
 800d89e:	e7a4      	b.n	800d7ea <_printf_i+0x16a>
 800d8a0:	2301      	movs	r3, #1
 800d8a2:	4632      	mov	r2, r6
 800d8a4:	4649      	mov	r1, r9
 800d8a6:	4640      	mov	r0, r8
 800d8a8:	47d0      	blx	sl
 800d8aa:	3001      	adds	r0, #1
 800d8ac:	d09b      	beq.n	800d7e6 <_printf_i+0x166>
 800d8ae:	3501      	adds	r5, #1
 800d8b0:	68e3      	ldr	r3, [r4, #12]
 800d8b2:	9903      	ldr	r1, [sp, #12]
 800d8b4:	1a5b      	subs	r3, r3, r1
 800d8b6:	42ab      	cmp	r3, r5
 800d8b8:	dcf2      	bgt.n	800d8a0 <_printf_i+0x220>
 800d8ba:	e7eb      	b.n	800d894 <_printf_i+0x214>
 800d8bc:	2500      	movs	r5, #0
 800d8be:	f104 0619 	add.w	r6, r4, #25
 800d8c2:	e7f5      	b.n	800d8b0 <_printf_i+0x230>
 800d8c4:	0800dca6 	.word	0x0800dca6
 800d8c8:	0800dcb7 	.word	0x0800dcb7

0800d8cc <__retarget_lock_acquire_recursive>:
 800d8cc:	4770      	bx	lr

0800d8ce <__retarget_lock_release_recursive>:
 800d8ce:	4770      	bx	lr

0800d8d0 <memchr>:
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	b510      	push	{r4, lr}
 800d8d4:	b2c9      	uxtb	r1, r1
 800d8d6:	4402      	add	r2, r0
 800d8d8:	4293      	cmp	r3, r2
 800d8da:	4618      	mov	r0, r3
 800d8dc:	d101      	bne.n	800d8e2 <memchr+0x12>
 800d8de:	2000      	movs	r0, #0
 800d8e0:	e003      	b.n	800d8ea <memchr+0x1a>
 800d8e2:	7804      	ldrb	r4, [r0, #0]
 800d8e4:	3301      	adds	r3, #1
 800d8e6:	428c      	cmp	r4, r1
 800d8e8:	d1f6      	bne.n	800d8d8 <memchr+0x8>
 800d8ea:	bd10      	pop	{r4, pc}

0800d8ec <memmove>:
 800d8ec:	4288      	cmp	r0, r1
 800d8ee:	b510      	push	{r4, lr}
 800d8f0:	eb01 0402 	add.w	r4, r1, r2
 800d8f4:	d902      	bls.n	800d8fc <memmove+0x10>
 800d8f6:	4284      	cmp	r4, r0
 800d8f8:	4623      	mov	r3, r4
 800d8fa:	d807      	bhi.n	800d90c <memmove+0x20>
 800d8fc:	1e43      	subs	r3, r0, #1
 800d8fe:	42a1      	cmp	r1, r4
 800d900:	d008      	beq.n	800d914 <memmove+0x28>
 800d902:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d906:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d90a:	e7f8      	b.n	800d8fe <memmove+0x12>
 800d90c:	4601      	mov	r1, r0
 800d90e:	4402      	add	r2, r0
 800d910:	428a      	cmp	r2, r1
 800d912:	d100      	bne.n	800d916 <memmove+0x2a>
 800d914:	bd10      	pop	{r4, pc}
 800d916:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d91a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d91e:	e7f7      	b.n	800d910 <memmove+0x24>

0800d920 <_realloc_r>:
 800d920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d922:	4607      	mov	r7, r0
 800d924:	4614      	mov	r4, r2
 800d926:	460e      	mov	r6, r1
 800d928:	b921      	cbnz	r1, 800d934 <_realloc_r+0x14>
 800d92a:	4611      	mov	r1, r2
 800d92c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d930:	f7ff bb64 	b.w	800cffc <_malloc_r>
 800d934:	b922      	cbnz	r2, 800d940 <_realloc_r+0x20>
 800d936:	f7ff fb15 	bl	800cf64 <_free_r>
 800d93a:	4625      	mov	r5, r4
 800d93c:	4628      	mov	r0, r5
 800d93e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d940:	f000 f814 	bl	800d96c <_malloc_usable_size_r>
 800d944:	42a0      	cmp	r0, r4
 800d946:	d20f      	bcs.n	800d968 <_realloc_r+0x48>
 800d948:	4621      	mov	r1, r4
 800d94a:	4638      	mov	r0, r7
 800d94c:	f7ff fb56 	bl	800cffc <_malloc_r>
 800d950:	4605      	mov	r5, r0
 800d952:	2800      	cmp	r0, #0
 800d954:	d0f2      	beq.n	800d93c <_realloc_r+0x1c>
 800d956:	4631      	mov	r1, r6
 800d958:	4622      	mov	r2, r4
 800d95a:	f7ff faed 	bl	800cf38 <memcpy>
 800d95e:	4631      	mov	r1, r6
 800d960:	4638      	mov	r0, r7
 800d962:	f7ff faff 	bl	800cf64 <_free_r>
 800d966:	e7e9      	b.n	800d93c <_realloc_r+0x1c>
 800d968:	4635      	mov	r5, r6
 800d96a:	e7e7      	b.n	800d93c <_realloc_r+0x1c>

0800d96c <_malloc_usable_size_r>:
 800d96c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d970:	1f18      	subs	r0, r3, #4
 800d972:	2b00      	cmp	r3, #0
 800d974:	bfbc      	itt	lt
 800d976:	580b      	ldrlt	r3, [r1, r0]
 800d978:	18c0      	addlt	r0, r0, r3
 800d97a:	4770      	bx	lr

0800d97c <_init>:
 800d97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d97e:	bf00      	nop
 800d980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d982:	bc08      	pop	{r3}
 800d984:	469e      	mov	lr, r3
 800d986:	4770      	bx	lr

0800d988 <_fini>:
 800d988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d98a:	bf00      	nop
 800d98c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d98e:	bc08      	pop	{r3}
 800d990:	469e      	mov	lr, r3
 800d992:	4770      	bx	lr
